(set-logic HORN)
(declare-datatypes ((Nat_0 0)) (((Z_0 ) (S_0 (unS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun unS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_0 (Nat_0) Bool)
(declare-fun isS_0 (Nat_0) Bool)
(assert (forall ((x_50 Nat_0) (x_49 Nat_0))
	(=> (= x_50 (S_0 x_49))
	    (unS_1 x_49 x_50))))
(assert (isZ_0 Z_0))
(assert (forall ((x_51 Nat_0))
	(isS_0 (S_0 x_51))))
(assert (forall ((x_52 Nat_0))
	(diseqNat_0 Z_0 (S_0 x_52))))
(assert (forall ((x_53 Nat_0))
	(diseqNat_0 (S_0 x_53) Z_0)))
(assert (forall ((x_54 Nat_0) (x_55 Nat_0))
	(=> (diseqNat_0 x_54 x_55)
	    (diseqNat_0 (S_0 x_54) (S_0 x_55)))))
(declare-fun add_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun minus_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun le_0 (Nat_0 Nat_0) Bool)
(declare-fun ge_0 (Nat_0 Nat_0) Bool)
(declare-fun lt_0 (Nat_0 Nat_0) Bool)
(declare-fun gt_0 (Nat_0 Nat_0) Bool)
(declare-fun mult_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun div_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun mod_0 (Nat_0 Nat_0 Nat_0) Bool)
(assert (forall ((y_7 Nat_0))
	(add_0 y_7 Z_0 y_7)))
(assert (forall ((x_47 Nat_0) (y_7 Nat_0) (r_0 Nat_0))
	(=> (add_0 r_0 x_47 y_7)
	    (add_0 (S_0 r_0) (S_0 x_47) y_7))))
(assert (forall ((y_7 Nat_0))
	(minus_0 Z_0 Z_0 y_7)))
(assert (forall ((x_47 Nat_0) (y_7 Nat_0) (r_0 Nat_0))
	(=> (minus_0 r_0 x_47 y_7)
	    (minus_0 (S_0 r_0) (S_0 x_47) y_7))))
(assert (forall ((y_7 Nat_0))
	(le_0 Z_0 y_7)))
(assert (forall ((x_47 Nat_0) (y_7 Nat_0))
	(=> (le_0 x_47 y_7)
	    (le_0 (S_0 x_47) (S_0 y_7)))))
(assert (forall ((y_7 Nat_0))
	(ge_0 y_7 Z_0)))
(assert (forall ((x_47 Nat_0) (y_7 Nat_0))
	(=> (ge_0 x_47 y_7)
	    (ge_0 (S_0 x_47) (S_0 y_7)))))
(assert (forall ((y_7 Nat_0))
	(lt_0 Z_0 (S_0 y_7))))
(assert (forall ((x_47 Nat_0) (y_7 Nat_0))
	(=> (lt_0 x_47 y_7)
	    (lt_0 (S_0 x_47) (S_0 y_7)))))
(assert (forall ((y_7 Nat_0))
	(gt_0 (S_0 y_7) Z_0)))
(assert (forall ((x_47 Nat_0) (y_7 Nat_0))
	(=> (gt_0 x_47 y_7)
	    (gt_0 (S_0 x_47) (S_0 y_7)))))
(assert (forall ((y_7 Nat_0))
	(mult_0 Z_0 Z_0 y_7)))
(assert (forall ((x_47 Nat_0) (y_7 Nat_0) (r_0 Nat_0) (z_4 Nat_0))
	(=>	(and (mult_0 r_0 x_47 y_7)
			(add_0 z_4 r_0 y_7))
		(mult_0 z_4 (S_0 x_47) y_7))))
(assert (forall ((x_47 Nat_0) (y_7 Nat_0))
	(=> (lt_0 x_47 y_7)
	    (div_0 Z_0 x_47 y_7))))
(assert (forall ((x_47 Nat_0) (y_7 Nat_0) (r_0 Nat_0) (z_4 Nat_0))
	(=>	(and (ge_0 x_47 y_7)
			(minus_0 z_4 x_47 y_7)
			(div_0 r_0 z_4 y_7))
		(div_0 (S_0 r_0) x_47 y_7))))
(assert (forall ((x_47 Nat_0) (y_7 Nat_0))
	(=> (lt_0 x_47 y_7)
	    (mod_0 x_47 x_47 y_7))))
(assert (forall ((x_47 Nat_0) (y_7 Nat_0) (r_0 Nat_0) (z_4 Nat_0))
	(=>	(and (ge_0 x_47 y_7)
			(minus_0 z_4 x_47 y_7)
			(mod_0 r_0 z_4 y_7))
		(mod_0 r_0 x_47 y_7))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Bool) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_3 (Bool list_0) Bool)
(declare-fun tail_3 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_59 list_0) (x_57 Bool) (x_58 list_0))
	(=> (= x_59 (cons_0 x_57 x_58))
	    (head_3 x_57 x_59))))
(assert (forall ((x_59 list_0) (x_57 Bool) (x_58 list_0))
	(=> (= x_59 (cons_0 x_57 x_58))
	    (tail_3 x_58 x_59))))
(assert (isnil_0 nil_0))
(assert (forall ((x_60 Bool) (x_61 list_0))
	(iscons_0 (cons_0 x_60 x_61))))
(assert (forall ((x_62 Bool) (x_63 list_0))
	(diseqlist_0 nil_0 (cons_0 x_62 x_63))))
(assert (forall ((x_64 Bool) (x_65 list_0))
	(diseqlist_0 (cons_0 x_64 x_65) nil_0)))
(assert (forall ((x_66 Bool) (x_67 list_0) (x_68 Bool) (x_69 list_0))
	(=> (not (= x_66 x_68))
	    (diseqlist_0 (cons_0 x_66 x_67) (cons_0 x_68 x_69)))))
(assert (forall ((x_66 Bool) (x_67 list_0) (x_68 Bool) (x_69 list_0))
	(=> (diseqlist_0 x_67 x_69)
	    (diseqlist_0 (cons_0 x_66 x_67) (cons_0 x_68 x_69)))))
(declare-datatypes ((It_0 0)) (((A_0 ) (B_0 ) (C_0 ))))
(declare-fun diseqIt_0 (It_0 It_0) Bool)
(declare-fun isA_0 (It_0) Bool)
(declare-fun isB_0 (It_0) Bool)
(declare-fun isC_0 (It_0) Bool)
(assert (isA_0 A_0))
(assert (isB_0 B_0))
(assert (isC_0 C_0))
(assert (diseqIt_0 A_0 B_0))
(assert (diseqIt_0 A_0 C_0))
(assert (diseqIt_0 B_0 A_0))
(assert (diseqIt_0 C_0 A_0))
(assert (diseqIt_0 B_0 C_0))
(assert (diseqIt_0 C_0 B_0))
(declare-datatypes ((list_1 0)) (((nil_1 ) (cons_1 (head_1 It_0) (tail_1 list_1)))))
(declare-fun diseqlist_1 (list_1 list_1) Bool)
(declare-fun head_4 (It_0 list_1) Bool)
(declare-fun tail_4 (list_1 list_1) Bool)
(declare-fun isnil_1 (list_1) Bool)
(declare-fun iscons_1 (list_1) Bool)
(assert (forall ((x_76 list_1) (x_74 It_0) (x_75 list_1))
	(=> (= x_76 (cons_1 x_74 x_75))
	    (head_4 x_74 x_76))))
(assert (forall ((x_76 list_1) (x_74 It_0) (x_75 list_1))
	(=> (= x_76 (cons_1 x_74 x_75))
	    (tail_4 x_75 x_76))))
(assert (isnil_1 nil_1))
(assert (forall ((x_77 It_0) (x_78 list_1))
	(iscons_1 (cons_1 x_77 x_78))))
(assert (forall ((x_79 It_0) (x_80 list_1))
	(diseqlist_1 nil_1 (cons_1 x_79 x_80))))
(assert (forall ((x_81 It_0) (x_82 list_1))
	(diseqlist_1 (cons_1 x_81 x_82) nil_1)))
(assert (forall ((x_83 It_0) (x_84 list_1) (x_85 It_0) (x_86 list_1))
	(=> (diseqIt_0 x_83 x_85)
	    (diseqlist_1 (cons_1 x_83 x_84) (cons_1 x_85 x_86)))))
(assert (forall ((x_83 It_0) (x_84 list_1) (x_85 It_0) (x_86 list_1))
	(=> (diseqlist_1 x_84 x_86)
	    (diseqlist_1 (cons_1 x_83 x_84) (cons_1 x_85 x_86)))))
(declare-datatypes ((list_2 0)) (((nil_2 ) (cons_2 (head_2 list_1) (tail_2 list_2)))))
(declare-fun diseqlist_2 (list_2 list_2) Bool)
(declare-fun head_5 (list_1 list_2) Bool)
(declare-fun tail_5 (list_2 list_2) Bool)
(declare-fun isnil_2 (list_2) Bool)
(declare-fun iscons_2 (list_2) Bool)
(assert (forall ((x_90 list_2) (x_88 list_1) (x_89 list_2))
	(=> (= x_90 (cons_2 x_88 x_89))
	    (head_5 x_88 x_90))))
(assert (forall ((x_90 list_2) (x_88 list_1) (x_89 list_2))
	(=> (= x_90 (cons_2 x_88 x_89))
	    (tail_5 x_89 x_90))))
(assert (isnil_2 nil_2))
(assert (forall ((x_91 list_1) (x_92 list_2))
	(iscons_2 (cons_2 x_91 x_92))))
(assert (forall ((x_93 list_1) (x_94 list_2))
	(diseqlist_2 nil_2 (cons_2 x_93 x_94))))
(assert (forall ((x_95 list_1) (x_96 list_2))
	(diseqlist_2 (cons_2 x_95 x_96) nil_2)))
(assert (forall ((x_97 list_1) (x_98 list_2) (x_99 list_1) (x_100 list_2))
	(=> (diseqlist_1 x_97 x_99)
	    (diseqlist_2 (cons_2 x_97 x_98) (cons_2 x_99 x_100)))))
(assert (forall ((x_97 list_1) (x_98 list_2) (x_99 list_1) (x_100 list_2))
	(=> (diseqlist_2 x_98 x_100)
	    (diseqlist_2 (cons_2 x_97 x_98) (cons_2 x_99 x_100)))))
(declare-fun removeOne_0 (list_2 It_0 list_2) Bool)
(assert (forall ((x_0 It_0) (y_0 list_2) (z_0 list_1) (x_1 list_2) (x_16 list_2) (x_17 list_2))
	(=>	(and (= x_16 (cons_2 (cons_1 x_0 z_0) x_17))
			(removeOne_0 x_17 x_0 x_1)
			(= y_0 (cons_2 z_0 x_1)))
		(removeOne_0 x_16 x_0 y_0))))
(assert (forall ((x_0 It_0) (y_0 list_2) (x_18 list_2))
	(=>	(and (= x_18 nil_2)
			(= y_0 nil_2))
		(removeOne_0 x_18 x_0 y_0))))
(declare-fun removeOne_1 (list_2 list_1) Bool)
(assert (forall ((x_2 list_1) (y_1 It_0) (xs_0 list_1) (x_19 list_2) (x_20 list_2) (x_21 list_2))
	(=>	(and (= x_19 (cons_2 xs_0 x_21))
			(removeOne_1 x_20 xs_0)
			(removeOne_0 x_21 y_1 x_20)
			(= x_2 (cons_1 y_1 xs_0)))
		(removeOne_1 x_19 x_2))))
(assert (forall ((x_2 list_1) (x_22 list_2))
	(=>	(and (= x_22 nil_2)
			(= x_2 nil_1))
		(removeOne_1 x_22 x_2))))
(declare-fun or_0 (Bool list_0) Bool)
(assert (forall ((x_3 list_0) (y_2 Bool) (xs_1 list_0) (x_23 Bool) (x_24 Bool))
	(=>	(and (= x_23 (or y_2 x_24))
			(or_0 x_24 xs_1)
			(= x_3 (cons_0 y_2 xs_1)))
		(or_0 x_23 x_3))))
(assert (forall ((x_3 list_0) (x_25 Bool))
	(=>	(and (= x_25 false)
			(= x_3 nil_0))
		(or_0 x_25 x_3))))
(declare-fun isPrefix_0 (Bool list_1 list_1) Bool)
(assert (forall ((x_4 list_1) (y_3 list_1) (z_1 It_0) (x_5 list_1) (x_6 It_0) (x_7 list_1) (x_26 Bool) (x_27 Bool))
	(=>	(and (= x_26 (and (= z_1 x_6) x_27))
			(isPrefix_0 x_27 x_5 x_7)
			(= x_4 (cons_1 z_1 x_5))
			(= y_3 (cons_1 x_6 x_7)))
		(isPrefix_0 x_26 x_4 y_3))))
(assert (forall ((x_4 list_1) (y_3 list_1) (z_1 It_0) (x_5 list_1) (x_28 Bool))
	(=>	(and (= x_28 false)
			(= x_4 (cons_1 z_1 x_5))
			(= y_3 nil_1))
		(isPrefix_0 x_28 x_4 y_3))))
(assert (forall ((x_4 list_1) (y_3 list_1) (x_29 Bool))
	(=>	(and (= x_29 true)
			(= x_4 nil_1))
		(isPrefix_0 x_29 x_4 y_3))))
(declare-fun isRelaxedPrefix_0 (Bool list_1 list_1) Bool)
(assert (forall ((x_8 list_1) (y_4 list_1) (z_2 It_0) (x_9 list_1) (x_10 It_0) (x_11 list_1) (x_12 It_0) (x_13 list_1) (x_30 Bool) (x_31 Bool))
	(=>	(and (= x_30 x_31)
			(isRelaxedPrefix_0 x_31 (cons_1 x_10 x_11) x_13)
			(= x_8 (cons_1 z_2 x_9))
			(= x_9 (cons_1 x_10 x_11))
			(= y_4 (cons_1 x_12 x_13))
			(= z_2 x_12))
		(isRelaxedPrefix_0 x_30 x_8 y_4))))
(assert (forall ((x_8 list_1) (y_4 list_1) (z_2 It_0) (x_9 list_1) (x_10 It_0) (x_11 list_1) (x_12 It_0) (x_13 list_1) (x_32 Bool) (x_33 Bool))
	(=>	(and (= x_32 x_33)
			(isPrefix_0 x_33 (cons_1 x_10 x_11) (cons_1 x_12 x_13))
			(= x_8 (cons_1 z_2 x_9))
			(= x_9 (cons_1 x_10 x_11))
			(= y_4 (cons_1 x_12 x_13))
			(diseqIt_0 z_2 x_12))
		(isRelaxedPrefix_0 x_32 x_8 y_4))))
(assert (forall ((x_8 list_1) (y_4 list_1) (z_2 It_0) (x_9 list_1) (x_10 It_0) (x_11 list_1) (x_34 Bool))
	(=>	(and (= x_34 false)
			(= x_8 (cons_1 z_2 x_9))
			(= x_9 (cons_1 x_10 x_11))
			(= y_4 nil_1))
		(isRelaxedPrefix_0 x_34 x_8 y_4))))
(assert (forall ((x_8 list_1) (y_4 list_1) (z_2 It_0) (x_9 list_1) (x_35 Bool))
	(=>	(and (= x_35 true)
			(= x_8 (cons_1 z_2 x_9))
			(= x_9 nil_1))
		(isRelaxedPrefix_0 x_35 x_8 y_4))))
(assert (forall ((x_8 list_1) (y_4 list_1) (x_36 Bool))
	(=>	(and (= x_36 true)
			(= x_8 nil_1))
		(isRelaxedPrefix_0 x_36 x_8 y_4))))
(declare-fun spec_0 (list_0 list_1 list_2) Bool)
(assert (forall ((ys_0 list_1) (x_14 list_2) (y_5 list_1) (z_3 list_2) (x_37 list_0) (x_38 Bool) (x_39 list_0))
	(=>	(and (= x_37 (cons_0 x_38 x_39))
			(isPrefix_0 x_38 y_5 ys_0)
			(spec_0 x_39 ys_0 z_3)
			(= x_14 (cons_2 y_5 z_3)))
		(spec_0 x_37 ys_0 x_14))))
(assert (forall ((ys_0 list_1) (x_14 list_2) (x_40 list_0))
	(=>	(and (= x_40 nil_0)
			(= x_14 nil_2))
		(spec_0 x_40 ys_0 x_14))))
(declare-fun spec_1 (Bool list_1 list_1) Bool)
(assert (forall ((x_15 list_1) (y_6 list_1) (x_41 Bool) (x_42 list_2) (x_43 list_0) (x_44 Bool))
	(=>	(and (= x_41 x_44)
			(removeOne_1 x_42 x_15)
			(spec_0 x_43 y_6 (cons_2 x_15 x_42))
			(or_0 x_44 x_43))
		(spec_1 x_41 x_15 y_6))))
(assert (forall ((xs_2 list_1) (ys_1 list_1) (x_45 Bool) (x_46 Bool))
	(=>	(and (not (= x_45 x_46))
			(isRelaxedPrefix_0 x_45 xs_2 ys_1)
			(spec_1 x_46 xs_2 ys_1))
		false)))
(check-sat)
