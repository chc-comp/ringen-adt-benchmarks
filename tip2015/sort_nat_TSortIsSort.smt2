(set-logic HORN)
(declare-datatypes ((Bool_0 0)) (((false_0 ) (true_0 ))))
(declare-fun diseqBool_0 (Bool_0 Bool_0) Bool)
(declare-datatypes ((Nat_0 0)) (((zero_0 ) (succ_0 (p_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-datatypes ((Tree_0 0)) (((TNode_0 (projTNode_0 Tree_0) (projTNode_1 Nat_0) (projTNode_2 Tree_0)) (TNil_0 ))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun leq_0 (Bool_0 Nat_0 Nat_0) Bool)
(declare-fun insert_0 (list_0 Nat_0 list_0) Bool)
(declare-fun isort_0 (list_0 list_0) Bool)
(declare-fun flatten_0 (list_0 Tree_0 list_0) Bool)
(declare-fun add_0 (Tree_0 Nat_0 Tree_0) Bool)
(declare-fun toTree_0 (Tree_0 list_0) Bool)
(declare-fun tsort_0 (list_0 list_0) Bool)
(assert (diseqBool_0 false_0 true_0))
(assert (diseqBool_0 true_0 false_0))
(assert (forall ((x_49 Nat_0))
	(diseqNat_0 zero_0 (succ_0 x_49))))
(assert (forall ((x_50 Nat_0))
	(diseqNat_0 (succ_0 x_50) zero_0)))
(assert (forall ((x_51 Nat_0) (x_52 Nat_0))
	(=> (diseqNat_0 x_51 x_52) (diseqNat_0 (succ_0 x_51) (succ_0 x_52)))))
(assert (forall ((x_79 Nat_0) (x_80 list_0))
	(diseqlist_0 nil_0 (cons_0 x_79 x_80))))
(assert (forall ((x_81 Nat_0) (x_82 list_0))
	(diseqlist_0 (cons_0 x_81 x_82) nil_0)))
(assert (forall ((x_83 Nat_0) (x_84 list_0) (x_85 Nat_0) (x_86 list_0))
	(=> (diseqNat_0 x_83 x_85) (diseqlist_0 (cons_0 x_83 x_84) (cons_0 x_85 x_86)))))
(assert (forall ((x_83 Nat_0) (x_84 list_0) (x_85 Nat_0) (x_86 list_0))
	(=> (diseqlist_0 x_84 x_86) (diseqlist_0 (cons_0 x_83 x_84) (cons_0 x_85 x_86)))))
(assert (forall ((x_8 Bool_0) (x_1 Nat_0) (z_0 Nat_0))
	(=> (leq_0 x_8 z_0 x_1) (leq_0 x_8 (succ_0 z_0) (succ_0 x_1)))))
(assert (forall ((z_0 Nat_0))
	(leq_0 false_0 (succ_0 z_0) zero_0)))
(assert (forall ((y_0 Nat_0))
	(leq_0 true_0 zero_0 y_0)))
(assert (forall ((z_1 Nat_0) (xs_0 list_0) (x_2 Nat_0))
	(=> (leq_0 true_0 x_2 z_1) (insert_0 (cons_0 x_2 (cons_0 z_1 xs_0)) x_2 (cons_0 z_1 xs_0)))))
(assert (forall ((x_16 list_0) (x_14 Bool_0) (z_1 Nat_0) (xs_0 list_0) (x_2 Nat_0))
	(=> (and (diseqBool_0 x_14 true_0) (insert_0 x_16 x_2 xs_0) (leq_0 x_14 x_2 z_1)) (insert_0 (cons_0 z_1 x_16) x_2 (cons_0 z_1 xs_0)))))
(assert (forall ((x_2 Nat_0))
	(insert_0 (cons_0 x_2 nil_0) x_2 nil_0)))
(assert (forall ((x_18 list_0) (x_19 list_0) (y_2 Nat_0) (xs_1 list_0))
	(=> (and (isort_0 x_19 xs_1) (insert_0 x_18 y_2 x_19)) (isort_0 x_18 (cons_0 y_2 xs_1)))))
(assert (isort_0 nil_0 nil_0))
(assert (forall ((x_22 list_0))
	(flatten_0 x_22 TNil_0 x_22)))
(assert (forall ((x_23 list_0) (x_24 list_0) (q_0 Tree_0) (z_2 Nat_0) (r_0 Tree_0) (y_3 list_0))
	(=> (and (flatten_0 x_24 r_0 y_3) (flatten_0 x_23 q_0 (cons_0 z_2 x_24))) (flatten_0 x_23 (TNode_0 q_0 z_2 r_0) y_3))))
(assert (forall ((x_5 Nat_0))
	(add_0 (TNode_0 TNil_0 x_5 TNil_0) x_5 TNil_0)))
(assert (forall ((x_29 Tree_0) (q_1 Tree_0) (z_3 Nat_0) (r_1 Tree_0) (x_5 Nat_0))
	(=> (and (add_0 x_29 x_5 q_1) (leq_0 true_0 x_5 z_3)) (add_0 (TNode_0 x_29 z_3 r_1) x_5 (TNode_0 q_1 z_3 r_1)))))
(assert (forall ((x_32 Tree_0) (x_30 Bool_0) (q_1 Tree_0) (z_3 Nat_0) (r_1 Tree_0) (x_5 Nat_0))
	(=> (and (diseqBool_0 x_30 true_0) (add_0 x_32 x_5 r_1) (leq_0 x_30 x_5 z_3)) (add_0 (TNode_0 q_1 z_3 x_32) x_5 (TNode_0 q_1 z_3 r_1)))))
(assert (forall ((x_33 Tree_0) (x_34 Tree_0) (y_5 Nat_0) (xs_2 list_0))
	(=> (and (toTree_0 x_34 xs_2) (add_0 x_33 y_5 x_34)) (toTree_0 x_33 (cons_0 y_5 xs_2)))))
(assert (toTree_0 TNil_0 nil_0))
(assert (forall ((x_37 list_0) (x_38 Tree_0) (x_7 list_0))
	(=> (and (toTree_0 x_38 x_7) (flatten_0 x_37 x_38 nil_0)) (tsort_0 x_37 x_7))))
(assert (forall ((x_40 list_0) (x_41 list_0) (xs_3 list_0))
	(=> (and (diseqlist_0 x_40 x_41) (tsort_0 x_40 xs_3) (isort_0 x_41 xs_3)) false)))
(check-sat)
(get-model)
