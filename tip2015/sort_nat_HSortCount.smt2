(set-logic HORN)
(declare-datatypes ((Bool_0 0)) (((false_0 ) (true_0 ))))
(declare-fun diseqBool_0 (Bool_0 Bool_0) Bool)
(declare-datatypes ((Nat_0 0)) (((zero_0 ) (succ_0 (p_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-datatypes ((Heap_0 0)) (((Node_0 (projNode_0 Heap_0) (projNode_1 Nat_0) (projNode_2 Heap_0)) (Nil_1 ))))
(declare-datatypes ((list_1 0)) (((nil_2 ) (cons_1 (head_1 Heap_0) (tail_1 list_1)))))
(declare-fun toHeap_0 (list_1 list_0) Bool)
(declare-fun plus_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun leq_0 (Bool_0 Nat_0 Nat_0) Bool)
(declare-fun hmerge_0 (Heap_0 Heap_0 Heap_0) Bool)
(declare-fun hpairwise_0 (list_1 list_1) Bool)
(declare-fun hmerging_0 (Heap_0 list_1) Bool)
(declare-fun toHeap_1 (Heap_0 list_0) Bool)
(declare-fun toList_0 (list_0 Heap_0) Bool)
(declare-fun hsort_0 (list_0 list_0) Bool)
(declare-fun count_0 (Nat_0 Nat_0 list_0) Bool)
(assert (diseqBool_0 false_0 true_0))
(assert (diseqBool_0 true_0 false_0))
(assert (forall ((x_84 Nat_0))
	(diseqNat_0 zero_0 (succ_0 x_84))))
(assert (forall ((x_85 Nat_0))
	(diseqNat_0 (succ_0 x_85) zero_0)))
(assert (forall ((x_86 Nat_0) (x_87 Nat_0))
	(=> (diseqNat_0 x_86 x_87) (diseqNat_0 (succ_0 x_86) (succ_0 x_87)))))
(assert (forall ((x_23 list_1) (y_0 Nat_0) (z_0 list_0))
	(=> (toHeap_0 x_23 z_0) (toHeap_0 (cons_1 (Node_0 Nil_1 y_0 Nil_1) x_23) (cons_0 y_0 z_0)))))
(assert (toHeap_0 nil_2 nil_0))
(assert (forall ((x_26 Nat_0) (z_1 Nat_0) (y_1 Nat_0))
	(=> (plus_0 x_26 z_1 y_1) (plus_0 (succ_0 x_26) (succ_0 z_1) y_1))))
(assert (forall ((x_27 Nat_0))
	(plus_0 x_27 zero_0 x_27)))
(assert (forall ((x_28 Bool_0) (x_3 Nat_0) (z_2 Nat_0))
	(=> (leq_0 x_28 z_2 x_3) (leq_0 x_28 (succ_0 z_2) (succ_0 x_3)))))
(assert (forall ((z_2 Nat_0))
	(leq_0 false_0 (succ_0 z_2) zero_0)))
(assert (forall ((y_2 Nat_0))
	(leq_0 true_0 zero_0 y_2)))
(assert (forall ((x_32 Heap_0))
	(hmerge_0 x_32 Nil_1 x_32)))
(assert (forall ((z_3 Heap_0) (x_5 Nat_0) (x_6 Heap_0))
	(hmerge_0 (Node_0 z_3 x_5 x_6) (Node_0 z_3 x_5 x_6) Nil_1)))
(assert (forall ((x_36 Heap_0) (x_7 Heap_0) (x_8 Nat_0) (x_9 Heap_0) (z_3 Heap_0) (x_5 Nat_0) (x_6 Heap_0))
	(=> (and (hmerge_0 x_36 x_6 (Node_0 x_7 x_8 x_9)) (leq_0 true_0 x_5 x_8)) (hmerge_0 (Node_0 x_36 x_5 z_3) (Node_0 z_3 x_5 x_6) (Node_0 x_7 x_8 x_9)))))
(assert (forall ((x_39 Heap_0) (x_37 Bool_0) (x_7 Heap_0) (x_8 Nat_0) (x_9 Heap_0) (z_3 Heap_0) (x_5 Nat_0) (x_6 Heap_0))
	(=> (and (diseqBool_0 x_37 true_0) (hmerge_0 x_39 (Node_0 z_3 x_5 x_6) x_9) (leq_0 x_37 x_5 x_8)) (hmerge_0 (Node_0 x_39 x_8 x_7) (Node_0 z_3 x_5 x_6) (Node_0 x_7 x_8 x_9)))))
(assert (forall ((x_41 Heap_0) (x_42 list_1) (r_0 Heap_0) (qs_0 list_1) (q_0 Heap_0))
	(=> (and (hmerge_0 x_41 q_0 r_0) (hpairwise_0 x_42 qs_0)) (hpairwise_0 (cons_1 x_41 x_42) (cons_1 q_0 (cons_1 r_0 qs_0))))))
(assert (forall ((q_0 Heap_0))
	(hpairwise_0 (cons_1 q_0 nil_2) (cons_1 q_0 nil_2))))
(assert (hpairwise_0 nil_2 nil_2))
(assert (forall ((x_45 Heap_0) (x_46 list_1) (z_4 Heap_0) (x_12 list_1) (q_1 Heap_0))
	(=> (and (hpairwise_0 x_46 (cons_1 q_1 (cons_1 z_4 x_12))) (hmerging_0 x_45 x_46)) (hmerging_0 x_45 (cons_1 q_1 (cons_1 z_4 x_12))))))
(assert (forall ((q_1 Heap_0))
	(hmerging_0 q_1 (cons_1 q_1 nil_2))))
(assert (hmerging_0 Nil_1 nil_2))
(assert (forall ((x_50 Heap_0) (x_51 list_1) (x_13 list_0))
	(=> (and (toHeap_0 x_51 x_13) (hmerging_0 x_50 x_51)) (toHeap_1 x_50 x_13))))
(assert (toList_0 nil_0 Nil_1))
(assert (forall ((x_55 Heap_0) (x_56 list_0) (q_2 Heap_0) (y_6 Nat_0) (r_1 Heap_0))
	(=> (and (hmerge_0 x_55 q_2 r_1) (toList_0 x_56 x_55)) (toList_0 (cons_0 y_6 x_56) (Node_0 q_2 y_6 r_1)))))
(assert (forall ((x_57 list_0) (x_58 Heap_0) (x_15 list_0))
	(=> (and (toHeap_1 x_58 x_15) (toList_0 x_57 x_58)) (hsort_0 x_57 x_15))))
(assert (forall ((x_60 Nat_0) (x_61 Nat_0) (ys_0 list_0) (x_16 Nat_0))
	(=> (and (count_0 x_61 x_16 ys_0) (plus_0 x_60 (succ_0 zero_0) x_61)) (count_0 x_60 x_16 (cons_0 x_16 ys_0)))))
(assert (forall ((x_63 Nat_0) (z_5 Nat_0) (ys_0 list_0) (x_16 Nat_0))
	(=> (and (diseqNat_0 x_16 z_5) (count_0 x_63 x_16 ys_0)) (count_0 x_63 x_16 (cons_0 z_5 ys_0)))))
(assert (forall ((x_16 Nat_0))
	(count_0 zero_0 x_16 nil_0)))
(assert (forall ((x_66 Nat_0) (x_67 Nat_0) (x_68 Nat_0) (x_69 Nat_0) (x_17 Nat_0) (y_8 Nat_0) (z_6 Nat_0))
	(=> (and (diseqNat_0 x_67 x_69) (plus_0 x_66 y_8 z_6) (plus_0 x_67 x_17 x_66) (plus_0 x_68 x_17 y_8) (plus_0 x_69 x_68 z_6)) false)))
(assert (forall ((x_70 Nat_0) (x_71 Nat_0) (x_18 Nat_0) (y_9 Nat_0))
	(=> (and (diseqNat_0 x_70 x_71) (plus_0 x_70 x_18 y_9) (plus_0 x_71 y_9 x_18)) false)))
(assert (forall ((x_72 Nat_0) (x_19 Nat_0))
	(=> (and (diseqNat_0 x_72 x_19) (plus_0 x_72 x_19 zero_0)) false)))
(assert (forall ((x_73 Nat_0) (x_20 Nat_0))
	(=> (and (diseqNat_0 x_73 x_20) (plus_0 x_73 zero_0 x_20)) false)))
(assert (forall ((x_74 list_0) (x_75 Nat_0) (x_76 Nat_0) (x_21 Nat_0) (xs_0 list_0))
	(=> (and (diseqNat_0 x_75 x_76) (hsort_0 x_74 xs_0) (count_0 x_75 x_21 x_74) (count_0 x_76 x_21 xs_0)) false)))
(check-sat)
(get-model)
