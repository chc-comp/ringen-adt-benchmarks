(set-logic HORN)
(declare-datatypes ((Nat_0 0)) (((Z_0 ) (S_0 (unS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun unS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_0 (Nat_0) Bool)
(declare-fun isS_0 (Nat_0) Bool)
(assert (forall ((x_56 Nat_0) (x_55 Nat_0))
	(=> (= x_56 (S_0 x_55))
	    (unS_1 x_55 x_56))))
(assert (isZ_0 Z_0))
(assert (forall ((x_57 Nat_0))
	(isS_0 (S_0 x_57))))
(assert (forall ((x_58 Nat_0))
	(diseqNat_0 Z_0 (S_0 x_58))))
(assert (forall ((x_59 Nat_0))
	(diseqNat_0 (S_0 x_59) Z_0)))
(assert (forall ((x_60 Nat_0) (x_61 Nat_0))
	(=> (diseqNat_0 x_60 x_61)
	    (diseqNat_0 (S_0 x_60) (S_0 x_61)))))
(declare-fun add_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun minus_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun le_0 (Nat_0 Nat_0) Bool)
(declare-fun ge_0 (Nat_0 Nat_0) Bool)
(declare-fun lt_0 (Nat_0 Nat_0) Bool)
(declare-fun gt_0 (Nat_0 Nat_0) Bool)
(declare-fun mult_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun div_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun mod_0 (Nat_0 Nat_0 Nat_0) Bool)
(assert (forall ((y_6 Nat_0))
	(add_0 y_6 Z_0 y_6)))
(assert (forall ((x_52 Nat_0) (y_6 Nat_0) (r_0 Nat_0))
	(=> (add_0 r_0 x_52 y_6)
	    (add_0 (S_0 r_0) (S_0 x_52) y_6))))
(assert (forall ((y_6 Nat_0))
	(minus_0 Z_0 Z_0 y_6)))
(assert (forall ((x_52 Nat_0) (y_6 Nat_0) (r_0 Nat_0))
	(=> (minus_0 r_0 x_52 y_6)
	    (minus_0 (S_0 r_0) (S_0 x_52) y_6))))
(assert (forall ((y_6 Nat_0))
	(le_0 Z_0 y_6)))
(assert (forall ((x_52 Nat_0) (y_6 Nat_0))
	(=> (le_0 x_52 y_6)
	    (le_0 (S_0 x_52) (S_0 y_6)))))
(assert (forall ((y_6 Nat_0))
	(ge_0 y_6 Z_0)))
(assert (forall ((x_52 Nat_0) (y_6 Nat_0))
	(=> (ge_0 x_52 y_6)
	    (ge_0 (S_0 x_52) (S_0 y_6)))))
(assert (forall ((y_6 Nat_0))
	(lt_0 Z_0 (S_0 y_6))))
(assert (forall ((x_52 Nat_0) (y_6 Nat_0))
	(=> (lt_0 x_52 y_6)
	    (lt_0 (S_0 x_52) (S_0 y_6)))))
(assert (forall ((y_6 Nat_0))
	(gt_0 (S_0 y_6) Z_0)))
(assert (forall ((x_52 Nat_0) (y_6 Nat_0))
	(=> (gt_0 x_52 y_6)
	    (gt_0 (S_0 x_52) (S_0 y_6)))))
(assert (forall ((y_6 Nat_0))
	(mult_0 Z_0 Z_0 y_6)))
(assert (forall ((x_52 Nat_0) (y_6 Nat_0) (r_0 Nat_0) (z_4 Nat_0))
	(=>	(and (mult_0 r_0 x_52 y_6)
			(add_0 z_4 r_0 y_6))
		(mult_0 z_4 (S_0 x_52) y_6))))
(assert (forall ((x_52 Nat_0) (y_6 Nat_0))
	(=> (lt_0 x_52 y_6)
	    (div_0 Z_0 x_52 y_6))))
(assert (forall ((x_52 Nat_0) (y_6 Nat_0) (r_0 Nat_0) (z_4 Nat_0))
	(=>	(and (ge_0 x_52 y_6)
			(minus_0 z_4 x_52 y_6)
			(div_0 r_0 z_4 y_6))
		(div_0 (S_0 r_0) x_52 y_6))))
(assert (forall ((x_52 Nat_0) (y_6 Nat_0))
	(=> (lt_0 x_52 y_6)
	    (mod_0 x_52 x_52 y_6))))
(assert (forall ((x_52 Nat_0) (y_6 Nat_0) (r_0 Nat_0) (z_4 Nat_0))
	(=>	(and (ge_0 x_52 y_6)
			(minus_0 z_4 x_52 y_6)
			(mod_0 r_0 z_4 y_6))
		(mod_0 r_0 x_52 y_6))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_2 (Nat_0 list_0) Bool)
(declare-fun tail_2 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_65 list_0) (x_63 Nat_0) (x_64 list_0))
	(=> (= x_65 (cons_0 x_63 x_64))
	    (head_2 x_63 x_65))))
(assert (forall ((x_65 list_0) (x_63 Nat_0) (x_64 list_0))
	(=> (= x_65 (cons_0 x_63 x_64))
	    (tail_2 x_64 x_65))))
(assert (isnil_0 nil_0))
(assert (forall ((x_66 Nat_0) (x_67 list_0))
	(iscons_0 (cons_0 x_66 x_67))))
(assert (forall ((x_68 Nat_0) (x_69 list_0))
	(diseqlist_0 nil_0 (cons_0 x_68 x_69))))
(assert (forall ((x_70 Nat_0) (x_71 list_0))
	(diseqlist_0 (cons_0 x_70 x_71) nil_0)))
(assert (forall ((x_72 Nat_0) (x_73 list_0) (x_74 Nat_0) (x_75 list_0))
	(=> (diseqNat_0 x_72 x_74)
	    (diseqlist_0 (cons_0 x_72 x_73) (cons_0 x_74 x_75)))))
(assert (forall ((x_72 Nat_0) (x_73 list_0) (x_74 Nat_0) (x_75 list_0))
	(=> (diseqlist_0 x_73 x_75)
	    (diseqlist_0 (cons_0 x_72 x_73) (cons_0 x_74 x_75)))))
(declare-datatypes ((Heap_0 0)) (((Node_0 (projNode_0 Heap_0) (projNode_1 Nat_0) (projNode_2 Heap_0)) (Nil_0 ))))
(declare-fun diseqHeap_0 (Heap_0 Heap_0) Bool)
(declare-fun projNode_3 (Heap_0 Heap_0) Bool)
(declare-fun projNode_4 (Nat_0 Heap_0) Bool)
(declare-fun projNode_5 (Heap_0 Heap_0) Bool)
(declare-fun isNode_0 (Heap_0) Bool)
(declare-fun isNil_0 (Heap_0) Bool)
(assert (forall ((x_79 Heap_0) (x_76 Heap_0) (x_77 Nat_0) (x_78 Heap_0))
	(=> (= x_79 (Node_0 x_76 x_77 x_78))
	    (projNode_3 x_76 x_79))))
(assert (forall ((x_79 Heap_0) (x_76 Heap_0) (x_77 Nat_0) (x_78 Heap_0))
	(=> (= x_79 (Node_0 x_76 x_77 x_78))
	    (projNode_4 x_77 x_79))))
(assert (forall ((x_79 Heap_0) (x_76 Heap_0) (x_77 Nat_0) (x_78 Heap_0))
	(=> (= x_79 (Node_0 x_76 x_77 x_78))
	    (projNode_5 x_78 x_79))))
(assert (forall ((x_81 Heap_0) (x_82 Nat_0) (x_83 Heap_0))
	(isNode_0 (Node_0 x_81 x_82 x_83))))
(assert (isNil_0 Nil_0))
(assert (forall ((x_84 Heap_0) (x_85 Nat_0) (x_86 Heap_0))
	(diseqHeap_0 (Node_0 x_84 x_85 x_86) Nil_0)))
(assert (forall ((x_87 Heap_0) (x_88 Nat_0) (x_89 Heap_0))
	(diseqHeap_0 Nil_0 (Node_0 x_87 x_88 x_89))))
(assert (forall ((x_90 Heap_0) (x_91 Nat_0) (x_92 Heap_0) (x_93 Heap_0) (x_94 Nat_0) (x_95 Heap_0))
	(=> (diseqHeap_0 x_90 x_93)
	    (diseqHeap_0 (Node_0 x_90 x_91 x_92) (Node_0 x_93 x_94 x_95)))))
(assert (forall ((x_90 Heap_0) (x_91 Nat_0) (x_92 Heap_0) (x_93 Heap_0) (x_94 Nat_0) (x_95 Heap_0))
	(=> (diseqNat_0 x_91 x_94)
	    (diseqHeap_0 (Node_0 x_90 x_91 x_92) (Node_0 x_93 x_94 x_95)))))
(assert (forall ((x_90 Heap_0) (x_91 Nat_0) (x_92 Heap_0) (x_93 Heap_0) (x_94 Nat_0) (x_95 Heap_0))
	(=> (diseqHeap_0 x_92 x_95)
	    (diseqHeap_0 (Node_0 x_90 x_91 x_92) (Node_0 x_93 x_94 x_95)))))
(declare-datatypes ((list_1 0)) (((nil_1 ) (cons_1 (head_1 Heap_0) (tail_1 list_1)))))
(declare-fun diseqlist_1 (list_1 list_1) Bool)
(declare-fun head_3 (Heap_0 list_1) Bool)
(declare-fun tail_3 (list_1 list_1) Bool)
(declare-fun isnil_1 (list_1) Bool)
(declare-fun iscons_1 (list_1) Bool)
(assert (forall ((x_99 list_1) (x_97 Heap_0) (x_98 list_1))
	(=> (= x_99 (cons_1 x_97 x_98))
	    (head_3 x_97 x_99))))
(assert (forall ((x_99 list_1) (x_97 Heap_0) (x_98 list_1))
	(=> (= x_99 (cons_1 x_97 x_98))
	    (tail_3 x_98 x_99))))
(assert (isnil_1 nil_1))
(assert (forall ((x_100 Heap_0) (x_101 list_1))
	(iscons_1 (cons_1 x_100 x_101))))
(assert (forall ((x_102 Heap_0) (x_103 list_1))
	(diseqlist_1 nil_1 (cons_1 x_102 x_103))))
(assert (forall ((x_104 Heap_0) (x_105 list_1))
	(diseqlist_1 (cons_1 x_104 x_105) nil_1)))
(assert (forall ((x_106 Heap_0) (x_107 list_1) (x_108 Heap_0) (x_109 list_1))
	(=> (diseqHeap_0 x_106 x_108)
	    (diseqlist_1 (cons_1 x_106 x_107) (cons_1 x_108 x_109)))))
(assert (forall ((x_106 Heap_0) (x_107 list_1) (x_108 Heap_0) (x_109 list_1))
	(=> (diseqlist_1 x_107 x_109)
	    (diseqlist_1 (cons_1 x_106 x_107) (cons_1 x_108 x_109)))))
(declare-fun toHeap_0 (list_1 list_0) Bool)
(assert (forall ((x_0 list_0) (y_0 Nat_0) (z_0 list_0) (x_15 list_1) (x_16 list_1))
	(=>	(and (= x_15 (cons_1 (Node_0 Nil_0 y_0 Nil_0) x_16))
			(toHeap_0 x_16 z_0)
			(= x_0 (cons_0 y_0 z_0)))
		(toHeap_0 x_15 x_0))))
(assert (forall ((x_0 list_0) (x_17 list_1))
	(=>	(and (= x_17 nil_1)
			(= x_0 nil_0))
		(toHeap_0 x_17 x_0))))
(declare-fun hmerge_0 (Heap_0 Heap_0 Heap_0) Bool)
(assert (forall ((x_1 Heap_0) (y_1 Heap_0) (x_18 Heap_0))
	(=>	(and (= x_18 y_1)
			(= x_1 Nil_0))
		(hmerge_0 x_18 x_1 y_1))))
(assert (forall ((x_1 Heap_0) (y_1 Heap_0) (z_1 Heap_0) (x_2 Nat_0) (x_3 Heap_0) (x_19 Heap_0))
	(=>	(and (= x_19 (Node_0 z_1 x_2 x_3))
			(= x_1 (Node_0 z_1 x_2 x_3))
			(= y_1 Nil_0))
		(hmerge_0 x_19 x_1 y_1))))
(assert (forall ((x_1 Heap_0) (y_1 Heap_0) (z_1 Heap_0) (x_2 Nat_0) (x_3 Heap_0) (x_4 Heap_0) (x_5 Nat_0) (x_6 Heap_0) (x_20 Heap_0) (x_21 Heap_0))
	(=>	(and (= x_20 (Node_0 x_21 x_2 z_1))
			(hmerge_0 x_21 x_3 (Node_0 x_4 x_5 x_6))
			(= x_1 (Node_0 z_1 x_2 x_3))
			(= y_1 (Node_0 x_4 x_5 x_6))
			(le_0 x_2 x_5))
		(hmerge_0 x_20 x_1 y_1))))
(assert (forall ((x_1 Heap_0) (y_1 Heap_0) (z_1 Heap_0) (x_2 Nat_0) (x_3 Heap_0) (x_4 Heap_0) (x_5 Nat_0) (x_6 Heap_0) (x_22 Heap_0) (x_23 Heap_0))
	(=>	(and (= x_22 (Node_0 x_23 x_5 x_4))
			(hmerge_0 x_23 (Node_0 z_1 x_2 x_3) x_6)
			(= x_1 (Node_0 z_1 x_2 x_3))
			(= y_1 (Node_0 x_4 x_5 x_6))
			(gt_0 x_2 x_5))
		(hmerge_0 x_22 x_1 y_1))))
(declare-fun hpairwise_0 (list_1 list_1) Bool)
(assert (forall ((x_7 list_1) (p_0 Heap_0) (y_2 list_1) (q_0 Heap_0) (qs_0 list_1) (x_24 list_1) (x_25 Heap_0) (x_26 list_1))
	(=>	(and (= x_24 (cons_1 x_25 x_26))
			(hmerge_0 x_25 p_0 q_0)
			(hpairwise_0 x_26 qs_0)
			(= x_7 (cons_1 p_0 y_2))
			(= y_2 (cons_1 q_0 qs_0)))
		(hpairwise_0 x_24 x_7))))
(assert (forall ((x_7 list_1) (p_0 Heap_0) (y_2 list_1) (x_27 list_1))
	(=>	(and (= x_27 (cons_1 p_0 nil_1))
			(= x_7 (cons_1 p_0 y_2))
			(= y_2 nil_1))
		(hpairwise_0 x_27 x_7))))
(assert (forall ((x_7 list_1) (x_28 list_1))
	(=>	(and (= x_28 nil_1)
			(= x_7 nil_1))
		(hpairwise_0 x_28 x_7))))
(declare-fun hmerging_0 (Heap_0 list_1) Bool)
(assert (forall ((x_8 list_1) (p_1 Heap_0) (y_3 list_1) (z_2 Heap_0) (x_9 list_1) (x_29 Heap_0) (x_30 list_1) (x_31 Heap_0))
	(=>	(and (= x_29 x_31)
			(hpairwise_0 x_30 (cons_1 p_1 (cons_1 z_2 x_9)))
			(hmerging_0 x_31 x_30)
			(= x_8 (cons_1 p_1 y_3))
			(= y_3 (cons_1 z_2 x_9)))
		(hmerging_0 x_29 x_8))))
(assert (forall ((x_8 list_1) (p_1 Heap_0) (y_3 list_1) (x_32 Heap_0))
	(=>	(and (= x_32 p_1)
			(= x_8 (cons_1 p_1 y_3))
			(= y_3 nil_1))
		(hmerging_0 x_32 x_8))))
(assert (forall ((x_8 list_1) (x_33 Heap_0))
	(=>	(and (= x_33 Nil_0)
			(= x_8 nil_1))
		(hmerging_0 x_33 x_8))))
(declare-fun toHeap_1 (Heap_0 list_0) Bool)
(assert (forall ((x_10 list_0) (x_34 Heap_0) (x_35 list_1) (x_36 Heap_0))
	(=>	(and (= x_34 x_36)
			(toHeap_0 x_35 x_10)
			(hmerging_0 x_36 x_35))
		(toHeap_1 x_34 x_10))))
(declare-fun toList_0 (list_0 Heap_0) Bool)
(assert (forall ((x_11 Heap_0) (x_37 list_0))
	(=>	(and (= x_37 nil_0)
			(= x_11 Nil_0))
		(toList_0 x_37 x_11))))
(assert (forall ((x_11 Heap_0) (p_2 Heap_0) (y_4 Nat_0) (q_1 Heap_0) (x_38 list_0) (x_39 Heap_0) (x_40 list_0))
	(=>	(and (= x_38 (cons_0 y_4 x_40))
			(hmerge_0 x_39 p_2 q_1)
			(toList_0 x_40 x_39)
			(= x_11 (Node_0 p_2 y_4 q_1)))
		(toList_0 x_38 x_11))))
(declare-fun hsort_0 (list_0 list_0) Bool)
(assert (forall ((x_12 list_0) (x_41 list_0) (x_42 Heap_0) (x_43 list_0))
	(=>	(and (= x_41 x_43)
			(toHeap_1 x_42 x_12)
			(toList_0 x_43 x_42))
		(hsort_0 x_41 x_12))))
(declare-fun count_0 (Nat_0 Nat_0 list_0) Bool)
(assert (forall ((x_13 Nat_0) (y_5 list_0) (z_3 Nat_0) (ys_0 list_0) (x_44 Nat_0) (x_45 Nat_0) (x_53 Nat_0))
	(=>	(and (= x_44 x_53)
			(count_0 x_45 x_13 ys_0)
			(= y_5 (cons_0 z_3 ys_0))
			(= x_13 z_3)
			(add_0 x_53 (S_0 Z_0) x_45))
		(count_0 x_44 x_13 y_5))))
(assert (forall ((x_13 Nat_0) (y_5 list_0) (z_3 Nat_0) (ys_0 list_0) (x_46 Nat_0) (x_47 Nat_0))
	(=>	(and (= x_46 x_47)
			(count_0 x_47 x_13 ys_0)
			(= y_5 (cons_0 z_3 ys_0))
			(diseqNat_0 x_13 z_3))
		(count_0 x_46 x_13 y_5))))
(assert (forall ((x_13 Nat_0) (y_5 list_0) (x_48 Nat_0))
	(=>	(and (= x_48 Z_0)
			(= y_5 nil_0))
		(count_0 x_48 x_13 y_5))))
(assert (forall ((x_14 Nat_0) (xs_0 list_0) (x_49 list_0) (x_50 Nat_0) (x_51 Nat_0))
	(=>	(and (diseqNat_0 x_50 x_51)
			(hsort_0 x_49 xs_0)
			(count_0 x_50 x_14 x_49)
			(count_0 x_51 x_14 xs_0))
		false)))
(check-sat)
