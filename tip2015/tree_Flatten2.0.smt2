(set-logic HORN)
(declare-datatypes ((Nat_0 0)) (((Z_0 ) (S_0 (unS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun unS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_0 (Nat_0) Bool)
(declare-fun isS_0 (Nat_0) Bool)
(assert (forall ((x_22 Nat_0) (x_21 Nat_0))
	(=> (= x_22 (S_0 x_21))
	    (unS_1 x_21 x_22))))
(assert (isZ_0 Z_0))
(assert (forall ((x_23 Nat_0))
	(isS_0 (S_0 x_23))))
(assert (forall ((x_24 Nat_0))
	(diseqNat_0 Z_0 (S_0 x_24))))
(assert (forall ((x_25 Nat_0))
	(diseqNat_0 (S_0 x_25) Z_0)))
(assert (forall ((x_26 Nat_0) (x_27 Nat_0))
	(=> (diseqNat_0 x_26 x_27)
	    (diseqNat_0 (S_0 x_26) (S_0 x_27)))))
(declare-fun add_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun minus_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun le_0 (Nat_0 Nat_0) Bool)
(declare-fun ge_0 (Nat_0 Nat_0) Bool)
(declare-fun lt_0 (Nat_0 Nat_0) Bool)
(declare-fun gt_0 (Nat_0 Nat_0) Bool)
(declare-fun mult_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun div_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun mod_0 (Nat_0 Nat_0 Nat_0) Bool)
(assert (forall ((y_3 Nat_0))
	(add_0 y_3 Z_0 y_3)))
(assert (forall ((x_19 Nat_0) (y_3 Nat_0) (r_0 Nat_0))
	(=> (add_0 r_0 x_19 y_3)
	    (add_0 (S_0 r_0) (S_0 x_19) y_3))))
(assert (forall ((y_3 Nat_0))
	(minus_0 Z_0 Z_0 y_3)))
(assert (forall ((x_19 Nat_0) (y_3 Nat_0) (r_0 Nat_0))
	(=> (minus_0 r_0 x_19 y_3)
	    (minus_0 (S_0 r_0) (S_0 x_19) y_3))))
(assert (forall ((y_3 Nat_0))
	(le_0 Z_0 y_3)))
(assert (forall ((x_19 Nat_0) (y_3 Nat_0))
	(=> (le_0 x_19 y_3)
	    (le_0 (S_0 x_19) (S_0 y_3)))))
(assert (forall ((y_3 Nat_0))
	(ge_0 y_3 Z_0)))
(assert (forall ((x_19 Nat_0) (y_3 Nat_0))
	(=> (ge_0 x_19 y_3)
	    (ge_0 (S_0 x_19) (S_0 y_3)))))
(assert (forall ((y_3 Nat_0))
	(lt_0 Z_0 (S_0 y_3))))
(assert (forall ((x_19 Nat_0) (y_3 Nat_0))
	(=> (lt_0 x_19 y_3)
	    (lt_0 (S_0 x_19) (S_0 y_3)))))
(assert (forall ((y_3 Nat_0))
	(gt_0 (S_0 y_3) Z_0)))
(assert (forall ((x_19 Nat_0) (y_3 Nat_0))
	(=> (gt_0 x_19 y_3)
	    (gt_0 (S_0 x_19) (S_0 y_3)))))
(assert (forall ((y_3 Nat_0))
	(mult_0 Z_0 Z_0 y_3)))
(assert (forall ((x_19 Nat_0) (y_3 Nat_0) (r_0 Nat_0) (z_2 Nat_0))
	(=>	(and (mult_0 r_0 x_19 y_3)
			(add_0 z_2 r_0 y_3))
		(mult_0 z_2 (S_0 x_19) y_3))))
(assert (forall ((x_19 Nat_0) (y_3 Nat_0))
	(=> (lt_0 x_19 y_3)
	    (div_0 Z_0 x_19 y_3))))
(assert (forall ((x_19 Nat_0) (y_3 Nat_0) (r_0 Nat_0) (z_2 Nat_0))
	(=>	(and (ge_0 x_19 y_3)
			(minus_0 z_2 x_19 y_3)
			(div_0 r_0 z_2 y_3))
		(div_0 (S_0 r_0) x_19 y_3))))
(assert (forall ((x_19 Nat_0) (y_3 Nat_0))
	(=> (lt_0 x_19 y_3)
	    (mod_0 x_19 x_19 y_3))))
(assert (forall ((x_19 Nat_0) (y_3 Nat_0) (r_0 Nat_0) (z_2 Nat_0))
	(=>	(and (ge_0 x_19 y_3)
			(minus_0 z_2 x_19 y_3)
			(mod_0 r_0 z_2 y_3))
		(mod_0 r_0 x_19 y_3))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_1 (Nat_0 list_0) Bool)
(declare-fun tail_1 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_31 list_0) (x_29 Nat_0) (x_30 list_0))
	(=> (= x_31 (cons_0 x_29 x_30))
	    (head_1 x_29 x_31))))
(assert (forall ((x_31 list_0) (x_29 Nat_0) (x_30 list_0))
	(=> (= x_31 (cons_0 x_29 x_30))
	    (tail_1 x_30 x_31))))
(assert (isnil_0 nil_0))
(assert (forall ((x_32 Nat_0) (x_33 list_0))
	(iscons_0 (cons_0 x_32 x_33))))
(assert (forall ((x_34 Nat_0) (x_35 list_0))
	(diseqlist_0 nil_0 (cons_0 x_34 x_35))))
(assert (forall ((x_36 Nat_0) (x_37 list_0))
	(diseqlist_0 (cons_0 x_36 x_37) nil_0)))
(assert (forall ((x_38 Nat_0) (x_39 list_0) (x_40 Nat_0) (x_41 list_0))
	(=> (diseqNat_0 x_38 x_40)
	    (diseqlist_0 (cons_0 x_38 x_39) (cons_0 x_40 x_41)))))
(assert (forall ((x_38 Nat_0) (x_39 list_0) (x_40 Nat_0) (x_41 list_0))
	(=> (diseqlist_0 x_39 x_41)
	    (diseqlist_0 (cons_0 x_38 x_39) (cons_0 x_40 x_41)))))
(declare-datatypes ((Tree_0 0)) (((Node_0 (projNode_0 Tree_0) (projNode_1 Nat_0) (projNode_2 Tree_0)) (Nil_0 ))))
(declare-fun diseqTree_0 (Tree_0 Tree_0) Bool)
(declare-fun projNode_3 (Tree_0 Tree_0) Bool)
(declare-fun projNode_4 (Nat_0 Tree_0) Bool)
(declare-fun projNode_5 (Tree_0 Tree_0) Bool)
(declare-fun isNode_0 (Tree_0) Bool)
(declare-fun isNil_0 (Tree_0) Bool)
(assert (forall ((x_45 Tree_0) (x_42 Tree_0) (x_43 Nat_0) (x_44 Tree_0))
	(=> (= x_45 (Node_0 x_42 x_43 x_44))
	    (projNode_3 x_42 x_45))))
(assert (forall ((x_45 Tree_0) (x_42 Tree_0) (x_43 Nat_0) (x_44 Tree_0))
	(=> (= x_45 (Node_0 x_42 x_43 x_44))
	    (projNode_4 x_43 x_45))))
(assert (forall ((x_45 Tree_0) (x_42 Tree_0) (x_43 Nat_0) (x_44 Tree_0))
	(=> (= x_45 (Node_0 x_42 x_43 x_44))
	    (projNode_5 x_44 x_45))))
(assert (forall ((x_47 Tree_0) (x_48 Nat_0) (x_49 Tree_0))
	(isNode_0 (Node_0 x_47 x_48 x_49))))
(assert (isNil_0 Nil_0))
(assert (forall ((x_50 Tree_0) (x_51 Nat_0) (x_52 Tree_0))
	(diseqTree_0 (Node_0 x_50 x_51 x_52) Nil_0)))
(assert (forall ((x_53 Tree_0) (x_54 Nat_0) (x_55 Tree_0))
	(diseqTree_0 Nil_0 (Node_0 x_53 x_54 x_55))))
(assert (forall ((x_56 Tree_0) (x_57 Nat_0) (x_58 Tree_0) (x_59 Tree_0) (x_60 Nat_0) (x_61 Tree_0))
	(=> (diseqTree_0 x_56 x_59)
	    (diseqTree_0 (Node_0 x_56 x_57 x_58) (Node_0 x_59 x_60 x_61)))))
(assert (forall ((x_56 Tree_0) (x_57 Nat_0) (x_58 Tree_0) (x_59 Tree_0) (x_60 Nat_0) (x_61 Tree_0))
	(=> (diseqNat_0 x_57 x_60)
	    (diseqTree_0 (Node_0 x_56 x_57 x_58) (Node_0 x_59 x_60 x_61)))))
(assert (forall ((x_56 Tree_0) (x_57 Nat_0) (x_58 Tree_0) (x_59 Tree_0) (x_60 Nat_0) (x_61 Tree_0))
	(=> (diseqTree_0 x_58 x_61)
	    (diseqTree_0 (Node_0 x_56 x_57 x_58) (Node_0 x_59 x_60 x_61)))))
(declare-fun flatten_0 (list_0 Tree_0 list_0) Bool)
(assert (forall ((x_0 Tree_0) (y_0 list_0) (x_4 list_0))
	(=>	(and (= x_4 y_0)
			(= x_0 Nil_0))
		(flatten_0 x_4 x_0 y_0))))
(assert (forall ((x_0 Tree_0) (y_0 list_0) (p_0 Tree_0) (z_0 Nat_0) (q_0 Tree_0) (x_5 list_0) (x_6 list_0) (x_7 list_0))
	(=>	(and (= x_5 x_7)
			(flatten_0 x_6 q_0 y_0)
			(flatten_0 x_7 p_0 (cons_0 z_0 x_6))
			(= x_0 (Node_0 p_0 z_0 q_0)))
		(flatten_0 x_5 x_0 y_0))))
(declare-fun x_1 (list_0 list_0 list_0) Bool)
(assert (forall ((x_2 list_0) (y_1 list_0) (z_1 Nat_0) (xs_0 list_0) (x_8 list_0) (x_9 list_0))
	(=>	(and (= x_8 (cons_0 z_1 x_9))
			(x_1 x_9 xs_0 y_1)
			(= x_2 (cons_0 z_1 xs_0)))
		(x_1 x_8 x_2 y_1))))
(assert (forall ((x_2 list_0) (y_1 list_0) (x_10 list_0))
	(=>	(and (= x_10 y_1)
			(= x_2 nil_0))
		(x_1 x_10 x_2 y_1))))
(declare-fun flatten_1 (list_0 Tree_0) Bool)
(assert (forall ((x_3 Tree_0) (x_11 list_0))
	(=>	(and (= x_11 nil_0)
			(= x_3 Nil_0))
		(flatten_1 x_11 x_3))))
(assert (forall ((x_3 Tree_0) (p_1 Tree_0) (y_2 Nat_0) (q_1 Tree_0) (x_12 list_0) (x_13 list_0) (x_14 list_0) (x_15 list_0) (x_16 list_0))
	(=>	(and (= x_12 x_16)
			(flatten_1 x_13 p_1)
			(flatten_1 x_14 q_1)
			(x_1 x_15 (cons_0 y_2 nil_0) x_14)
			(x_1 x_16 x_13 x_15)
			(= x_3 (Node_0 p_1 y_2 q_1)))
		(flatten_1 x_12 x_3))))
(assert (forall ((p_2 Tree_0) (x_17 list_0) (x_18 list_0))
	(=>	(and (diseqlist_0 x_17 x_18)
			(flatten_0 x_17 p_2 nil_0)
			(flatten_1 x_18 p_2))
		false)))
(check-sat)
