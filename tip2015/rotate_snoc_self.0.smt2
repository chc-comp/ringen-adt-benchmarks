(set-logic HORN)
(declare-datatypes ((Nat_1 0)) (((Z_0 ) (S_0 (unS_0 Nat_1)))))
(declare-fun diseqNat_0 (Nat_1 Nat_1) Bool)
(declare-fun unS_1 (Nat_1 Nat_1) Bool)
(declare-fun isZ_0 (Nat_1) Bool)
(declare-fun isS_0 (Nat_1) Bool)
(assert (forall ((x_23 Nat_1) (x_22 Nat_1))
	(=> (= x_23 (S_0 x_22))
	    (unS_1 x_22 x_23))))
(assert (isZ_0 Z_0))
(assert (forall ((x_24 Nat_1))
	(isS_0 (S_0 x_24))))
(assert (forall ((x_25 Nat_1))
	(diseqNat_0 Z_0 (S_0 x_25))))
(assert (forall ((x_26 Nat_1))
	(diseqNat_0 (S_0 x_26) Z_0)))
(assert (forall ((x_27 Nat_1) (x_28 Nat_1))
	(=> (diseqNat_0 x_27 x_28)
	    (diseqNat_0 (S_0 x_27) (S_0 x_28)))))
(declare-fun add_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun minus_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun le_0 (Nat_1 Nat_1) Bool)
(declare-fun ge_0 (Nat_1 Nat_1) Bool)
(declare-fun lt_0 (Nat_1 Nat_1) Bool)
(declare-fun gt_0 (Nat_1 Nat_1) Bool)
(declare-fun mult_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun div_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun mod_0 (Nat_1 Nat_1 Nat_1) Bool)
(assert (forall ((y_3 Nat_1))
	(add_0 y_3 Z_0 y_3)))
(assert (forall ((x_20 Nat_1) (y_3 Nat_1) (r_0 Nat_1))
	(=> (add_0 r_0 x_20 y_3)
	    (add_0 (S_0 r_0) (S_0 x_20) y_3))))
(assert (forall ((y_3 Nat_1))
	(minus_0 Z_0 Z_0 y_3)))
(assert (forall ((x_20 Nat_1) (y_3 Nat_1) (r_0 Nat_1))
	(=> (minus_0 r_0 x_20 y_3)
	    (minus_0 (S_0 r_0) (S_0 x_20) y_3))))
(assert (forall ((y_3 Nat_1))
	(le_0 Z_0 y_3)))
(assert (forall ((x_20 Nat_1) (y_3 Nat_1))
	(=> (le_0 x_20 y_3)
	    (le_0 (S_0 x_20) (S_0 y_3)))))
(assert (forall ((y_3 Nat_1))
	(ge_0 y_3 Z_0)))
(assert (forall ((x_20 Nat_1) (y_3 Nat_1))
	(=> (ge_0 x_20 y_3)
	    (ge_0 (S_0 x_20) (S_0 y_3)))))
(assert (forall ((y_3 Nat_1))
	(lt_0 Z_0 (S_0 y_3))))
(assert (forall ((x_20 Nat_1) (y_3 Nat_1))
	(=> (lt_0 x_20 y_3)
	    (lt_0 (S_0 x_20) (S_0 y_3)))))
(assert (forall ((y_3 Nat_1))
	(gt_0 (S_0 y_3) Z_0)))
(assert (forall ((x_20 Nat_1) (y_3 Nat_1))
	(=> (gt_0 x_20 y_3)
	    (gt_0 (S_0 x_20) (S_0 y_3)))))
(assert (forall ((y_3 Nat_1))
	(mult_0 Z_0 Z_0 y_3)))
(assert (forall ((x_20 Nat_1) (y_3 Nat_1) (r_0 Nat_1) (z_4 Nat_1))
	(=>	(and (mult_0 r_0 x_20 y_3)
			(add_0 z_4 r_0 y_3))
		(mult_0 z_4 (S_0 x_20) y_3))))
(assert (forall ((x_20 Nat_1) (y_3 Nat_1))
	(=> (lt_0 x_20 y_3)
	    (div_0 Z_0 x_20 y_3))))
(assert (forall ((x_20 Nat_1) (y_3 Nat_1) (r_0 Nat_1) (z_4 Nat_1))
	(=>	(and (ge_0 x_20 y_3)
			(minus_0 z_4 x_20 y_3)
			(div_0 r_0 z_4 y_3))
		(div_0 (S_0 r_0) x_20 y_3))))
(assert (forall ((x_20 Nat_1) (y_3 Nat_1))
	(=> (lt_0 x_20 y_3)
	    (mod_0 x_20 x_20 y_3))))
(assert (forall ((x_20 Nat_1) (y_3 Nat_1) (r_0 Nat_1) (z_4 Nat_1))
	(=>	(and (ge_0 x_20 y_3)
			(minus_0 z_4 x_20 y_3)
			(mod_0 r_0 z_4 y_3))
		(mod_0 r_0 x_20 y_3))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_1) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_1 (Nat_1 list_0) Bool)
(declare-fun tail_1 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_32 list_0) (x_30 Nat_1) (x_31 list_0))
	(=> (= x_32 (cons_0 x_30 x_31))
	    (head_1 x_30 x_32))))
(assert (forall ((x_32 list_0) (x_30 Nat_1) (x_31 list_0))
	(=> (= x_32 (cons_0 x_30 x_31))
	    (tail_1 x_31 x_32))))
(assert (isnil_0 nil_0))
(assert (forall ((x_33 Nat_1) (x_34 list_0))
	(iscons_0 (cons_0 x_33 x_34))))
(assert (forall ((x_35 Nat_1) (x_36 list_0))
	(diseqlist_0 nil_0 (cons_0 x_35 x_36))))
(assert (forall ((x_37 Nat_1) (x_38 list_0))
	(diseqlist_0 (cons_0 x_37 x_38) nil_0)))
(assert (forall ((x_39 Nat_1) (x_40 list_0) (x_41 Nat_1) (x_42 list_0))
	(=> (diseqNat_0 x_39 x_41)
	    (diseqlist_0 (cons_0 x_39 x_40) (cons_0 x_41 x_42)))))
(assert (forall ((x_39 Nat_1) (x_40 list_0) (x_41 Nat_1) (x_42 list_0))
	(=> (diseqlist_0 x_40 x_42)
	    (diseqlist_0 (cons_0 x_39 x_40) (cons_0 x_41 x_42)))))
(declare-datatypes ((Nat_0 0)) (((zero_0 ) (succ_0 (p_0 Nat_0)))))
(declare-fun diseqNat_1 (Nat_0 Nat_0) Bool)
(declare-fun p_1 (Nat_0 Nat_0) Bool)
(declare-fun iszero_0 (Nat_0) Bool)
(declare-fun issucc_0 (Nat_0) Bool)
(assert (forall ((x_45 Nat_0) (x_44 Nat_0))
	(=> (= x_45 (succ_0 x_44))
	    (p_1 x_44 x_45))))
(assert (iszero_0 zero_0))
(assert (forall ((x_46 Nat_0))
	(issucc_0 (succ_0 x_46))))
(assert (forall ((x_47 Nat_0))
	(diseqNat_1 zero_0 (succ_0 x_47))))
(assert (forall ((x_48 Nat_0))
	(diseqNat_1 (succ_0 x_48) zero_0)))
(assert (forall ((x_49 Nat_0) (x_50 Nat_0))
	(=> (diseqNat_1 x_49 x_50)
	    (diseqNat_1 (succ_0 x_49) (succ_0 x_50)))))
(declare-fun snoc_0 (list_0 Nat_1 list_0) Bool)
(assert (forall ((x_0 Nat_1) (y_0 list_0) (z_0 Nat_1) (ys_0 list_0) (x_4 list_0) (x_5 list_0))
	(=>	(and (= x_4 (cons_0 z_0 x_5))
			(snoc_0 x_5 x_0 ys_0)
			(= y_0 (cons_0 z_0 ys_0)))
		(snoc_0 x_4 x_0 y_0))))
(assert (forall ((x_0 Nat_1) (y_0 list_0) (x_6 list_0))
	(=>	(and (= x_6 (cons_0 x_0 nil_0))
			(= y_0 nil_0))
		(snoc_0 x_6 x_0 y_0))))
(declare-fun rotate_0 (list_0 Nat_0 list_0) Bool)
(assert (forall ((x_1 Nat_0) (y_1 list_0) (z_1 Nat_0) (z_2 Nat_1) (xs_0 list_0) (x_7 list_0) (x_8 list_0) (x_9 list_0))
	(=>	(and (= x_7 x_9)
			(snoc_0 x_8 z_2 xs_0)
			(rotate_0 x_9 z_1 x_8)
			(= x_1 (succ_0 z_1))
			(= y_1 (cons_0 z_2 xs_0)))
		(rotate_0 x_7 x_1 y_1))))
(assert (forall ((x_1 Nat_0) (y_1 list_0) (z_1 Nat_0) (x_10 list_0))
	(=>	(and (= x_10 nil_0)
			(= x_1 (succ_0 z_1))
			(= y_1 nil_0))
		(rotate_0 x_10 x_1 y_1))))
(assert (forall ((x_1 Nat_0) (y_1 list_0) (x_11 list_0))
	(=>	(and (= x_11 y_1)
			(= x_1 zero_0))
		(rotate_0 x_11 x_1 y_1))))
(declare-fun x_2 (list_0 list_0 list_0) Bool)
(assert (forall ((x_3 list_0) (y_2 list_0) (z_3 Nat_1) (xs_1 list_0) (x_12 list_0) (x_13 list_0))
	(=>	(and (= x_12 (cons_0 z_3 x_13))
			(x_2 x_13 xs_1 y_2)
			(= x_3 (cons_0 z_3 xs_1)))
		(x_2 x_12 x_3 y_2))))
(assert (forall ((x_3 list_0) (y_2 list_0) (x_14 list_0))
	(=>	(and (= x_14 y_2)
			(= x_3 nil_0))
		(x_2 x_14 x_3 y_2))))
(assert (forall ((n_0 Nat_0) (xs_2 list_0) (x_15 list_0) (x_16 list_0) (x_17 list_0) (x_18 list_0) (x_19 list_0))
	(=>	(and (diseqlist_0 x_16 x_19)
			(x_2 x_15 xs_2 xs_2)
			(rotate_0 x_16 n_0 x_15)
			(rotate_0 x_17 n_0 xs_2)
			(rotate_0 x_18 n_0 xs_2)
			(x_2 x_19 x_17 x_18))
		false)))
(check-sat)
