(set-logic HORN)
(declare-datatypes ((Nat_0 0)) (((Z_3 ) (Z_4 (unS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun le_0 (Nat_0 Nat_0) Bool)
(declare-fun gt_0 (Nat_0 Nat_0) Bool)
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-datatypes ((Tree_0 0)) (((TNode_0 (projTNode_0 Tree_0) (projTNode_1 Nat_0) (projTNode_2 Tree_0)) (TNil_0 ))))
(declare-fun insert_0 (list_0 Nat_0 list_0) Bool)
(declare-fun isort_0 (list_0 list_0) Bool)
(declare-fun flatten_0 (list_0 Tree_0 list_0) Bool)
(declare-fun add_0 (Tree_0 Nat_0 Tree_0) Bool)
(declare-fun toTree_0 (Tree_0 list_0) Bool)
(declare-fun tsort_0 (list_0 list_0) Bool)
(assert (forall ((x_37 Nat_0))
	(diseqNat_0 Z_3 (Z_4 x_37))))
(assert (forall ((x_38 Nat_0))
	(diseqNat_0 (Z_4 x_38) Z_3)))
(assert (forall ((x_39 Nat_0) (x_40 Nat_0))
	(=> (diseqNat_0 x_39 x_40) (diseqNat_0 (Z_4 x_39) (Z_4 x_40)))))
(assert (forall ((y_5 Nat_0))
	(le_0 Z_3 y_5)))
(assert (forall ((x_32 Nat_0) (y_5 Nat_0))
	(=> (le_0 x_32 y_5) (le_0 (Z_4 x_32) (Z_4 y_5)))))
(assert (forall ((y_5 Nat_0))
	(gt_0 (Z_4 y_5) Z_3)))
(assert (forall ((x_32 Nat_0) (y_5 Nat_0))
	(=> (gt_0 x_32 y_5) (gt_0 (Z_4 x_32) (Z_4 y_5)))))
(assert (forall ((x_47 Nat_0) (x_48 list_0))
	(diseqlist_0 nil_0 (cons_0 x_47 x_48))))
(assert (forall ((x_49 Nat_0) (x_50 list_0))
	(diseqlist_0 (cons_0 x_49 x_50) nil_0)))
(assert (forall ((x_51 Nat_0) (x_52 list_0) (x_53 Nat_0) (x_54 list_0))
	(=> (diseqNat_0 x_51 x_53) (diseqlist_0 (cons_0 x_51 x_52) (cons_0 x_53 x_54)))))
(assert (forall ((x_51 Nat_0) (x_52 list_0) (x_53 Nat_0) (x_54 list_0))
	(=> (diseqlist_0 x_52 x_54) (diseqlist_0 (cons_0 x_51 x_52) (cons_0 x_53 x_54)))))
(assert (forall ((z_0 Nat_0) (xs_0 list_0) (x_0 Nat_0))
	(=> (le_0 x_0 z_0) (insert_0 (cons_0 x_0 (cons_0 z_0 xs_0)) x_0 (cons_0 z_0 xs_0)))))
(assert (forall ((x_8 list_0) (z_0 Nat_0) (xs_0 list_0) (x_0 Nat_0))
	(=> (and (gt_0 x_0 z_0) (insert_0 x_8 x_0 xs_0)) (insert_0 (cons_0 z_0 x_8) x_0 (cons_0 z_0 xs_0)))))
(assert (forall ((x_0 Nat_0))
	(insert_0 (cons_0 x_0 nil_0) x_0 nil_0)))
(assert (forall ((x_10 list_0) (x_11 list_0) (y_1 Nat_0) (xs_1 list_0))
	(=> (and (isort_0 x_11 xs_1) (insert_0 x_10 y_1 x_11)) (isort_0 x_10 (cons_0 y_1 xs_1)))))
(assert (isort_0 nil_0 nil_0))
(assert (forall ((x_14 list_0))
	(flatten_0 x_14 TNil_0 x_14)))
(assert (forall ((x_15 list_0) (x_16 list_0) (p_0 Tree_0) (z_1 Nat_0) (q_0 Tree_0) (y_2 list_0))
	(=> (and (flatten_0 x_16 q_0 y_2) (flatten_0 x_15 p_0 (cons_0 z_1 x_16))) (flatten_0 x_15 (TNode_0 p_0 z_1 q_0) y_2))))
(assert (forall ((x_3 Nat_0))
	(add_0 (TNode_0 TNil_0 x_3 TNil_0) x_3 TNil_0)))
(assert (forall ((x_20 Tree_0) (p_1 Tree_0) (z_2 Nat_0) (q_1 Tree_0) (x_3 Nat_0))
	(=> (and (le_0 x_3 z_2) (add_0 x_20 x_3 p_1)) (add_0 (TNode_0 x_20 z_2 q_1) x_3 (TNode_0 p_1 z_2 q_1)))))
(assert (forall ((x_22 Tree_0) (p_1 Tree_0) (z_2 Nat_0) (q_1 Tree_0) (x_3 Nat_0))
	(=> (and (gt_0 x_3 z_2) (add_0 x_22 x_3 q_1)) (add_0 (TNode_0 p_1 z_2 x_22) x_3 (TNode_0 p_1 z_2 q_1)))))
(assert (forall ((x_23 Tree_0) (x_24 Tree_0) (y_4 Nat_0) (xs_2 list_0))
	(=> (and (toTree_0 x_24 xs_2) (add_0 x_23 y_4 x_24)) (toTree_0 x_23 (cons_0 y_4 xs_2)))))
(assert (toTree_0 TNil_0 nil_0))
(assert (forall ((x_27 list_0) (x_28 Tree_0) (x_5 list_0))
	(=> (and (toTree_0 x_28 x_5) (flatten_0 x_27 x_28 nil_0)) (tsort_0 x_27 x_5))))
(assert (forall ((x_30 list_0) (x_31 list_0) (xs_3 list_0))
	(=> (and (diseqlist_0 x_30 x_31) (tsort_0 x_30 xs_3) (isort_0 x_31 xs_3)) false)))
(check-sat)
(get-model)
