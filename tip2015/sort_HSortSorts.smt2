(set-logic HORN)
(declare-datatypes ((Nat_0 0)) (((Z_4 ) (Z_5 (unS_0 Nat_0)))))
(declare-fun le_0 (Nat_0 Nat_0) Bool)
(declare-fun gt_0 (Nat_0 Nat_0) Bool)
(declare-datatypes ((Bool_0 0)) (((false_0 ) (true_0 ))))
(declare-fun diseqBool_0 (Bool_0 Bool_0) Bool)
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-datatypes ((Heap_0 0)) (((Node_0 (projNode_0 Heap_0) (projNode_1 Nat_0) (projNode_2 Heap_0)) (Nil_1 ))))
(declare-datatypes ((list_1 0)) (((nil_2 ) (cons_1 (head_1 Heap_0) (tail_1 list_1)))))
(declare-fun toHeap_0 (list_1 list_0) Bool)
(declare-fun ordered_0 (Bool_0 list_0) Bool)
(declare-fun hmerge_0 (Heap_0 Heap_0 Heap_0) Bool)
(declare-fun hpairwise_0 (list_1 list_1) Bool)
(declare-fun hmerging_0 (Heap_0 list_1) Bool)
(declare-fun toHeap_1 (Heap_0 list_0) Bool)
(declare-fun toList_0 (list_0 Heap_0) Bool)
(declare-fun hsort_0 (list_0 list_0) Bool)
(assert (forall ((y_7 Nat_0))
	(le_0 Z_4 y_7)))
(assert (forall ((x_50 Nat_0) (y_7 Nat_0))
	(=> (le_0 x_50 y_7) (le_0 (Z_5 x_50) (Z_5 y_7)))))
(assert (forall ((y_7 Nat_0))
	(gt_0 (Z_5 y_7) Z_4)))
(assert (forall ((x_50 Nat_0) (y_7 Nat_0))
	(=> (gt_0 x_50 y_7) (gt_0 (Z_5 x_50) (Z_5 y_7)))))
(assert (diseqBool_0 false_0 true_0))
(assert (diseqBool_0 true_0 false_0))
(assert (forall ((x_15 list_1) (y_0 Nat_0) (z_0 list_0))
	(=> (toHeap_0 x_15 z_0) (toHeap_0 (cons_1 (Node_0 Nil_1 y_0 Nil_1) x_15) (cons_0 y_0 z_0)))))
(assert (toHeap_0 nil_2 nil_0))
(assert (forall ((x_17 Bool_0) (y_2 Nat_0) (xs_0 list_0) (y_1 Nat_0))
	(=> (and (le_0 y_1 y_2) (ordered_0 x_17 (cons_0 y_2 xs_0))) (ordered_0 x_17 (cons_0 y_1 (cons_0 y_2 xs_0))))))
(assert (forall ((y_2 Nat_0) (xs_0 list_0) (y_1 Nat_0))
	(=> (gt_0 y_1 y_2) (ordered_0 false_0 (cons_0 y_1 (cons_0 y_2 xs_0))))))
(assert (forall ((y_1 Nat_0))
	(ordered_0 true_0 (cons_0 y_1 nil_0))))
(assert (ordered_0 true_0 nil_0))
(assert (forall ((x_22 Heap_0))
	(hmerge_0 x_22 Nil_1 x_22)))
(assert (forall ((z_2 Heap_0) (x_3 Nat_0) (x_4 Heap_0))
	(hmerge_0 (Node_0 z_2 x_3 x_4) (Node_0 z_2 x_3 x_4) Nil_1)))
(assert (forall ((x_25 Heap_0) (x_5 Heap_0) (x_6 Nat_0) (x_7 Heap_0) (z_2 Heap_0) (x_3 Nat_0) (x_4 Heap_0))
	(=> (and (le_0 x_3 x_6) (hmerge_0 x_25 x_4 (Node_0 x_5 x_6 x_7))) (hmerge_0 (Node_0 x_25 x_3 z_2) (Node_0 z_2 x_3 x_4) (Node_0 x_5 x_6 x_7)))))
(assert (forall ((x_27 Heap_0) (x_5 Heap_0) (x_6 Nat_0) (x_7 Heap_0) (z_2 Heap_0) (x_3 Nat_0) (x_4 Heap_0))
	(=> (and (gt_0 x_3 x_6) (hmerge_0 x_27 (Node_0 z_2 x_3 x_4) x_7)) (hmerge_0 (Node_0 x_27 x_6 x_5) (Node_0 z_2 x_3 x_4) (Node_0 x_5 x_6 x_7)))))
(assert (forall ((x_29 Heap_0) (x_30 list_1) (q_0 Heap_0) (qs_0 list_1) (p_0 Heap_0))
	(=> (and (hmerge_0 x_29 p_0 q_0) (hpairwise_0 x_30 qs_0)) (hpairwise_0 (cons_1 x_29 x_30) (cons_1 p_0 (cons_1 q_0 qs_0))))))
(assert (forall ((p_0 Heap_0))
	(hpairwise_0 (cons_1 p_0 nil_2) (cons_1 p_0 nil_2))))
(assert (hpairwise_0 nil_2 nil_2))
(assert (forall ((x_33 Heap_0) (x_34 list_1) (z_3 Heap_0) (x_10 list_1) (p_1 Heap_0))
	(=> (and (hpairwise_0 x_34 (cons_1 p_1 (cons_1 z_3 x_10))) (hmerging_0 x_33 x_34)) (hmerging_0 x_33 (cons_1 p_1 (cons_1 z_3 x_10))))))
(assert (forall ((p_1 Heap_0))
	(hmerging_0 p_1 (cons_1 p_1 nil_2))))
(assert (hmerging_0 Nil_1 nil_2))
(assert (forall ((x_38 Heap_0) (x_39 list_1) (x_11 list_0))
	(=> (and (toHeap_0 x_39 x_11) (hmerging_0 x_38 x_39)) (toHeap_1 x_38 x_11))))
(assert (toList_0 nil_0 Nil_1))
(assert (forall ((x_43 Heap_0) (x_44 list_0) (p_2 Heap_0) (y_6 Nat_0) (q_1 Heap_0))
	(=> (and (hmerge_0 x_43 p_2 q_1) (toList_0 x_44 x_43)) (toList_0 (cons_0 y_6 x_44) (Node_0 p_2 y_6 q_1)))))
(assert (forall ((x_45 list_0) (x_46 Heap_0) (x_13 list_0))
	(=> (and (toHeap_1 x_46 x_13) (toList_0 x_45 x_46)) (hsort_0 x_45 x_13))))
(assert (forall ((x_48 list_0) (x_49 Bool_0) (xs_1 list_0))
	(=> (and (diseqBool_0 x_49 true_0) (hsort_0 x_48 xs_1) (ordered_0 x_49 x_48)) false)))
(check-sat)
(get-model)
