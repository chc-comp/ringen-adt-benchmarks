(set-logic HORN)
(declare-datatypes ((Bool_0 0)) (((false_0 ) (true_0 ))))
(declare-fun diseqBool_0 (Bool_0 Bool_0) Bool)
(declare-datatypes ((Nat_0 0)) (((zero_0 ) (succ_0 (p_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-datatypes ((Tree_0 0)) (((TNode_0 (projTNode_0 Tree_0) (projTNode_1 Nat_0) (projTNode_2 Tree_0)) (TNil_0 ))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun plus_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun leq_0 (Bool_0 Nat_0 Nat_0) Bool)
(declare-fun flatten_0 (list_0 Tree_0 list_0) Bool)
(declare-fun count_0 (Nat_0 Nat_0 list_0) Bool)
(declare-fun add_0 (Tree_0 Nat_0 Tree_0) Bool)
(declare-fun toTree_0 (Tree_0 list_0) Bool)
(declare-fun tsort_0 (list_0 list_0) Bool)
(assert (diseqBool_0 false_0 true_0))
(assert (diseqBool_0 true_0 false_0))
(assert (forall ((x_62 Nat_0))
	(diseqNat_0 zero_0 (succ_0 x_62))))
(assert (forall ((x_63 Nat_0))
	(diseqNat_0 (succ_0 x_63) zero_0)))
(assert (forall ((x_64 Nat_0) (x_65 Nat_0))
	(=> (diseqNat_0 x_64 x_65) (diseqNat_0 (succ_0 x_64) (succ_0 x_65)))))
(assert (forall ((x_14 Nat_0) (z_0 Nat_0) (y_0 Nat_0))
	(=> (plus_0 x_14 z_0 y_0) (plus_0 (succ_0 x_14) (succ_0 z_0) y_0))))
(assert (forall ((x_15 Nat_0))
	(plus_0 x_15 zero_0 x_15)))
(assert (forall ((x_16 Bool_0) (x_2 Nat_0) (z_1 Nat_0))
	(=> (leq_0 x_16 z_1 x_2) (leq_0 x_16 (succ_0 z_1) (succ_0 x_2)))))
(assert (forall ((z_1 Nat_0))
	(leq_0 false_0 (succ_0 z_1) zero_0)))
(assert (forall ((y_1 Nat_0))
	(leq_0 true_0 zero_0 y_1)))
(assert (forall ((x_20 list_0))
	(flatten_0 x_20 TNil_0 x_20)))
(assert (forall ((x_21 list_0) (x_22 list_0) (q_0 Tree_0) (z_2 Nat_0) (r_0 Tree_0) (y_2 list_0))
	(=> (and (flatten_0 x_22 r_0 y_2) (flatten_0 x_21 q_0 (cons_0 z_2 x_22))) (flatten_0 x_21 (TNode_0 q_0 z_2 r_0) y_2))))
(assert (forall ((x_24 Nat_0) (x_25 Nat_0) (ys_0 list_0) (x_4 Nat_0))
	(=> (and (count_0 x_25 x_4 ys_0) (plus_0 x_24 (succ_0 zero_0) x_25)) (count_0 x_24 x_4 (cons_0 x_4 ys_0)))))
(assert (forall ((x_27 Nat_0) (z_3 Nat_0) (ys_0 list_0) (x_4 Nat_0))
	(=> (and (diseqNat_0 x_4 z_3) (count_0 x_27 x_4 ys_0)) (count_0 x_27 x_4 (cons_0 z_3 ys_0)))))
(assert (forall ((x_4 Nat_0))
	(count_0 zero_0 x_4 nil_0)))
(assert (forall ((x_5 Nat_0))
	(add_0 (TNode_0 TNil_0 x_5 TNil_0) x_5 TNil_0)))
(assert (forall ((x_33 Tree_0) (q_1 Tree_0) (z_4 Nat_0) (r_1 Tree_0) (x_5 Nat_0))
	(=> (and (add_0 x_33 x_5 q_1) (leq_0 true_0 x_5 z_4)) (add_0 (TNode_0 x_33 z_4 r_1) x_5 (TNode_0 q_1 z_4 r_1)))))
(assert (forall ((x_36 Tree_0) (x_34 Bool_0) (q_1 Tree_0) (z_4 Nat_0) (r_1 Tree_0) (x_5 Nat_0))
	(=> (and (diseqBool_0 x_34 true_0) (add_0 x_36 x_5 r_1) (leq_0 x_34 x_5 z_4)) (add_0 (TNode_0 q_1 z_4 x_36) x_5 (TNode_0 q_1 z_4 r_1)))))
(assert (forall ((x_37 Tree_0) (x_38 Tree_0) (y_5 Nat_0) (xs_0 list_0))
	(=> (and (toTree_0 x_38 xs_0) (add_0 x_37 y_5 x_38)) (toTree_0 x_37 (cons_0 y_5 xs_0)))))
(assert (toTree_0 TNil_0 nil_0))
(assert (forall ((x_41 list_0) (x_42 Tree_0) (x_7 list_0))
	(=> (and (toTree_0 x_42 x_7) (flatten_0 x_41 x_42 nil_0)) (tsort_0 x_41 x_7))))
(assert (forall ((x_44 Nat_0) (x_45 Nat_0) (x_46 Nat_0) (x_47 Nat_0) (x_8 Nat_0) (y_6 Nat_0) (z_5 Nat_0))
	(=> (and (diseqNat_0 x_45 x_47) (plus_0 x_44 y_6 z_5) (plus_0 x_45 x_8 x_44) (plus_0 x_46 x_8 y_6) (plus_0 x_47 x_46 z_5)) false)))
(assert (forall ((x_48 Nat_0) (x_49 Nat_0) (x_9 Nat_0) (y_7 Nat_0))
	(=> (and (diseqNat_0 x_48 x_49) (plus_0 x_48 x_9 y_7) (plus_0 x_49 y_7 x_9)) false)))
(assert (forall ((x_50 Nat_0) (x_10 Nat_0))
	(=> (and (diseqNat_0 x_50 x_10) (plus_0 x_50 x_10 zero_0)) false)))
(assert (forall ((x_51 Nat_0) (x_11 Nat_0))
	(=> (and (diseqNat_0 x_51 x_11) (plus_0 x_51 zero_0 x_11)) false)))
(assert (forall ((x_52 list_0) (x_53 Nat_0) (x_54 Nat_0) (x_12 Nat_0) (xs_1 list_0))
	(=> (and (diseqNat_0 x_53 x_54) (tsort_0 x_52 xs_1) (count_0 x_53 x_12 x_52) (count_0 x_54 x_12 xs_1)) false)))
(check-sat)
(get-model)
