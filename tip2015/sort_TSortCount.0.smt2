(set-logic HORN)
(declare-datatypes ((Nat_0 0)) (((Z_0 ) (S_0 (unS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun unS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_0 (Nat_0) Bool)
(declare-fun isS_0 (Nat_0) Bool)
(assert (forall ((x_34 Nat_0) (x_33 Nat_0))
	(=> (= x_34 (S_0 x_33))
	    (unS_1 x_33 x_34))))
(assert (isZ_0 Z_0))
(assert (forall ((x_35 Nat_0))
	(isS_0 (S_0 x_35))))
(assert (forall ((x_36 Nat_0))
	(diseqNat_0 Z_0 (S_0 x_36))))
(assert (forall ((x_37 Nat_0))
	(diseqNat_0 (S_0 x_37) Z_0)))
(assert (forall ((x_38 Nat_0) (x_39 Nat_0))
	(=> (diseqNat_0 x_38 x_39)
	    (diseqNat_0 (S_0 x_38) (S_0 x_39)))))
(declare-fun add_1 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun minus_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun le_0 (Nat_0 Nat_0) Bool)
(declare-fun ge_0 (Nat_0 Nat_0) Bool)
(declare-fun lt_0 (Nat_0 Nat_0) Bool)
(declare-fun gt_0 (Nat_0 Nat_0) Bool)
(declare-fun mult_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun div_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun mod_0 (Nat_0 Nat_0 Nat_0) Bool)
(assert (forall ((y_4 Nat_0))
	(add_1 y_4 Z_0 y_4)))
(assert (forall ((x_30 Nat_0) (y_4 Nat_0) (r_0 Nat_0))
	(=> (add_1 r_0 x_30 y_4)
	    (add_1 (S_0 r_0) (S_0 x_30) y_4))))
(assert (forall ((y_4 Nat_0))
	(minus_0 Z_0 Z_0 y_4)))
(assert (forall ((x_30 Nat_0) (y_4 Nat_0) (r_0 Nat_0))
	(=> (minus_0 r_0 x_30 y_4)
	    (minus_0 (S_0 r_0) (S_0 x_30) y_4))))
(assert (forall ((y_4 Nat_0))
	(le_0 Z_0 y_4)))
(assert (forall ((x_30 Nat_0) (y_4 Nat_0))
	(=> (le_0 x_30 y_4)
	    (le_0 (S_0 x_30) (S_0 y_4)))))
(assert (forall ((y_4 Nat_0))
	(ge_0 y_4 Z_0)))
(assert (forall ((x_30 Nat_0) (y_4 Nat_0))
	(=> (ge_0 x_30 y_4)
	    (ge_0 (S_0 x_30) (S_0 y_4)))))
(assert (forall ((y_4 Nat_0))
	(lt_0 Z_0 (S_0 y_4))))
(assert (forall ((x_30 Nat_0) (y_4 Nat_0))
	(=> (lt_0 x_30 y_4)
	    (lt_0 (S_0 x_30) (S_0 y_4)))))
(assert (forall ((y_4 Nat_0))
	(gt_0 (S_0 y_4) Z_0)))
(assert (forall ((x_30 Nat_0) (y_4 Nat_0))
	(=> (gt_0 x_30 y_4)
	    (gt_0 (S_0 x_30) (S_0 y_4)))))
(assert (forall ((y_4 Nat_0))
	(mult_0 Z_0 Z_0 y_4)))
(assert (forall ((x_30 Nat_0) (y_4 Nat_0) (r_0 Nat_0) (z_3 Nat_0))
	(=>	(and (mult_0 r_0 x_30 y_4)
			(add_1 z_3 r_0 y_4))
		(mult_0 z_3 (S_0 x_30) y_4))))
(assert (forall ((x_30 Nat_0) (y_4 Nat_0))
	(=> (lt_0 x_30 y_4)
	    (div_0 Z_0 x_30 y_4))))
(assert (forall ((x_30 Nat_0) (y_4 Nat_0) (r_0 Nat_0) (z_3 Nat_0))
	(=>	(and (ge_0 x_30 y_4)
			(minus_0 z_3 x_30 y_4)
			(div_0 r_0 z_3 y_4))
		(div_0 (S_0 r_0) x_30 y_4))))
(assert (forall ((x_30 Nat_0) (y_4 Nat_0))
	(=> (lt_0 x_30 y_4)
	    (mod_0 x_30 x_30 y_4))))
(assert (forall ((x_30 Nat_0) (y_4 Nat_0) (r_0 Nat_0) (z_3 Nat_0))
	(=>	(and (ge_0 x_30 y_4)
			(minus_0 z_3 x_30 y_4)
			(mod_0 r_0 z_3 y_4))
		(mod_0 r_0 x_30 y_4))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_1 (Nat_0 list_0) Bool)
(declare-fun tail_1 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_43 list_0) (x_41 Nat_0) (x_42 list_0))
	(=> (= x_43 (cons_0 x_41 x_42))
	    (head_1 x_41 x_43))))
(assert (forall ((x_43 list_0) (x_41 Nat_0) (x_42 list_0))
	(=> (= x_43 (cons_0 x_41 x_42))
	    (tail_1 x_42 x_43))))
(assert (isnil_0 nil_0))
(assert (forall ((x_44 Nat_0) (x_45 list_0))
	(iscons_0 (cons_0 x_44 x_45))))
(assert (forall ((x_46 Nat_0) (x_47 list_0))
	(diseqlist_0 nil_0 (cons_0 x_46 x_47))))
(assert (forall ((x_48 Nat_0) (x_49 list_0))
	(diseqlist_0 (cons_0 x_48 x_49) nil_0)))
(assert (forall ((x_50 Nat_0) (x_51 list_0) (x_52 Nat_0) (x_53 list_0))
	(=> (diseqNat_0 x_50 x_52)
	    (diseqlist_0 (cons_0 x_50 x_51) (cons_0 x_52 x_53)))))
(assert (forall ((x_50 Nat_0) (x_51 list_0) (x_52 Nat_0) (x_53 list_0))
	(=> (diseqlist_0 x_51 x_53)
	    (diseqlist_0 (cons_0 x_50 x_51) (cons_0 x_52 x_53)))))
(declare-datatypes ((Tree_0 0)) (((TNode_0 (projTNode_0 Tree_0) (projTNode_1 Nat_0) (projTNode_2 Tree_0)) (TNil_0 ))))
(declare-fun diseqTree_0 (Tree_0 Tree_0) Bool)
(declare-fun projTNode_3 (Tree_0 Tree_0) Bool)
(declare-fun projTNode_4 (Nat_0 Tree_0) Bool)
(declare-fun projTNode_5 (Tree_0 Tree_0) Bool)
(declare-fun isTNode_0 (Tree_0) Bool)
(declare-fun isTNil_0 (Tree_0) Bool)
(assert (forall ((x_57 Tree_0) (x_54 Tree_0) (x_55 Nat_0) (x_56 Tree_0))
	(=> (= x_57 (TNode_0 x_54 x_55 x_56))
	    (projTNode_3 x_54 x_57))))
(assert (forall ((x_57 Tree_0) (x_54 Tree_0) (x_55 Nat_0) (x_56 Tree_0))
	(=> (= x_57 (TNode_0 x_54 x_55 x_56))
	    (projTNode_4 x_55 x_57))))
(assert (forall ((x_57 Tree_0) (x_54 Tree_0) (x_55 Nat_0) (x_56 Tree_0))
	(=> (= x_57 (TNode_0 x_54 x_55 x_56))
	    (projTNode_5 x_56 x_57))))
(assert (forall ((x_59 Tree_0) (x_60 Nat_0) (x_61 Tree_0))
	(isTNode_0 (TNode_0 x_59 x_60 x_61))))
(assert (isTNil_0 TNil_0))
(assert (forall ((x_62 Tree_0) (x_63 Nat_0) (x_64 Tree_0))
	(diseqTree_0 (TNode_0 x_62 x_63 x_64) TNil_0)))
(assert (forall ((x_65 Tree_0) (x_66 Nat_0) (x_67 Tree_0))
	(diseqTree_0 TNil_0 (TNode_0 x_65 x_66 x_67))))
(assert (forall ((x_68 Tree_0) (x_69 Nat_0) (x_70 Tree_0) (x_71 Tree_0) (x_72 Nat_0) (x_73 Tree_0))
	(=> (diseqTree_0 x_68 x_71)
	    (diseqTree_0 (TNode_0 x_68 x_69 x_70) (TNode_0 x_71 x_72 x_73)))))
(assert (forall ((x_68 Tree_0) (x_69 Nat_0) (x_70 Tree_0) (x_71 Tree_0) (x_72 Nat_0) (x_73 Tree_0))
	(=> (diseqNat_0 x_69 x_72)
	    (diseqTree_0 (TNode_0 x_68 x_69 x_70) (TNode_0 x_71 x_72 x_73)))))
(assert (forall ((x_68 Tree_0) (x_69 Nat_0) (x_70 Tree_0) (x_71 Tree_0) (x_72 Nat_0) (x_73 Tree_0))
	(=> (diseqTree_0 x_70 x_73)
	    (diseqTree_0 (TNode_0 x_68 x_69 x_70) (TNode_0 x_71 x_72 x_73)))))
(declare-fun flatten_0 (list_0 Tree_0 list_0) Bool)
(assert (forall ((x_0 Tree_0) (y_0 list_0) (x_6 list_0))
	(=>	(and (= x_6 y_0)
			(= x_0 TNil_0))
		(flatten_0 x_6 x_0 y_0))))
(assert (forall ((x_0 Tree_0) (y_0 list_0) (p_0 Tree_0) (z_0 Nat_0) (q_0 Tree_0) (x_7 list_0) (x_8 list_0) (x_9 list_0))
	(=>	(and (= x_7 x_9)
			(flatten_0 x_8 q_0 y_0)
			(flatten_0 x_9 p_0 (cons_0 z_0 x_8))
			(= x_0 (TNode_0 p_0 z_0 q_0)))
		(flatten_0 x_7 x_0 y_0))))
(declare-fun count_0 (Nat_0 Nat_0 list_0) Bool)
(assert (forall ((x_1 Nat_0) (y_1 list_0) (z_1 Nat_0) (ys_0 list_0) (x_10 Nat_0) (x_11 Nat_0) (x_31 Nat_0))
	(=>	(and (= x_10 x_31)
			(count_0 x_11 x_1 ys_0)
			(= y_1 (cons_0 z_1 ys_0))
			(= x_1 z_1)
			(add_1 x_31 (S_0 Z_0) x_11))
		(count_0 x_10 x_1 y_1))))
(assert (forall ((x_1 Nat_0) (y_1 list_0) (z_1 Nat_0) (ys_0 list_0) (x_12 Nat_0) (x_13 Nat_0))
	(=>	(and (= x_12 x_13)
			(count_0 x_13 x_1 ys_0)
			(= y_1 (cons_0 z_1 ys_0))
			(diseqNat_0 x_1 z_1))
		(count_0 x_12 x_1 y_1))))
(assert (forall ((x_1 Nat_0) (y_1 list_0) (x_14 Nat_0))
	(=>	(and (= x_14 Z_0)
			(= y_1 nil_0))
		(count_0 x_14 x_1 y_1))))
(declare-fun add_0 (Tree_0 Nat_0 Tree_0) Bool)
(assert (forall ((x_2 Nat_0) (y_2 Tree_0) (x_15 Tree_0))
	(=>	(and (= x_15 (TNode_0 TNil_0 x_2 TNil_0))
			(= y_2 TNil_0))
		(add_0 x_15 x_2 y_2))))
(assert (forall ((x_2 Nat_0) (y_2 Tree_0) (p_1 Tree_0) (z_2 Nat_0) (q_1 Tree_0) (x_16 Tree_0) (x_17 Tree_0))
	(=>	(and (= x_16 (TNode_0 x_17 z_2 q_1))
			(add_0 x_17 x_2 p_1)
			(= y_2 (TNode_0 p_1 z_2 q_1))
			(le_0 x_2 z_2))
		(add_0 x_16 x_2 y_2))))
(assert (forall ((x_2 Nat_0) (y_2 Tree_0) (p_1 Tree_0) (z_2 Nat_0) (q_1 Tree_0) (x_18 Tree_0) (x_19 Tree_0))
	(=>	(and (= x_18 (TNode_0 p_1 z_2 x_19))
			(add_0 x_19 x_2 q_1)
			(= y_2 (TNode_0 p_1 z_2 q_1))
			(gt_0 x_2 z_2))
		(add_0 x_18 x_2 y_2))))
(declare-fun toTree_0 (Tree_0 list_0) Bool)
(assert (forall ((x_3 list_0) (y_3 Nat_0) (xs_0 list_0) (x_20 Tree_0) (x_21 Tree_0) (x_22 Tree_0))
	(=>	(and (= x_20 x_22)
			(toTree_0 x_21 xs_0)
			(add_0 x_22 y_3 x_21)
			(= x_3 (cons_0 y_3 xs_0)))
		(toTree_0 x_20 x_3))))
(assert (forall ((x_3 list_0) (x_23 Tree_0))
	(=>	(and (= x_23 TNil_0)
			(= x_3 nil_0))
		(toTree_0 x_23 x_3))))
(declare-fun tsort_0 (list_0 list_0) Bool)
(assert (forall ((x_4 list_0) (x_24 list_0) (x_25 Tree_0) (x_26 list_0))
	(=>	(and (= x_24 x_26)
			(toTree_0 x_25 x_4)
			(flatten_0 x_26 x_25 nil_0))
		(tsort_0 x_24 x_4))))
(assert (forall ((x_5 Nat_0) (xs_1 list_0) (x_27 list_0) (x_28 Nat_0) (x_29 Nat_0))
	(=>	(and (diseqNat_0 x_28 x_29)
			(tsort_0 x_27 xs_1)
			(count_0 x_28 x_5 x_27)
			(count_0 x_29 x_5 xs_1))
		false)))
(check-sat)
