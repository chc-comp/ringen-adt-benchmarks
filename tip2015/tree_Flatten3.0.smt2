(set-logic HORN)
(declare-datatypes ((Nat_0 0)) (((Z_0 ) (S_0 (unS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun unS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_0 (Nat_0) Bool)
(declare-fun isS_0 (Nat_0) Bool)
(assert (forall ((x_24 Nat_0) (x_23 Nat_0))
	(=> (= x_24 (S_0 x_23))
	    (unS_1 x_23 x_24))))
(assert (isZ_0 Z_0))
(assert (forall ((x_25 Nat_0))
	(isS_0 (S_0 x_25))))
(assert (forall ((x_26 Nat_0))
	(diseqNat_0 Z_0 (S_0 x_26))))
(assert (forall ((x_27 Nat_0))
	(diseqNat_0 (S_0 x_27) Z_0)))
(assert (forall ((x_28 Nat_0) (x_29 Nat_0))
	(=> (diseqNat_0 x_28 x_29)
	    (diseqNat_0 (S_0 x_28) (S_0 x_29)))))
(declare-fun add_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun minus_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun le_0 (Nat_0 Nat_0) Bool)
(declare-fun ge_0 (Nat_0 Nat_0) Bool)
(declare-fun lt_0 (Nat_0 Nat_0) Bool)
(declare-fun gt_0 (Nat_0 Nat_0) Bool)
(declare-fun mult_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun div_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun mod_0 (Nat_0 Nat_0 Nat_0) Bool)
(assert (forall ((y_3 Nat_0))
	(add_0 y_3 Z_0 y_3)))
(assert (forall ((x_21 Nat_0) (y_3 Nat_0) (r_1 Nat_0))
	(=> (add_0 r_1 x_21 y_3)
	    (add_0 (S_0 r_1) (S_0 x_21) y_3))))
(assert (forall ((y_3 Nat_0))
	(minus_0 Z_0 Z_0 y_3)))
(assert (forall ((x_21 Nat_0) (y_3 Nat_0) (r_1 Nat_0))
	(=> (minus_0 r_1 x_21 y_3)
	    (minus_0 (S_0 r_1) (S_0 x_21) y_3))))
(assert (forall ((y_3 Nat_0))
	(le_0 Z_0 y_3)))
(assert (forall ((x_21 Nat_0) (y_3 Nat_0))
	(=> (le_0 x_21 y_3)
	    (le_0 (S_0 x_21) (S_0 y_3)))))
(assert (forall ((y_3 Nat_0))
	(ge_0 y_3 Z_0)))
(assert (forall ((x_21 Nat_0) (y_3 Nat_0))
	(=> (ge_0 x_21 y_3)
	    (ge_0 (S_0 x_21) (S_0 y_3)))))
(assert (forall ((y_3 Nat_0))
	(lt_0 Z_0 (S_0 y_3))))
(assert (forall ((x_21 Nat_0) (y_3 Nat_0))
	(=> (lt_0 x_21 y_3)
	    (lt_0 (S_0 x_21) (S_0 y_3)))))
(assert (forall ((y_3 Nat_0))
	(gt_0 (S_0 y_3) Z_0)))
(assert (forall ((x_21 Nat_0) (y_3 Nat_0))
	(=> (gt_0 x_21 y_3)
	    (gt_0 (S_0 x_21) (S_0 y_3)))))
(assert (forall ((y_3 Nat_0))
	(mult_0 Z_0 Z_0 y_3)))
(assert (forall ((x_21 Nat_0) (y_3 Nat_0) (r_1 Nat_0) (z_2 Nat_0))
	(=>	(and (mult_0 r_1 x_21 y_3)
			(add_0 z_2 r_1 y_3))
		(mult_0 z_2 (S_0 x_21) y_3))))
(assert (forall ((x_21 Nat_0) (y_3 Nat_0))
	(=> (lt_0 x_21 y_3)
	    (div_0 Z_0 x_21 y_3))))
(assert (forall ((x_21 Nat_0) (y_3 Nat_0) (r_1 Nat_0) (z_2 Nat_0))
	(=>	(and (ge_0 x_21 y_3)
			(minus_0 z_2 x_21 y_3)
			(div_0 r_1 z_2 y_3))
		(div_0 (S_0 r_1) x_21 y_3))))
(assert (forall ((x_21 Nat_0) (y_3 Nat_0))
	(=> (lt_0 x_21 y_3)
	    (mod_0 x_21 x_21 y_3))))
(assert (forall ((x_21 Nat_0) (y_3 Nat_0) (r_1 Nat_0) (z_2 Nat_0))
	(=>	(and (ge_0 x_21 y_3)
			(minus_0 z_2 x_21 y_3)
			(mod_0 r_1 z_2 y_3))
		(mod_0 r_1 x_21 y_3))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_1 (Nat_0 list_0) Bool)
(declare-fun tail_1 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_33 list_0) (x_31 Nat_0) (x_32 list_0))
	(=> (= x_33 (cons_0 x_31 x_32))
	    (head_1 x_31 x_33))))
(assert (forall ((x_33 list_0) (x_31 Nat_0) (x_32 list_0))
	(=> (= x_33 (cons_0 x_31 x_32))
	    (tail_1 x_32 x_33))))
(assert (isnil_0 nil_0))
(assert (forall ((x_34 Nat_0) (x_35 list_0))
	(iscons_0 (cons_0 x_34 x_35))))
(assert (forall ((x_36 Nat_0) (x_37 list_0))
	(diseqlist_0 nil_0 (cons_0 x_36 x_37))))
(assert (forall ((x_38 Nat_0) (x_39 list_0))
	(diseqlist_0 (cons_0 x_38 x_39) nil_0)))
(assert (forall ((x_40 Nat_0) (x_41 list_0) (x_42 Nat_0) (x_43 list_0))
	(=> (diseqNat_0 x_40 x_42)
	    (diseqlist_0 (cons_0 x_40 x_41) (cons_0 x_42 x_43)))))
(assert (forall ((x_40 Nat_0) (x_41 list_0) (x_42 Nat_0) (x_43 list_0))
	(=> (diseqlist_0 x_41 x_43)
	    (diseqlist_0 (cons_0 x_40 x_41) (cons_0 x_42 x_43)))))
(declare-datatypes ((Tree_0 0)) (((Node_0 (projNode_0 Tree_0) (projNode_1 Nat_0) (projNode_2 Tree_0)) (Nil_0 ))))
(declare-fun diseqTree_0 (Tree_0 Tree_0) Bool)
(declare-fun projNode_3 (Tree_0 Tree_0) Bool)
(declare-fun projNode_4 (Nat_0 Tree_0) Bool)
(declare-fun projNode_5 (Tree_0 Tree_0) Bool)
(declare-fun isNode_0 (Tree_0) Bool)
(declare-fun isNil_0 (Tree_0) Bool)
(assert (forall ((x_47 Tree_0) (x_44 Tree_0) (x_45 Nat_0) (x_46 Tree_0))
	(=> (= x_47 (Node_0 x_44 x_45 x_46))
	    (projNode_3 x_44 x_47))))
(assert (forall ((x_47 Tree_0) (x_44 Tree_0) (x_45 Nat_0) (x_46 Tree_0))
	(=> (= x_47 (Node_0 x_44 x_45 x_46))
	    (projNode_4 x_45 x_47))))
(assert (forall ((x_47 Tree_0) (x_44 Tree_0) (x_45 Nat_0) (x_46 Tree_0))
	(=> (= x_47 (Node_0 x_44 x_45 x_46))
	    (projNode_5 x_46 x_47))))
(assert (forall ((x_49 Tree_0) (x_50 Nat_0) (x_51 Tree_0))
	(isNode_0 (Node_0 x_49 x_50 x_51))))
(assert (isNil_0 Nil_0))
(assert (forall ((x_52 Tree_0) (x_53 Nat_0) (x_54 Tree_0))
	(diseqTree_0 (Node_0 x_52 x_53 x_54) Nil_0)))
(assert (forall ((x_55 Tree_0) (x_56 Nat_0) (x_57 Tree_0))
	(diseqTree_0 Nil_0 (Node_0 x_55 x_56 x_57))))
(assert (forall ((x_58 Tree_0) (x_59 Nat_0) (x_60 Tree_0) (x_61 Tree_0) (x_62 Nat_0) (x_63 Tree_0))
	(=> (diseqTree_0 x_58 x_61)
	    (diseqTree_0 (Node_0 x_58 x_59 x_60) (Node_0 x_61 x_62 x_63)))))
(assert (forall ((x_58 Tree_0) (x_59 Nat_0) (x_60 Tree_0) (x_61 Tree_0) (x_62 Nat_0) (x_63 Tree_0))
	(=> (diseqNat_0 x_59 x_62)
	    (diseqTree_0 (Node_0 x_58 x_59 x_60) (Node_0 x_61 x_62 x_63)))))
(assert (forall ((x_58 Tree_0) (x_59 Nat_0) (x_60 Tree_0) (x_61 Tree_0) (x_62 Nat_0) (x_63 Tree_0))
	(=> (diseqTree_0 x_60 x_63)
	    (diseqTree_0 (Node_0 x_58 x_59 x_60) (Node_0 x_61 x_62 x_63)))))
(declare-fun flatten_0 (list_0 Tree_0) Bool)
(assert (forall ((x_0 Tree_0) (x_5 list_0))
	(=>	(and (= x_5 nil_0)
			(= x_0 Nil_0))
		(flatten_0 x_5 x_0))))
(assert (forall ((x_0 Tree_0) (y_0 Tree_0) (z_0 Nat_0) (r_0 Tree_0) (x_6 list_0) (x_7 list_0))
	(=>	(and (= x_6 (cons_0 z_0 x_7))
			(flatten_0 x_7 r_0)
			(= x_0 (Node_0 y_0 z_0 r_0))
			(= y_0 Nil_0))
		(flatten_0 x_6 x_0))))
(assert (forall ((x_0 Tree_0) (y_0 Tree_0) (z_0 Nat_0) (r_0 Tree_0) (p_0 Tree_0) (x_1 Nat_0) (q_0 Tree_0) (x_8 list_0) (x_9 list_0))
	(=>	(and (= x_8 x_9)
			(flatten_0 x_9 (Node_0 p_0 x_1 (Node_0 q_0 z_0 r_0)))
			(= x_0 (Node_0 y_0 z_0 r_0))
			(= y_0 (Node_0 p_0 x_1 q_0)))
		(flatten_0 x_8 x_0))))
(declare-fun x_2 (list_0 list_0 list_0) Bool)
(assert (forall ((x_3 list_0) (y_1 list_0) (z_1 Nat_0) (xs_0 list_0) (x_10 list_0) (x_11 list_0))
	(=>	(and (= x_10 (cons_0 z_1 x_11))
			(x_2 x_11 xs_0 y_1)
			(= x_3 (cons_0 z_1 xs_0)))
		(x_2 x_10 x_3 y_1))))
(assert (forall ((x_3 list_0) (y_1 list_0) (x_12 list_0))
	(=>	(and (= x_12 y_1)
			(= x_3 nil_0))
		(x_2 x_12 x_3 y_1))))
(declare-fun flatten_1 (list_0 Tree_0) Bool)
(assert (forall ((x_4 Tree_0) (x_13 list_0))
	(=>	(and (= x_13 nil_0)
			(= x_4 Nil_0))
		(flatten_1 x_13 x_4))))
(assert (forall ((x_4 Tree_0) (p_1 Tree_0) (y_2 Nat_0) (q_1 Tree_0) (x_14 list_0) (x_15 list_0) (x_16 list_0) (x_17 list_0) (x_18 list_0))
	(=>	(and (= x_14 x_18)
			(flatten_1 x_15 p_1)
			(flatten_1 x_16 q_1)
			(x_2 x_17 (cons_0 y_2 nil_0) x_16)
			(x_2 x_18 x_15 x_17)
			(= x_4 (Node_0 p_1 y_2 q_1)))
		(flatten_1 x_14 x_4))))
(assert (forall ((p_2 Tree_0) (x_19 list_0) (x_20 list_0))
	(=>	(and (diseqlist_0 x_19 x_20)
			(flatten_0 x_19 p_2)
			(flatten_1 x_20 p_2))
		false)))
(check-sat)
