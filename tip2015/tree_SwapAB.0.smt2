(set-logic HORN)
(declare-datatypes ((Nat_0 0)) (((Z_0 ) (S_0 (unS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun unS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_0 (Nat_0) Bool)
(declare-fun isS_0 (Nat_0) Bool)
(assert (forall ((x_48 Nat_0) (x_47 Nat_0))
	(=> (= x_48 (S_0 x_47))
	    (unS_1 x_47 x_48))))
(assert (isZ_0 Z_0))
(assert (forall ((x_49 Nat_0))
	(isS_0 (S_0 x_49))))
(assert (forall ((x_50 Nat_0))
	(diseqNat_0 Z_0 (S_0 x_50))))
(assert (forall ((x_51 Nat_0))
	(diseqNat_0 (S_0 x_51) Z_0)))
(assert (forall ((x_52 Nat_0) (x_53 Nat_0))
	(=> (diseqNat_0 x_52 x_53)
	    (diseqNat_0 (S_0 x_52) (S_0 x_53)))))
(declare-fun add_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun minus_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun le_0 (Nat_0 Nat_0) Bool)
(declare-fun ge_0 (Nat_0 Nat_0) Bool)
(declare-fun lt_0 (Nat_0 Nat_0) Bool)
(declare-fun gt_0 (Nat_0 Nat_0) Bool)
(declare-fun mult_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun div_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun mod_0 (Nat_0 Nat_0 Nat_0) Bool)
(assert (forall ((y_4 Nat_0))
	(add_0 y_4 Z_0 y_4)))
(assert (forall ((x_45 Nat_0) (y_4 Nat_0) (r_0 Nat_0))
	(=> (add_0 r_0 x_45 y_4)
	    (add_0 (S_0 r_0) (S_0 x_45) y_4))))
(assert (forall ((y_4 Nat_0))
	(minus_0 Z_0 Z_0 y_4)))
(assert (forall ((x_45 Nat_0) (y_4 Nat_0) (r_0 Nat_0))
	(=> (minus_0 r_0 x_45 y_4)
	    (minus_0 (S_0 r_0) (S_0 x_45) y_4))))
(assert (forall ((y_4 Nat_0))
	(le_0 Z_0 y_4)))
(assert (forall ((x_45 Nat_0) (y_4 Nat_0))
	(=> (le_0 x_45 y_4)
	    (le_0 (S_0 x_45) (S_0 y_4)))))
(assert (forall ((y_4 Nat_0))
	(ge_0 y_4 Z_0)))
(assert (forall ((x_45 Nat_0) (y_4 Nat_0))
	(=> (ge_0 x_45 y_4)
	    (ge_0 (S_0 x_45) (S_0 y_4)))))
(assert (forall ((y_4 Nat_0))
	(lt_0 Z_0 (S_0 y_4))))
(assert (forall ((x_45 Nat_0) (y_4 Nat_0))
	(=> (lt_0 x_45 y_4)
	    (lt_0 (S_0 x_45) (S_0 y_4)))))
(assert (forall ((y_4 Nat_0))
	(gt_0 (S_0 y_4) Z_0)))
(assert (forall ((x_45 Nat_0) (y_4 Nat_0))
	(=> (gt_0 x_45 y_4)
	    (gt_0 (S_0 x_45) (S_0 y_4)))))
(assert (forall ((y_4 Nat_0))
	(mult_0 Z_0 Z_0 y_4)))
(assert (forall ((x_45 Nat_0) (y_4 Nat_0) (r_0 Nat_0) (z_3 Nat_0))
	(=>	(and (mult_0 r_0 x_45 y_4)
			(add_0 z_3 r_0 y_4))
		(mult_0 z_3 (S_0 x_45) y_4))))
(assert (forall ((x_45 Nat_0) (y_4 Nat_0))
	(=> (lt_0 x_45 y_4)
	    (div_0 Z_0 x_45 y_4))))
(assert (forall ((x_45 Nat_0) (y_4 Nat_0) (r_0 Nat_0) (z_3 Nat_0))
	(=>	(and (ge_0 x_45 y_4)
			(minus_0 z_3 x_45 y_4)
			(div_0 r_0 z_3 y_4))
		(div_0 (S_0 r_0) x_45 y_4))))
(assert (forall ((x_45 Nat_0) (y_4 Nat_0))
	(=> (lt_0 x_45 y_4)
	    (mod_0 x_45 x_45 y_4))))
(assert (forall ((x_45 Nat_0) (y_4 Nat_0) (r_0 Nat_0) (z_3 Nat_0))
	(=>	(and (ge_0 x_45 y_4)
			(minus_0 z_3 x_45 y_4)
			(mod_0 r_0 z_3 y_4))
		(mod_0 r_0 x_45 y_4))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_1 (Nat_0 list_0) Bool)
(declare-fun tail_1 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_57 list_0) (x_55 Nat_0) (x_56 list_0))
	(=> (= x_57 (cons_0 x_55 x_56))
	    (head_1 x_55 x_57))))
(assert (forall ((x_57 list_0) (x_55 Nat_0) (x_56 list_0))
	(=> (= x_57 (cons_0 x_55 x_56))
	    (tail_1 x_56 x_57))))
(assert (isnil_0 nil_0))
(assert (forall ((x_58 Nat_0) (x_59 list_0))
	(iscons_0 (cons_0 x_58 x_59))))
(assert (forall ((x_60 Nat_0) (x_61 list_0))
	(diseqlist_0 nil_0 (cons_0 x_60 x_61))))
(assert (forall ((x_62 Nat_0) (x_63 list_0))
	(diseqlist_0 (cons_0 x_62 x_63) nil_0)))
(assert (forall ((x_64 Nat_0) (x_65 list_0) (x_66 Nat_0) (x_67 list_0))
	(=> (diseqNat_0 x_64 x_66)
	    (diseqlist_0 (cons_0 x_64 x_65) (cons_0 x_66 x_67)))))
(assert (forall ((x_64 Nat_0) (x_65 list_0) (x_66 Nat_0) (x_67 list_0))
	(=> (diseqlist_0 x_65 x_67)
	    (diseqlist_0 (cons_0 x_64 x_65) (cons_0 x_66 x_67)))))
(declare-datatypes ((Tree_0 0)) (((Node_0 (projNode_0 Tree_0) (projNode_1 Nat_0) (projNode_2 Tree_0)) (Nil_0 ))))
(declare-fun diseqTree_0 (Tree_0 Tree_0) Bool)
(declare-fun projNode_3 (Tree_0 Tree_0) Bool)
(declare-fun projNode_4 (Nat_0 Tree_0) Bool)
(declare-fun projNode_5 (Tree_0 Tree_0) Bool)
(declare-fun isNode_0 (Tree_0) Bool)
(declare-fun isNil_0 (Tree_0) Bool)
(assert (forall ((x_71 Tree_0) (x_68 Tree_0) (x_69 Nat_0) (x_70 Tree_0))
	(=> (= x_71 (Node_0 x_68 x_69 x_70))
	    (projNode_3 x_68 x_71))))
(assert (forall ((x_71 Tree_0) (x_68 Tree_0) (x_69 Nat_0) (x_70 Tree_0))
	(=> (= x_71 (Node_0 x_68 x_69 x_70))
	    (projNode_4 x_69 x_71))))
(assert (forall ((x_71 Tree_0) (x_68 Tree_0) (x_69 Nat_0) (x_70 Tree_0))
	(=> (= x_71 (Node_0 x_68 x_69 x_70))
	    (projNode_5 x_70 x_71))))
(assert (forall ((x_73 Tree_0) (x_74 Nat_0) (x_75 Tree_0))
	(isNode_0 (Node_0 x_73 x_74 x_75))))
(assert (isNil_0 Nil_0))
(assert (forall ((x_76 Tree_0) (x_77 Nat_0) (x_78 Tree_0))
	(diseqTree_0 (Node_0 x_76 x_77 x_78) Nil_0)))
(assert (forall ((x_79 Tree_0) (x_80 Nat_0) (x_81 Tree_0))
	(diseqTree_0 Nil_0 (Node_0 x_79 x_80 x_81))))
(assert (forall ((x_82 Tree_0) (x_83 Nat_0) (x_84 Tree_0) (x_85 Tree_0) (x_86 Nat_0) (x_87 Tree_0))
	(=> (diseqTree_0 x_82 x_85)
	    (diseqTree_0 (Node_0 x_82 x_83 x_84) (Node_0 x_85 x_86 x_87)))))
(assert (forall ((x_82 Tree_0) (x_83 Nat_0) (x_84 Tree_0) (x_85 Tree_0) (x_86 Nat_0) (x_87 Tree_0))
	(=> (diseqNat_0 x_83 x_86)
	    (diseqTree_0 (Node_0 x_82 x_83 x_84) (Node_0 x_85 x_86 x_87)))))
(assert (forall ((x_82 Tree_0) (x_83 Nat_0) (x_84 Tree_0) (x_85 Tree_0) (x_86 Nat_0) (x_87 Tree_0))
	(=> (diseqTree_0 x_84 x_87)
	    (diseqTree_0 (Node_0 x_82 x_83 x_84) (Node_0 x_85 x_86 x_87)))))
(declare-fun swap_0 (Tree_0 Nat_0 Nat_0 Tree_0) Bool)
(assert (forall ((x_0 Nat_0) (y_0 Nat_0) (z_0 Tree_0) (x_6 Tree_0))
	(=>	(and (= x_6 Nil_0)
			(= z_0 Nil_0))
		(swap_0 x_6 x_0 y_0 z_0))))
(assert (forall ((x_0 Nat_0) (y_0 Nat_0) (z_0 Tree_0) (p_0 Tree_0) (x_1 Nat_0) (q_0 Tree_0) (x_7 Tree_0) (x_8 Tree_0) (x_9 Tree_0))
	(=>	(and (= x_7 (Node_0 x_8 y_0 x_9))
			(swap_0 x_8 x_0 y_0 p_0)
			(swap_0 x_9 x_0 y_0 q_0)
			(= z_0 (Node_0 p_0 x_1 q_0))
			(= x_1 x_0))
		(swap_0 x_7 x_0 y_0 z_0))))
(assert (forall ((x_0 Nat_0) (y_0 Nat_0) (z_0 Tree_0) (p_0 Tree_0) (x_1 Nat_0) (q_0 Tree_0) (x_10 Tree_0) (x_11 Tree_0) (x_12 Tree_0))
	(=>	(and (= x_10 (Node_0 x_11 x_0 x_12))
			(swap_0 x_11 x_0 y_0 p_0)
			(swap_0 x_12 x_0 y_0 q_0)
			(= z_0 (Node_0 p_0 x_1 q_0))
			(diseqNat_0 x_1 x_0)
			(= x_1 y_0))
		(swap_0 x_10 x_0 y_0 z_0))))
(assert (forall ((x_0 Nat_0) (y_0 Nat_0) (z_0 Tree_0) (p_0 Tree_0) (x_1 Nat_0) (q_0 Tree_0) (x_13 Tree_0) (x_14 Tree_0) (x_15 Tree_0))
	(=>	(and (= x_13 (Node_0 x_14 y_0 x_15))
			(swap_0 x_14 x_0 y_0 p_0)
			(swap_0 x_15 x_0 y_0 q_0)
			(= z_0 (Node_0 p_0 x_1 q_0))
			(= x_1 x_0))
		(swap_0 x_13 x_0 y_0 z_0))))
(assert (forall ((x_0 Nat_0) (y_0 Nat_0) (z_0 Tree_0) (p_0 Tree_0) (x_1 Nat_0) (q_0 Tree_0) (x_16 Tree_0) (x_17 Tree_0) (x_18 Tree_0))
	(=>	(and (= x_16 (Node_0 x_17 x_1 x_18))
			(swap_0 x_17 x_0 y_0 p_0)
			(swap_0 x_18 x_0 y_0 q_0)
			(= z_0 (Node_0 p_0 x_1 q_0))
			(diseqNat_0 x_1 x_0)
			(diseqNat_0 x_1 y_0))
		(swap_0 x_16 x_0 y_0 z_0))))
(declare-fun elem_0 (Bool Nat_0 list_0) Bool)
(assert (forall ((x_2 Nat_0) (y_1 list_0) (z_1 Nat_0) (xs_0 list_0) (x_19 Bool) (x_20 Bool))
	(=>	(and (= x_19 (or (= z_1 x_2) x_20))
			(elem_0 x_20 x_2 xs_0)
			(= y_1 (cons_0 z_1 xs_0)))
		(elem_0 x_19 x_2 y_1))))
(assert (forall ((x_2 Nat_0) (y_1 list_0) (x_21 Bool))
	(=>	(and (= x_21 false)
			(= y_1 nil_0))
		(elem_0 x_21 x_2 y_1))))
(declare-fun x_3 (list_0 list_0 list_0) Bool)
(assert (forall ((x_4 list_0) (y_2 list_0) (z_2 Nat_0) (xs_1 list_0) (x_22 list_0) (x_23 list_0))
	(=>	(and (= x_22 (cons_0 z_2 x_23))
			(x_3 x_23 xs_1 y_2)
			(= x_4 (cons_0 z_2 xs_1)))
		(x_3 x_22 x_4 y_2))))
(assert (forall ((x_4 list_0) (y_2 list_0) (x_24 list_0))
	(=>	(and (= x_24 y_2)
			(= x_4 nil_0))
		(x_3 x_24 x_4 y_2))))
(declare-fun flatten_0 (list_0 Tree_0) Bool)
(assert (forall ((x_5 Tree_0) (x_25 list_0))
	(=>	(and (= x_25 nil_0)
			(= x_5 Nil_0))
		(flatten_0 x_25 x_5))))
(assert (forall ((x_5 Tree_0) (p_1 Tree_0) (y_3 Nat_0) (q_1 Tree_0) (x_26 list_0) (x_27 list_0) (x_28 list_0) (x_29 list_0) (x_30 list_0))
	(=>	(and (= x_26 x_30)
			(flatten_0 x_27 p_1)
			(flatten_0 x_28 q_1)
			(x_3 x_29 (cons_0 y_3 nil_0) x_28)
			(x_3 x_30 x_27 x_29)
			(= x_5 (Node_0 p_1 y_3 q_1)))
		(flatten_0 x_26 x_5))))
(assert (forall ((p_2 Tree_0) (a_0 Nat_0) (b_0 Nat_0) (x_31 Tree_0) (x_32 list_0) (x_33 Bool) (x_34 list_0) (x_35 Bool) (x_36 list_0) (x_37 Bool))
	(=>	(and (= x_33 false)
			(= x_35 true)
			(= x_37 true)
			(swap_0 x_31 a_0 b_0 p_2)
			(flatten_0 x_32 x_31)
			(elem_0 x_33 a_0 x_32)
			(flatten_0 x_34 p_2)
			(elem_0 x_35 b_0 x_34)
			(flatten_0 x_36 p_2)
			(elem_0 x_37 a_0 x_36))
		false)))
(assert (forall ((p_2 Tree_0) (a_0 Nat_0) (b_0 Nat_0) (x_38 Tree_0) (x_39 list_0) (x_40 Bool) (x_41 list_0) (x_42 Bool) (x_43 list_0) (x_44 Bool))
	(=>	(and (= x_40 false)
			(= x_42 true)
			(= x_44 true)
			(swap_0 x_38 a_0 b_0 p_2)
			(flatten_0 x_39 x_38)
			(elem_0 x_40 b_0 x_39)
			(flatten_0 x_41 p_2)
			(elem_0 x_42 b_0 x_41)
			(flatten_0 x_43 p_2)
			(elem_0 x_44 a_0 x_43))
		false)))
(check-sat)
