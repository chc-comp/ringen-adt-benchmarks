(set-logic HORN)
(declare-datatypes ((Nat_1 0)) (((Z_0 ) (S_0 (unS_0 Nat_1)))))
(declare-fun diseqNat_0 (Nat_1 Nat_1) Bool)
(declare-fun unS_1 (Nat_1 Nat_1) Bool)
(declare-fun isZ_0 (Nat_1) Bool)
(declare-fun isS_0 (Nat_1) Bool)
(assert (forall ((x_61 Nat_1) (x_60 Nat_1))
	(=> (= x_61 (S_0 x_60))
	    (unS_1 x_60 x_61))))
(assert (isZ_0 Z_0))
(assert (forall ((x_62 Nat_1))
	(isS_0 (S_0 x_62))))
(assert (forall ((x_63 Nat_1))
	(diseqNat_0 Z_0 (S_0 x_63))))
(assert (forall ((x_64 Nat_1))
	(diseqNat_0 (S_0 x_64) Z_0)))
(assert (forall ((x_65 Nat_1) (x_66 Nat_1))
	(=> (diseqNat_0 x_65 x_66)
	    (diseqNat_0 (S_0 x_65) (S_0 x_66)))))
(declare-fun add_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun minus_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun le_0 (Nat_1 Nat_1) Bool)
(declare-fun ge_0 (Nat_1 Nat_1) Bool)
(declare-fun lt_0 (Nat_1 Nat_1) Bool)
(declare-fun gt_0 (Nat_1 Nat_1) Bool)
(declare-fun mult_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun div_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun mod_0 (Nat_1 Nat_1 Nat_1) Bool)
(assert (forall ((y_8 Nat_1))
	(add_0 y_8 Z_0 y_8)))
(assert (forall ((x_58 Nat_1) (y_8 Nat_1) (r_2 Nat_1))
	(=> (add_0 r_2 x_58 y_8)
	    (add_0 (S_0 r_2) (S_0 x_58) y_8))))
(assert (forall ((y_8 Nat_1))
	(minus_0 Z_0 Z_0 y_8)))
(assert (forall ((x_58 Nat_1) (y_8 Nat_1) (r_2 Nat_1))
	(=> (minus_0 r_2 x_58 y_8)
	    (minus_0 (S_0 r_2) (S_0 x_58) y_8))))
(assert (forall ((y_8 Nat_1))
	(le_0 Z_0 y_8)))
(assert (forall ((x_58 Nat_1) (y_8 Nat_1))
	(=> (le_0 x_58 y_8)
	    (le_0 (S_0 x_58) (S_0 y_8)))))
(assert (forall ((y_8 Nat_1))
	(ge_0 y_8 Z_0)))
(assert (forall ((x_58 Nat_1) (y_8 Nat_1))
	(=> (ge_0 x_58 y_8)
	    (ge_0 (S_0 x_58) (S_0 y_8)))))
(assert (forall ((y_8 Nat_1))
	(lt_0 Z_0 (S_0 y_8))))
(assert (forall ((x_58 Nat_1) (y_8 Nat_1))
	(=> (lt_0 x_58 y_8)
	    (lt_0 (S_0 x_58) (S_0 y_8)))))
(assert (forall ((y_8 Nat_1))
	(gt_0 (S_0 y_8) Z_0)))
(assert (forall ((x_58 Nat_1) (y_8 Nat_1))
	(=> (gt_0 x_58 y_8)
	    (gt_0 (S_0 x_58) (S_0 y_8)))))
(assert (forall ((y_8 Nat_1))
	(mult_0 Z_0 Z_0 y_8)))
(assert (forall ((x_58 Nat_1) (y_8 Nat_1) (r_2 Nat_1) (z_5 Nat_1))
	(=>	(and (mult_0 r_2 x_58 y_8)
			(add_0 z_5 r_2 y_8))
		(mult_0 z_5 (S_0 x_58) y_8))))
(assert (forall ((x_58 Nat_1) (y_8 Nat_1))
	(=> (lt_0 x_58 y_8)
	    (div_0 Z_0 x_58 y_8))))
(assert (forall ((x_58 Nat_1) (y_8 Nat_1) (r_2 Nat_1) (z_5 Nat_1))
	(=>	(and (ge_0 x_58 y_8)
			(minus_0 z_5 x_58 y_8)
			(div_0 r_2 z_5 y_8))
		(div_0 (S_0 r_2) x_58 y_8))))
(assert (forall ((x_58 Nat_1) (y_8 Nat_1))
	(=> (lt_0 x_58 y_8)
	    (mod_0 x_58 x_58 y_8))))
(assert (forall ((x_58 Nat_1) (y_8 Nat_1) (r_2 Nat_1) (z_5 Nat_1))
	(=>	(and (ge_0 x_58 y_8)
			(minus_0 z_5 x_58 y_8)
			(mod_0 r_2 z_5 y_8))
		(mod_0 r_2 x_58 y_8))))
(declare-datatypes ((Nat_0 0)) (((zero_0 ) (succ_0 (p_0 Nat_0)))))
(declare-fun diseqNat_1 (Nat_0 Nat_0) Bool)
(declare-fun p_1 (Nat_0 Nat_0) Bool)
(declare-fun iszero_0 (Nat_0) Bool)
(declare-fun issucc_0 (Nat_0) Bool)
(assert (forall ((x_69 Nat_0) (x_68 Nat_0))
	(=> (= x_69 (succ_0 x_68))
	    (p_1 x_68 x_69))))
(assert (iszero_0 zero_0))
(assert (forall ((x_70 Nat_0))
	(issucc_0 (succ_0 x_70))))
(assert (forall ((x_71 Nat_0))
	(diseqNat_1 zero_0 (succ_0 x_71))))
(assert (forall ((x_72 Nat_0))
	(diseqNat_1 (succ_0 x_72) zero_0)))
(assert (forall ((x_73 Nat_0) (x_74 Nat_0))
	(=> (diseqNat_1 x_73 x_74)
	    (diseqNat_1 (succ_0 x_73) (succ_0 x_74)))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_2 (Nat_0 list_0) Bool)
(declare-fun tail_2 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_78 list_0) (x_76 Nat_0) (x_77 list_0))
	(=> (= x_78 (cons_0 x_76 x_77))
	    (head_2 x_76 x_78))))
(assert (forall ((x_78 list_0) (x_76 Nat_0) (x_77 list_0))
	(=> (= x_78 (cons_0 x_76 x_77))
	    (tail_2 x_77 x_78))))
(assert (isnil_0 nil_0))
(assert (forall ((x_79 Nat_0) (x_80 list_0))
	(iscons_0 (cons_0 x_79 x_80))))
(assert (forall ((x_81 Nat_0) (x_82 list_0))
	(diseqlist_0 nil_0 (cons_0 x_81 x_82))))
(assert (forall ((x_83 Nat_0) (x_84 list_0))
	(diseqlist_0 (cons_0 x_83 x_84) nil_0)))
(assert (forall ((x_85 Nat_0) (x_86 list_0) (x_87 Nat_0) (x_88 list_0))
	(=> (diseqNat_1 x_85 x_87)
	    (diseqlist_0 (cons_0 x_85 x_86) (cons_0 x_87 x_88)))))
(assert (forall ((x_85 Nat_0) (x_86 list_0) (x_87 Nat_0) (x_88 list_0))
	(=> (diseqlist_0 x_86 x_88)
	    (diseqlist_0 (cons_0 x_85 x_86) (cons_0 x_87 x_88)))))
(declare-datatypes ((Heap_0 0)) (((Node_0 (projNode_0 Heap_0) (projNode_1 Nat_0) (projNode_2 Heap_0)) (Nil_0 ))))
(declare-fun diseqHeap_0 (Heap_0 Heap_0) Bool)
(declare-fun projNode_3 (Heap_0 Heap_0) Bool)
(declare-fun projNode_4 (Nat_0 Heap_0) Bool)
(declare-fun projNode_5 (Heap_0 Heap_0) Bool)
(declare-fun isNode_0 (Heap_0) Bool)
(declare-fun isNil_0 (Heap_0) Bool)
(assert (forall ((x_92 Heap_0) (x_89 Heap_0) (x_90 Nat_0) (x_91 Heap_0))
	(=> (= x_92 (Node_0 x_89 x_90 x_91))
	    (projNode_3 x_89 x_92))))
(assert (forall ((x_92 Heap_0) (x_89 Heap_0) (x_90 Nat_0) (x_91 Heap_0))
	(=> (= x_92 (Node_0 x_89 x_90 x_91))
	    (projNode_4 x_90 x_92))))
(assert (forall ((x_92 Heap_0) (x_89 Heap_0) (x_90 Nat_0) (x_91 Heap_0))
	(=> (= x_92 (Node_0 x_89 x_90 x_91))
	    (projNode_5 x_91 x_92))))
(assert (forall ((x_94 Heap_0) (x_95 Nat_0) (x_96 Heap_0))
	(isNode_0 (Node_0 x_94 x_95 x_96))))
(assert (isNil_0 Nil_0))
(assert (forall ((x_97 Heap_0) (x_98 Nat_0) (x_99 Heap_0))
	(diseqHeap_0 (Node_0 x_97 x_98 x_99) Nil_0)))
(assert (forall ((x_100 Heap_0) (x_101 Nat_0) (x_102 Heap_0))
	(diseqHeap_0 Nil_0 (Node_0 x_100 x_101 x_102))))
(assert (forall ((x_103 Heap_0) (x_104 Nat_0) (x_105 Heap_0) (x_106 Heap_0) (x_107 Nat_0) (x_108 Heap_0))
	(=> (diseqHeap_0 x_103 x_106)
	    (diseqHeap_0 (Node_0 x_103 x_104 x_105) (Node_0 x_106 x_107 x_108)))))
(assert (forall ((x_103 Heap_0) (x_104 Nat_0) (x_105 Heap_0) (x_106 Heap_0) (x_107 Nat_0) (x_108 Heap_0))
	(=> (diseqNat_1 x_104 x_107)
	    (diseqHeap_0 (Node_0 x_103 x_104 x_105) (Node_0 x_106 x_107 x_108)))))
(assert (forall ((x_103 Heap_0) (x_104 Nat_0) (x_105 Heap_0) (x_106 Heap_0) (x_107 Nat_0) (x_108 Heap_0))
	(=> (diseqHeap_0 x_105 x_108)
	    (diseqHeap_0 (Node_0 x_103 x_104 x_105) (Node_0 x_106 x_107 x_108)))))
(declare-datatypes ((list_1 0)) (((nil_1 ) (cons_1 (head_1 Heap_0) (tail_1 list_1)))))
(declare-fun diseqlist_1 (list_1 list_1) Bool)
(declare-fun head_3 (Heap_0 list_1) Bool)
(declare-fun tail_3 (list_1 list_1) Bool)
(declare-fun isnil_1 (list_1) Bool)
(declare-fun iscons_1 (list_1) Bool)
(assert (forall ((x_112 list_1) (x_110 Heap_0) (x_111 list_1))
	(=> (= x_112 (cons_1 x_110 x_111))
	    (head_3 x_110 x_112))))
(assert (forall ((x_112 list_1) (x_110 Heap_0) (x_111 list_1))
	(=> (= x_112 (cons_1 x_110 x_111))
	    (tail_3 x_111 x_112))))
(assert (isnil_1 nil_1))
(assert (forall ((x_113 Heap_0) (x_114 list_1))
	(iscons_1 (cons_1 x_113 x_114))))
(assert (forall ((x_115 Heap_0) (x_116 list_1))
	(diseqlist_1 nil_1 (cons_1 x_115 x_116))))
(assert (forall ((x_117 Heap_0) (x_118 list_1))
	(diseqlist_1 (cons_1 x_117 x_118) nil_1)))
(assert (forall ((x_119 Heap_0) (x_120 list_1) (x_121 Heap_0) (x_122 list_1))
	(=> (diseqHeap_0 x_119 x_121)
	    (diseqlist_1 (cons_1 x_119 x_120) (cons_1 x_121 x_122)))))
(assert (forall ((x_119 Heap_0) (x_120 list_1) (x_121 Heap_0) (x_122 list_1))
	(=> (diseqlist_1 x_120 x_122)
	    (diseqlist_1 (cons_1 x_119 x_120) (cons_1 x_121 x_122)))))
(declare-fun toHeap_0 (list_1 list_0) Bool)
(assert (forall ((x_0 list_0) (y_0 Nat_0) (z_0 list_0) (x_16 list_1) (x_17 list_1))
	(=>	(and (= x_16 (cons_1 (Node_0 Nil_0 y_0 Nil_0) x_17))
			(toHeap_0 x_17 z_0)
			(= x_0 (cons_0 y_0 z_0)))
		(toHeap_0 x_16 x_0))))
(assert (forall ((x_0 list_0) (x_18 list_1))
	(=>	(and (= x_18 nil_1)
			(= x_0 nil_0))
		(toHeap_0 x_18 x_0))))
(declare-fun leq_0 (Bool Nat_0 Nat_0) Bool)
(assert (forall ((x_1 Nat_0) (y_1 Nat_0) (z_1 Nat_0) (x_2 Nat_0) (x_19 Bool) (x_20 Bool))
	(=>	(and (= x_19 x_20)
			(leq_0 x_20 z_1 x_2)
			(= x_1 (succ_0 z_1))
			(= y_1 (succ_0 x_2)))
		(leq_0 x_19 x_1 y_1))))
(assert (forall ((x_1 Nat_0) (y_1 Nat_0) (z_1 Nat_0) (x_21 Bool))
	(=>	(and (= x_21 false)
			(= x_1 (succ_0 z_1))
			(= y_1 zero_0))
		(leq_0 x_21 x_1 y_1))))
(assert (forall ((x_1 Nat_0) (y_1 Nat_0) (x_22 Bool))
	(=>	(and (= x_22 true)
			(= x_1 zero_0))
		(leq_0 x_22 x_1 y_1))))
(declare-fun ordered_0 (Bool list_0) Bool)
(assert (forall ((x_3 list_0) (y_2 Nat_0) (z_2 list_0) (y_3 Nat_0) (xs_0 list_0) (x_23 Bool) (x_24 Bool) (x_25 Bool))
	(=>	(and (= x_23 (and x_24 x_25))
			(leq_0 x_24 y_2 y_3)
			(ordered_0 x_25 (cons_0 y_3 xs_0))
			(= x_3 (cons_0 y_2 z_2))
			(= z_2 (cons_0 y_3 xs_0)))
		(ordered_0 x_23 x_3))))
(assert (forall ((x_3 list_0) (y_2 Nat_0) (z_2 list_0) (x_26 Bool))
	(=>	(and (= x_26 true)
			(= x_3 (cons_0 y_2 z_2))
			(= z_2 nil_0))
		(ordered_0 x_26 x_3))))
(assert (forall ((x_3 list_0) (x_27 Bool))
	(=>	(and (= x_27 true)
			(= x_3 nil_0))
		(ordered_0 x_27 x_3))))
(declare-fun hmerge_0 (Heap_0 Heap_0 Heap_0) Bool)
(assert (forall ((x_4 Heap_0) (y_4 Heap_0) (x_28 Heap_0))
	(=>	(and (= x_28 y_4)
			(= x_4 Nil_0))
		(hmerge_0 x_28 x_4 y_4))))
(assert (forall ((x_4 Heap_0) (y_4 Heap_0) (z_3 Heap_0) (x_5 Nat_0) (x_6 Heap_0) (x_29 Heap_0))
	(=>	(and (= x_29 (Node_0 z_3 x_5 x_6))
			(= x_4 (Node_0 z_3 x_5 x_6))
			(= y_4 Nil_0))
		(hmerge_0 x_29 x_4 y_4))))
(assert (forall ((x_4 Heap_0) (y_4 Heap_0) (z_3 Heap_0) (x_5 Nat_0) (x_6 Heap_0) (x_7 Heap_0) (x_8 Nat_0) (x_9 Heap_0) (x_31 Heap_0) (x_32 Heap_0) (x_30 Bool))
	(=>	(and (= x_31 (Node_0 x_32 x_5 z_3))
			(hmerge_0 x_32 x_6 (Node_0 x_7 x_8 x_9))
			(= x_4 (Node_0 z_3 x_5 x_6))
			(= y_4 (Node_0 x_7 x_8 x_9))
			(= x_30 true)
			(leq_0 x_30 x_5 x_8))
		(hmerge_0 x_31 x_4 y_4))))
(assert (forall ((x_4 Heap_0) (y_4 Heap_0) (z_3 Heap_0) (x_5 Nat_0) (x_6 Heap_0) (x_7 Heap_0) (x_8 Nat_0) (x_9 Heap_0) (x_34 Heap_0) (x_35 Heap_0) (x_33 Bool))
	(=>	(and (= x_34 (Node_0 x_35 x_8 x_7))
			(hmerge_0 x_35 (Node_0 z_3 x_5 x_6) x_9)
			(= x_4 (Node_0 z_3 x_5 x_6))
			(= y_4 (Node_0 x_7 x_8 x_9))
			(= x_33 false)
			(leq_0 x_33 x_5 x_8))
		(hmerge_0 x_34 x_4 y_4))))
(declare-fun hpairwise_0 (list_1 list_1) Bool)
(assert (forall ((x_10 list_1) (q_0 Heap_0) (y_5 list_1) (r_0 Heap_0) (qs_0 list_1) (x_36 list_1) (x_37 Heap_0) (x_38 list_1))
	(=>	(and (= x_36 (cons_1 x_37 x_38))
			(hmerge_0 x_37 q_0 r_0)
			(hpairwise_0 x_38 qs_0)
			(= x_10 (cons_1 q_0 y_5))
			(= y_5 (cons_1 r_0 qs_0)))
		(hpairwise_0 x_36 x_10))))
(assert (forall ((x_10 list_1) (q_0 Heap_0) (y_5 list_1) (x_39 list_1))
	(=>	(and (= x_39 (cons_1 q_0 nil_1))
			(= x_10 (cons_1 q_0 y_5))
			(= y_5 nil_1))
		(hpairwise_0 x_39 x_10))))
(assert (forall ((x_10 list_1) (x_40 list_1))
	(=>	(and (= x_40 nil_1)
			(= x_10 nil_1))
		(hpairwise_0 x_40 x_10))))
(declare-fun hmerging_0 (Heap_0 list_1) Bool)
(assert (forall ((x_11 list_1) (q_1 Heap_0) (y_6 list_1) (z_4 Heap_0) (x_12 list_1) (x_41 Heap_0) (x_42 list_1) (x_43 Heap_0))
	(=>	(and (= x_41 x_43)
			(hpairwise_0 x_42 (cons_1 q_1 (cons_1 z_4 x_12)))
			(hmerging_0 x_43 x_42)
			(= x_11 (cons_1 q_1 y_6))
			(= y_6 (cons_1 z_4 x_12)))
		(hmerging_0 x_41 x_11))))
(assert (forall ((x_11 list_1) (q_1 Heap_0) (y_6 list_1) (x_44 Heap_0))
	(=>	(and (= x_44 q_1)
			(= x_11 (cons_1 q_1 y_6))
			(= y_6 nil_1))
		(hmerging_0 x_44 x_11))))
(assert (forall ((x_11 list_1) (x_45 Heap_0))
	(=>	(and (= x_45 Nil_0)
			(= x_11 nil_1))
		(hmerging_0 x_45 x_11))))
(declare-fun toHeap_1 (Heap_0 list_0) Bool)
(assert (forall ((x_13 list_0) (x_46 Heap_0) (x_47 list_1) (x_48 Heap_0))
	(=>	(and (= x_46 x_48)
			(toHeap_0 x_47 x_13)
			(hmerging_0 x_48 x_47))
		(toHeap_1 x_46 x_13))))
(declare-fun toList_0 (list_0 Heap_0) Bool)
(assert (forall ((x_14 Heap_0) (x_49 list_0))
	(=>	(and (= x_49 nil_0)
			(= x_14 Nil_0))
		(toList_0 x_49 x_14))))
(assert (forall ((x_14 Heap_0) (q_2 Heap_0) (y_7 Nat_0) (r_1 Heap_0) (x_50 list_0) (x_51 Heap_0) (x_52 list_0))
	(=>	(and (= x_50 (cons_0 y_7 x_52))
			(hmerge_0 x_51 q_2 r_1)
			(toList_0 x_52 x_51)
			(= x_14 (Node_0 q_2 y_7 r_1)))
		(toList_0 x_50 x_14))))
(declare-fun hsort_0 (list_0 list_0) Bool)
(assert (forall ((x_15 list_0) (x_53 list_0) (x_54 Heap_0) (x_55 list_0))
	(=>	(and (= x_53 x_55)
			(toHeap_1 x_54 x_15)
			(toList_0 x_55 x_54))
		(hsort_0 x_53 x_15))))
(assert (forall ((xs_1 list_0) (x_56 list_0) (x_57 Bool))
	(=>	(and (= x_57 false)
			(hsort_0 x_56 xs_1)
			(ordered_0 x_57 x_56))
		false)))
(check-sat)
