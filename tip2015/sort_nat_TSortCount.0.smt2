(set-logic HORN)
(declare-datatypes ((Nat_1 0)) (((Z_0 ) (S_0 (unS_0 Nat_1)))))
(declare-fun diseqNat_0 (Nat_1 Nat_1) Bool)
(declare-fun unS_1 (Nat_1 Nat_1) Bool)
(declare-fun isZ_0 (Nat_1) Bool)
(declare-fun isS_0 (Nat_1) Bool)
(assert (forall ((x_58 Nat_1) (x_57 Nat_1))
	(=> (= x_58 (S_0 x_57))
	    (unS_1 x_57 x_58))))
(assert (isZ_0 Z_0))
(assert (forall ((x_59 Nat_1))
	(isS_0 (S_0 x_59))))
(assert (forall ((x_60 Nat_1))
	(diseqNat_0 Z_0 (S_0 x_60))))
(assert (forall ((x_61 Nat_1))
	(diseqNat_0 (S_0 x_61) Z_0)))
(assert (forall ((x_62 Nat_1) (x_63 Nat_1))
	(=> (diseqNat_0 x_62 x_63)
	    (diseqNat_0 (S_0 x_62) (S_0 x_63)))))
(declare-fun add_1 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun minus_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun le_0 (Nat_1 Nat_1) Bool)
(declare-fun ge_0 (Nat_1 Nat_1) Bool)
(declare-fun lt_0 (Nat_1 Nat_1) Bool)
(declare-fun gt_0 (Nat_1 Nat_1) Bool)
(declare-fun mult_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun div_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun mod_0 (Nat_1 Nat_1 Nat_1) Bool)
(assert (forall ((y_8 Nat_1))
	(add_1 y_8 Z_0 y_8)))
(assert (forall ((x_55 Nat_1) (y_8 Nat_1) (r_2 Nat_1))
	(=> (add_1 r_2 x_55 y_8)
	    (add_1 (S_0 r_2) (S_0 x_55) y_8))))
(assert (forall ((y_8 Nat_1))
	(minus_0 Z_0 Z_0 y_8)))
(assert (forall ((x_55 Nat_1) (y_8 Nat_1) (r_2 Nat_1))
	(=> (minus_0 r_2 x_55 y_8)
	    (minus_0 (S_0 r_2) (S_0 x_55) y_8))))
(assert (forall ((y_8 Nat_1))
	(le_0 Z_0 y_8)))
(assert (forall ((x_55 Nat_1) (y_8 Nat_1))
	(=> (le_0 x_55 y_8)
	    (le_0 (S_0 x_55) (S_0 y_8)))))
(assert (forall ((y_8 Nat_1))
	(ge_0 y_8 Z_0)))
(assert (forall ((x_55 Nat_1) (y_8 Nat_1))
	(=> (ge_0 x_55 y_8)
	    (ge_0 (S_0 x_55) (S_0 y_8)))))
(assert (forall ((y_8 Nat_1))
	(lt_0 Z_0 (S_0 y_8))))
(assert (forall ((x_55 Nat_1) (y_8 Nat_1))
	(=> (lt_0 x_55 y_8)
	    (lt_0 (S_0 x_55) (S_0 y_8)))))
(assert (forall ((y_8 Nat_1))
	(gt_0 (S_0 y_8) Z_0)))
(assert (forall ((x_55 Nat_1) (y_8 Nat_1))
	(=> (gt_0 x_55 y_8)
	    (gt_0 (S_0 x_55) (S_0 y_8)))))
(assert (forall ((y_8 Nat_1))
	(mult_0 Z_0 Z_0 y_8)))
(assert (forall ((x_55 Nat_1) (y_8 Nat_1) (r_2 Nat_1) (z_6 Nat_1))
	(=>	(and (mult_0 r_2 x_55 y_8)
			(add_1 z_6 r_2 y_8))
		(mult_0 z_6 (S_0 x_55) y_8))))
(assert (forall ((x_55 Nat_1) (y_8 Nat_1))
	(=> (lt_0 x_55 y_8)
	    (div_0 Z_0 x_55 y_8))))
(assert (forall ((x_55 Nat_1) (y_8 Nat_1) (r_2 Nat_1) (z_6 Nat_1))
	(=>	(and (ge_0 x_55 y_8)
			(minus_0 z_6 x_55 y_8)
			(div_0 r_2 z_6 y_8))
		(div_0 (S_0 r_2) x_55 y_8))))
(assert (forall ((x_55 Nat_1) (y_8 Nat_1))
	(=> (lt_0 x_55 y_8)
	    (mod_0 x_55 x_55 y_8))))
(assert (forall ((x_55 Nat_1) (y_8 Nat_1) (r_2 Nat_1) (z_6 Nat_1))
	(=>	(and (ge_0 x_55 y_8)
			(minus_0 z_6 x_55 y_8)
			(mod_0 r_2 z_6 y_8))
		(mod_0 r_2 x_55 y_8))))
(declare-datatypes ((Nat_0 0)) (((zero_0 ) (succ_0 (p_0 Nat_0)))))
(declare-fun diseqNat_1 (Nat_0 Nat_0) Bool)
(declare-fun p_1 (Nat_0 Nat_0) Bool)
(declare-fun iszero_0 (Nat_0) Bool)
(declare-fun issucc_0 (Nat_0) Bool)
(assert (forall ((x_66 Nat_0) (x_65 Nat_0))
	(=> (= x_66 (succ_0 x_65))
	    (p_1 x_65 x_66))))
(assert (iszero_0 zero_0))
(assert (forall ((x_67 Nat_0))
	(issucc_0 (succ_0 x_67))))
(assert (forall ((x_68 Nat_0))
	(diseqNat_1 zero_0 (succ_0 x_68))))
(assert (forall ((x_69 Nat_0))
	(diseqNat_1 (succ_0 x_69) zero_0)))
(assert (forall ((x_70 Nat_0) (x_71 Nat_0))
	(=> (diseqNat_1 x_70 x_71)
	    (diseqNat_1 (succ_0 x_70) (succ_0 x_71)))))
(declare-datatypes ((Tree_0 0)) (((TNode_0 (projTNode_0 Tree_0) (projTNode_1 Nat_0) (projTNode_2 Tree_0)) (TNil_0 ))))
(declare-fun diseqTree_0 (Tree_0 Tree_0) Bool)
(declare-fun projTNode_3 (Tree_0 Tree_0) Bool)
(declare-fun projTNode_4 (Nat_0 Tree_0) Bool)
(declare-fun projTNode_5 (Tree_0 Tree_0) Bool)
(declare-fun isTNode_0 (Tree_0) Bool)
(declare-fun isTNil_0 (Tree_0) Bool)
(assert (forall ((x_75 Tree_0) (x_72 Tree_0) (x_73 Nat_0) (x_74 Tree_0))
	(=> (= x_75 (TNode_0 x_72 x_73 x_74))
	    (projTNode_3 x_72 x_75))))
(assert (forall ((x_75 Tree_0) (x_72 Tree_0) (x_73 Nat_0) (x_74 Tree_0))
	(=> (= x_75 (TNode_0 x_72 x_73 x_74))
	    (projTNode_4 x_73 x_75))))
(assert (forall ((x_75 Tree_0) (x_72 Tree_0) (x_73 Nat_0) (x_74 Tree_0))
	(=> (= x_75 (TNode_0 x_72 x_73 x_74))
	    (projTNode_5 x_74 x_75))))
(assert (forall ((x_77 Tree_0) (x_78 Nat_0) (x_79 Tree_0))
	(isTNode_0 (TNode_0 x_77 x_78 x_79))))
(assert (isTNil_0 TNil_0))
(assert (forall ((x_80 Tree_0) (x_81 Nat_0) (x_82 Tree_0))
	(diseqTree_0 (TNode_0 x_80 x_81 x_82) TNil_0)))
(assert (forall ((x_83 Tree_0) (x_84 Nat_0) (x_85 Tree_0))
	(diseqTree_0 TNil_0 (TNode_0 x_83 x_84 x_85))))
(assert (forall ((x_86 Tree_0) (x_87 Nat_0) (x_88 Tree_0) (x_89 Tree_0) (x_90 Nat_0) (x_91 Tree_0))
	(=> (diseqTree_0 x_86 x_89)
	    (diseqTree_0 (TNode_0 x_86 x_87 x_88) (TNode_0 x_89 x_90 x_91)))))
(assert (forall ((x_86 Tree_0) (x_87 Nat_0) (x_88 Tree_0) (x_89 Tree_0) (x_90 Nat_0) (x_91 Tree_0))
	(=> (diseqNat_1 x_87 x_90)
	    (diseqTree_0 (TNode_0 x_86 x_87 x_88) (TNode_0 x_89 x_90 x_91)))))
(assert (forall ((x_86 Tree_0) (x_87 Nat_0) (x_88 Tree_0) (x_89 Tree_0) (x_90 Nat_0) (x_91 Tree_0))
	(=> (diseqTree_0 x_88 x_91)
	    (diseqTree_0 (TNode_0 x_86 x_87 x_88) (TNode_0 x_89 x_90 x_91)))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_1 (Nat_0 list_0) Bool)
(declare-fun tail_1 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_95 list_0) (x_93 Nat_0) (x_94 list_0))
	(=> (= x_95 (cons_0 x_93 x_94))
	    (head_1 x_93 x_95))))
(assert (forall ((x_95 list_0) (x_93 Nat_0) (x_94 list_0))
	(=> (= x_95 (cons_0 x_93 x_94))
	    (tail_1 x_94 x_95))))
(assert (isnil_0 nil_0))
(assert (forall ((x_96 Nat_0) (x_97 list_0))
	(iscons_0 (cons_0 x_96 x_97))))
(assert (forall ((x_98 Nat_0) (x_99 list_0))
	(diseqlist_0 nil_0 (cons_0 x_98 x_99))))
(assert (forall ((x_100 Nat_0) (x_101 list_0))
	(diseqlist_0 (cons_0 x_100 x_101) nil_0)))
(assert (forall ((x_102 Nat_0) (x_103 list_0) (x_104 Nat_0) (x_105 list_0))
	(=> (diseqNat_1 x_102 x_104)
	    (diseqlist_0 (cons_0 x_102 x_103) (cons_0 x_104 x_105)))))
(assert (forall ((x_102 Nat_0) (x_103 list_0) (x_104 Nat_0) (x_105 list_0))
	(=> (diseqlist_0 x_103 x_105)
	    (diseqlist_0 (cons_0 x_102 x_103) (cons_0 x_104 x_105)))))
(declare-fun plus_0 (Nat_0 Nat_0 Nat_0) Bool)
(assert (forall ((x_0 Nat_0) (y_0 Nat_0) (z_0 Nat_0) (x_13 Nat_0) (x_14 Nat_0))
	(=>	(and (= x_13 (succ_0 x_14))
			(plus_0 x_14 z_0 y_0)
			(= x_0 (succ_0 z_0)))
		(plus_0 x_13 x_0 y_0))))
(assert (forall ((x_0 Nat_0) (y_0 Nat_0) (x_15 Nat_0))
	(=>	(and (= x_15 y_0)
			(= x_0 zero_0))
		(plus_0 x_15 x_0 y_0))))
(declare-fun leq_0 (Bool Nat_0 Nat_0) Bool)
(assert (forall ((x_1 Nat_0) (y_1 Nat_0) (z_1 Nat_0) (x_2 Nat_0) (x_16 Bool) (x_17 Bool))
	(=>	(and (= x_16 x_17)
			(leq_0 x_17 z_1 x_2)
			(= x_1 (succ_0 z_1))
			(= y_1 (succ_0 x_2)))
		(leq_0 x_16 x_1 y_1))))
(assert (forall ((x_1 Nat_0) (y_1 Nat_0) (z_1 Nat_0) (x_18 Bool))
	(=>	(and (= x_18 false)
			(= x_1 (succ_0 z_1))
			(= y_1 zero_0))
		(leq_0 x_18 x_1 y_1))))
(assert (forall ((x_1 Nat_0) (y_1 Nat_0) (x_19 Bool))
	(=>	(and (= x_19 true)
			(= x_1 zero_0))
		(leq_0 x_19 x_1 y_1))))
(declare-fun flatten_0 (list_0 Tree_0 list_0) Bool)
(assert (forall ((x_3 Tree_0) (y_2 list_0) (x_20 list_0))
	(=>	(and (= x_20 y_2)
			(= x_3 TNil_0))
		(flatten_0 x_20 x_3 y_2))))
(assert (forall ((x_3 Tree_0) (y_2 list_0) (q_0 Tree_0) (z_2 Nat_0) (r_0 Tree_0) (x_21 list_0) (x_22 list_0) (x_23 list_0))
	(=>	(and (= x_21 x_23)
			(flatten_0 x_22 r_0 y_2)
			(flatten_0 x_23 q_0 (cons_0 z_2 x_22))
			(= x_3 (TNode_0 q_0 z_2 r_0)))
		(flatten_0 x_21 x_3 y_2))))
(declare-fun count_0 (Nat_0 Nat_0 list_0) Bool)
(assert (forall ((x_4 Nat_0) (y_3 list_0) (z_3 Nat_0) (ys_0 list_0) (x_24 Nat_0) (x_25 Nat_0) (x_26 Nat_0))
	(=>	(and (= x_24 x_26)
			(count_0 x_25 x_4 ys_0)
			(plus_0 x_26 (succ_0 zero_0) x_25)
			(= y_3 (cons_0 z_3 ys_0))
			(= x_4 z_3))
		(count_0 x_24 x_4 y_3))))
(assert (forall ((x_4 Nat_0) (y_3 list_0) (z_3 Nat_0) (ys_0 list_0) (x_27 Nat_0) (x_28 Nat_0))
	(=>	(and (= x_27 x_28)
			(count_0 x_28 x_4 ys_0)
			(= y_3 (cons_0 z_3 ys_0))
			(diseqNat_1 x_4 z_3))
		(count_0 x_27 x_4 y_3))))
(assert (forall ((x_4 Nat_0) (y_3 list_0) (x_29 Nat_0))
	(=>	(and (= x_29 zero_0)
			(= y_3 nil_0))
		(count_0 x_29 x_4 y_3))))
(declare-fun add_0 (Tree_0 Nat_0 Tree_0) Bool)
(assert (forall ((x_5 Nat_0) (y_4 Tree_0) (x_30 Tree_0))
	(=>	(and (= x_30 (TNode_0 TNil_0 x_5 TNil_0))
			(= y_4 TNil_0))
		(add_0 x_30 x_5 y_4))))
(assert (forall ((x_5 Nat_0) (y_4 Tree_0) (q_1 Tree_0) (z_4 Nat_0) (r_1 Tree_0) (x_32 Tree_0) (x_33 Tree_0) (x_31 Bool))
	(=>	(and (= x_32 (TNode_0 x_33 z_4 r_1))
			(add_0 x_33 x_5 q_1)
			(= y_4 (TNode_0 q_1 z_4 r_1))
			(= x_31 true)
			(leq_0 x_31 x_5 z_4))
		(add_0 x_32 x_5 y_4))))
(assert (forall ((x_5 Nat_0) (y_4 Tree_0) (q_1 Tree_0) (z_4 Nat_0) (r_1 Tree_0) (x_35 Tree_0) (x_36 Tree_0) (x_34 Bool))
	(=>	(and (= x_35 (TNode_0 q_1 z_4 x_36))
			(add_0 x_36 x_5 r_1)
			(= y_4 (TNode_0 q_1 z_4 r_1))
			(= x_34 false)
			(leq_0 x_34 x_5 z_4))
		(add_0 x_35 x_5 y_4))))
(declare-fun toTree_0 (Tree_0 list_0) Bool)
(assert (forall ((x_6 list_0) (y_5 Nat_0) (xs_0 list_0) (x_37 Tree_0) (x_38 Tree_0) (x_39 Tree_0))
	(=>	(and (= x_37 x_39)
			(toTree_0 x_38 xs_0)
			(add_0 x_39 y_5 x_38)
			(= x_6 (cons_0 y_5 xs_0)))
		(toTree_0 x_37 x_6))))
(assert (forall ((x_6 list_0) (x_40 Tree_0))
	(=>	(and (= x_40 TNil_0)
			(= x_6 nil_0))
		(toTree_0 x_40 x_6))))
(declare-fun tsort_0 (list_0 list_0) Bool)
(assert (forall ((x_7 list_0) (x_41 list_0) (x_42 Tree_0) (x_43 list_0))
	(=>	(and (= x_41 x_43)
			(toTree_0 x_42 x_7)
			(flatten_0 x_43 x_42 nil_0))
		(tsort_0 x_41 x_7))))
(assert (forall ((x_8 Nat_0) (y_6 Nat_0) (z_5 Nat_0) (x_44 Nat_0) (x_45 Nat_0) (x_46 Nat_0) (x_47 Nat_0))
	(=>	(and (diseqNat_1 x_45 x_47)
			(plus_0 x_44 y_6 z_5)
			(plus_0 x_45 x_8 x_44)
			(plus_0 x_46 x_8 y_6)
			(plus_0 x_47 x_46 z_5))
		false)))
(assert (forall ((x_9 Nat_0) (y_7 Nat_0) (x_48 Nat_0) (x_49 Nat_0))
	(=>	(and (diseqNat_1 x_48 x_49)
			(plus_0 x_48 x_9 y_7)
			(plus_0 x_49 y_7 x_9))
		false)))
(assert (forall ((x_10 Nat_0) (x_50 Nat_0))
	(=>	(and (diseqNat_1 x_50 x_10)
			(plus_0 x_50 x_10 zero_0))
		false)))
(assert (forall ((x_11 Nat_0) (x_51 Nat_0))
	(=>	(and (diseqNat_1 x_51 x_11)
			(plus_0 x_51 zero_0 x_11))
		false)))
(assert (forall ((x_12 Nat_0) (xs_1 list_0) (x_52 list_0) (x_53 Nat_0) (x_54 Nat_0))
	(=>	(and (diseqNat_1 x_53 x_54)
			(tsort_0 x_52 xs_1)
			(count_0 x_53 x_12 x_52)
			(count_0 x_54 x_12 xs_1))
		false)))
(check-sat)
