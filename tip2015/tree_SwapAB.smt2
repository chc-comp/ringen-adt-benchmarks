(set-logic HORN)
(declare-datatypes ((Nat_0 0)) (((Z_3 ) (Z_4 (unS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-datatypes ((Bool_0 0)) (((false_0 ) (true_0 ))))
(declare-fun diseqBool_0 (Bool_0 Bool_0) Bool)
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-datatypes ((Tree_0 0)) (((Node_0 (projNode_0 Tree_0) (projNode_1 Nat_0) (projNode_2 Tree_0)) (Nil_1 ))))
(declare-fun swap_0 (Tree_0 Nat_0 Nat_0 Tree_0) Bool)
(declare-fun elem_0 (Bool_0 Nat_0 list_0) Bool)
(declare-fun x_3 (list_0 list_0 list_0) Bool)
(declare-fun flatten_0 (list_0 Tree_0) Bool)
(assert (forall ((x_51 Nat_0))
	(diseqNat_0 Z_3 (Z_4 x_51))))
(assert (forall ((x_52 Nat_0))
	(diseqNat_0 (Z_4 x_52) Z_3)))
(assert (forall ((x_53 Nat_0) (x_54 Nat_0))
	(=> (diseqNat_0 x_53 x_54) (diseqNat_0 (Z_4 x_53) (Z_4 x_54)))))
(assert (diseqBool_0 false_0 true_0))
(assert (diseqBool_0 true_0 false_0))
(assert (forall ((x_0 Nat_0) (y_0 Nat_0))
	(swap_0 Nil_1 x_0 y_0 Nil_1)))
(assert (forall ((x_8 Tree_0) (x_9 Tree_0) (p_0 Tree_0) (q_0 Tree_0) (x_0 Nat_0) (y_0 Nat_0))
	(=> (and (swap_0 x_8 x_0 y_0 p_0) (swap_0 x_9 x_0 y_0 q_0)) (swap_0 (Node_0 x_8 y_0 x_9) x_0 y_0 (Node_0 p_0 x_0 q_0)))))
(assert (forall ((x_11 Tree_0) (x_12 Tree_0) (p_0 Tree_0) (x_1 Nat_0) (q_0 Tree_0) (x_0 Nat_0))
	(=> (and (diseqNat_0 x_1 x_0) (swap_0 x_11 x_0 x_1 p_0) (swap_0 x_12 x_0 x_1 q_0)) (swap_0 (Node_0 x_11 x_0 x_12) x_0 x_1 (Node_0 p_0 x_1 q_0)))))
(assert (forall ((x_14 Tree_0) (x_15 Tree_0) (p_0 Tree_0) (q_0 Tree_0) (x_0 Nat_0) (y_0 Nat_0))
	(=> (and (swap_0 x_14 x_0 y_0 p_0) (swap_0 x_15 x_0 y_0 q_0)) (swap_0 (Node_0 x_14 y_0 x_15) x_0 y_0 (Node_0 p_0 x_0 q_0)))))
(assert (forall ((x_17 Tree_0) (x_18 Tree_0) (p_0 Tree_0) (x_1 Nat_0) (q_0 Tree_0) (x_0 Nat_0) (y_0 Nat_0))
	(=> (and (diseqNat_0 x_1 x_0) (diseqNat_0 x_1 y_0) (swap_0 x_17 x_0 y_0 p_0) (swap_0 x_18 x_0 y_0 q_0)) (swap_0 (Node_0 x_17 x_1 x_18) x_0 y_0 (Node_0 p_0 x_1 q_0)))))
(assert (forall ((xs_0 list_0) (x_2 Nat_0))
	(elem_0 true_0 x_2 (cons_0 x_2 xs_0))))
(assert (forall ((x_20 Bool_0) (z_1 Nat_0) (xs_0 list_0) (x_2 Nat_0))
	(=> (and (diseqNat_0 z_1 x_2) (elem_0 x_20 x_2 xs_0)) (elem_0 x_20 x_2 (cons_0 z_1 xs_0)))))
(assert (forall ((x_2 Nat_0))
	(elem_0 false_0 x_2 nil_0)))
(assert (forall ((x_24 list_0) (z_2 Nat_0) (xs_1 list_0) (y_2 list_0))
	(=> (x_3 x_24 xs_1 y_2) (x_3 (cons_0 z_2 x_24) (cons_0 z_2 xs_1) y_2))))
(assert (forall ((x_25 list_0))
	(x_3 x_25 nil_0 x_25)))
(assert (flatten_0 nil_0 Nil_1))
(assert (forall ((x_27 list_0) (x_28 list_0) (x_29 list_0) (x_30 list_0) (p_1 Tree_0) (y_3 Nat_0) (q_1 Tree_0))
	(=> (and (flatten_0 x_28 p_1) (flatten_0 x_29 q_1) (x_3 x_30 (cons_0 y_3 nil_0) x_29) (x_3 x_27 x_28 x_30)) (flatten_0 x_27 (Node_0 p_1 y_3 q_1)))))
(assert (forall ((x_37 list_0) (x_35 list_0) (x_32 Tree_0) (x_33 list_0) (x_34 Bool_0) (p_2 Tree_0) (a_0 Nat_0) (b_0 Nat_0))
	(=> (and (diseqBool_0 x_34 true_0) (flatten_0 x_37 p_2) (elem_0 true_0 a_0 x_37) (flatten_0 x_35 p_2) (elem_0 true_0 b_0 x_35) (swap_0 x_32 a_0 b_0 p_2) (flatten_0 x_33 x_32) (elem_0 x_34 a_0 x_33)) false)))
(assert (forall ((x_44 list_0) (x_42 list_0) (x_39 Tree_0) (x_40 list_0) (x_41 Bool_0) (p_2 Tree_0) (a_0 Nat_0) (b_0 Nat_0))
	(=> (and (diseqBool_0 x_41 true_0) (flatten_0 x_44 p_2) (elem_0 true_0 a_0 x_44) (flatten_0 x_42 p_2) (elem_0 true_0 b_0 x_42) (swap_0 x_39 a_0 b_0 p_2) (flatten_0 x_40 x_39) (elem_0 x_41 b_0 x_40)) false)))
(check-sat)
(get-model)
