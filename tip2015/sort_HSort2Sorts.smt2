(set-logic HORN)
(declare-datatypes ((Nat_0 0)) (((Z_2 ) (Z_3 (unS_0 Nat_0)))))
(declare-fun le_0 (Nat_0 Nat_0) Bool)
(declare-fun gt_0 (Nat_0 Nat_0) Bool)
(declare-datatypes ((Bool_0 0)) (((false_0 ) (true_0 ))))
(declare-fun diseqBool_0 (Bool_0 Bool_0) Bool)
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-datatypes ((Heap_0 0)) (((Node_0 (projNode_0 Heap_0) (projNode_1 Nat_0) (projNode_2 Heap_0)) (Nil_1 ))))
(declare-fun ordered_0 (Bool_0 list_0) Bool)
(declare-fun hmerge_0 (Heap_0 Heap_0 Heap_0) Bool)
(declare-fun toList_0 (list_0 Heap_0) Bool)
(declare-fun hinsert_0 (Heap_0 Nat_0 Heap_0) Bool)
(declare-fun toHeap_0 (Heap_0 list_0) Bool)
(declare-fun hsort_0 (list_0 list_0) Bool)
(assert (forall ((y_6 Nat_0))
	(le_0 Z_2 y_6)))
(assert (forall ((x_37 Nat_0) (y_6 Nat_0))
	(=> (le_0 x_37 y_6) (le_0 (Z_3 x_37) (Z_3 y_6)))))
(assert (forall ((y_6 Nat_0))
	(gt_0 (Z_3 y_6) Z_2)))
(assert (forall ((x_37 Nat_0) (y_6 Nat_0))
	(=> (gt_0 x_37 y_6) (gt_0 (Z_3 x_37) (Z_3 y_6)))))
(assert (diseqBool_0 false_0 true_0))
(assert (diseqBool_0 true_0 false_0))
(assert (forall ((x_11 Bool_0) (y_1 Nat_0) (xs_0 list_0) (y_0 Nat_0))
	(=> (and (le_0 y_0 y_1) (ordered_0 x_11 (cons_0 y_1 xs_0))) (ordered_0 x_11 (cons_0 y_0 (cons_0 y_1 xs_0))))))
(assert (forall ((y_1 Nat_0) (xs_0 list_0) (y_0 Nat_0))
	(=> (gt_0 y_0 y_1) (ordered_0 false_0 (cons_0 y_0 (cons_0 y_1 xs_0))))))
(assert (forall ((y_0 Nat_0))
	(ordered_0 true_0 (cons_0 y_0 nil_0))))
(assert (ordered_0 true_0 nil_0))
(assert (forall ((x_16 Heap_0))
	(hmerge_0 x_16 Nil_1 x_16)))
(assert (forall ((z_1 Heap_0) (x_2 Nat_0) (x_3 Heap_0))
	(hmerge_0 (Node_0 z_1 x_2 x_3) (Node_0 z_1 x_2 x_3) Nil_1)))
(assert (forall ((x_19 Heap_0) (x_4 Heap_0) (x_5 Nat_0) (x_6 Heap_0) (z_1 Heap_0) (x_2 Nat_0) (x_3 Heap_0))
	(=> (and (le_0 x_2 x_5) (hmerge_0 x_19 x_3 (Node_0 x_4 x_5 x_6))) (hmerge_0 (Node_0 x_19 x_2 z_1) (Node_0 z_1 x_2 x_3) (Node_0 x_4 x_5 x_6)))))
(assert (forall ((x_21 Heap_0) (x_4 Heap_0) (x_5 Nat_0) (x_6 Heap_0) (z_1 Heap_0) (x_2 Nat_0) (x_3 Heap_0))
	(=> (and (gt_0 x_2 x_5) (hmerge_0 x_21 (Node_0 z_1 x_2 x_3) x_6)) (hmerge_0 (Node_0 x_21 x_5 x_4) (Node_0 z_1 x_2 x_3) (Node_0 x_4 x_5 x_6)))))
(assert (toList_0 nil_0 Nil_1))
(assert (forall ((x_24 Heap_0) (x_25 list_0) (p_0 Heap_0) (y_3 Nat_0) (q_0 Heap_0))
	(=> (and (hmerge_0 x_24 p_0 q_0) (toList_0 x_25 x_24)) (toList_0 (cons_0 y_3 x_25) (Node_0 p_0 y_3 q_0)))))
(assert (forall ((x_26 Heap_0) (x_8 Nat_0) (y_4 Heap_0))
	(=> (hmerge_0 x_26 (Node_0 Nil_1 x_8 Nil_1) y_4) (hinsert_0 x_26 x_8 y_4))))
(assert (forall ((x_28 Heap_0) (x_29 Heap_0) (y_5 Nat_0) (xs_1 list_0))
	(=> (and (toHeap_0 x_29 xs_1) (hinsert_0 x_28 y_5 x_29)) (toHeap_0 x_28 (cons_0 y_5 xs_1)))))
(assert (toHeap_0 Nil_1 nil_0))
(assert (forall ((x_32 list_0) (x_33 Heap_0) (x_10 list_0))
	(=> (and (toHeap_0 x_33 x_10) (toList_0 x_32 x_33)) (hsort_0 x_32 x_10))))
(assert (forall ((x_35 list_0) (x_36 Bool_0) (xs_2 list_0))
	(=> (and (diseqBool_0 x_36 true_0) (hsort_0 x_35 xs_2) (ordered_0 x_36 x_35)) false)))
(check-sat)
(get-model)
