(set-logic HORN)
(declare-datatypes ((Nat_0 0)) (((Z_0 ) (S_0 (unS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun unS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_0 (Nat_0) Bool)
(declare-fun isS_0 (Nat_0) Bool)
(assert (forall ((x_35 Nat_0) (x_34 Nat_0))
	(=> (= x_35 (S_0 x_34))
	    (unS_1 x_34 x_35))))
(assert (isZ_0 Z_0))
(assert (forall ((x_36 Nat_0))
	(isS_0 (S_0 x_36))))
(assert (forall ((x_37 Nat_0))
	(diseqNat_0 Z_0 (S_0 x_37))))
(assert (forall ((x_38 Nat_0))
	(diseqNat_0 (S_0 x_38) Z_0)))
(assert (forall ((x_39 Nat_0) (x_40 Nat_0))
	(=> (diseqNat_0 x_39 x_40)
	    (diseqNat_0 (S_0 x_39) (S_0 x_40)))))
(declare-fun add_1 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun minus_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun le_0 (Nat_0 Nat_0) Bool)
(declare-fun ge_0 (Nat_0 Nat_0) Bool)
(declare-fun lt_0 (Nat_0 Nat_0) Bool)
(declare-fun gt_0 (Nat_0 Nat_0) Bool)
(declare-fun mult_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun div_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun mod_0 (Nat_0 Nat_0 Nat_0) Bool)
(assert (forall ((y_5 Nat_0))
	(add_1 y_5 Z_0 y_5)))
(assert (forall ((x_32 Nat_0) (y_5 Nat_0) (r_0 Nat_0))
	(=> (add_1 r_0 x_32 y_5)
	    (add_1 (S_0 r_0) (S_0 x_32) y_5))))
(assert (forall ((y_5 Nat_0))
	(minus_0 Z_0 Z_0 y_5)))
(assert (forall ((x_32 Nat_0) (y_5 Nat_0) (r_0 Nat_0))
	(=> (minus_0 r_0 x_32 y_5)
	    (minus_0 (S_0 r_0) (S_0 x_32) y_5))))
(assert (forall ((y_5 Nat_0))
	(le_0 Z_0 y_5)))
(assert (forall ((x_32 Nat_0) (y_5 Nat_0))
	(=> (le_0 x_32 y_5)
	    (le_0 (S_0 x_32) (S_0 y_5)))))
(assert (forall ((y_5 Nat_0))
	(ge_0 y_5 Z_0)))
(assert (forall ((x_32 Nat_0) (y_5 Nat_0))
	(=> (ge_0 x_32 y_5)
	    (ge_0 (S_0 x_32) (S_0 y_5)))))
(assert (forall ((y_5 Nat_0))
	(lt_0 Z_0 (S_0 y_5))))
(assert (forall ((x_32 Nat_0) (y_5 Nat_0))
	(=> (lt_0 x_32 y_5)
	    (lt_0 (S_0 x_32) (S_0 y_5)))))
(assert (forall ((y_5 Nat_0))
	(gt_0 (S_0 y_5) Z_0)))
(assert (forall ((x_32 Nat_0) (y_5 Nat_0))
	(=> (gt_0 x_32 y_5)
	    (gt_0 (S_0 x_32) (S_0 y_5)))))
(assert (forall ((y_5 Nat_0))
	(mult_0 Z_0 Z_0 y_5)))
(assert (forall ((x_32 Nat_0) (y_5 Nat_0) (r_0 Nat_0) (z_3 Nat_0))
	(=>	(and (mult_0 r_0 x_32 y_5)
			(add_1 z_3 r_0 y_5))
		(mult_0 z_3 (S_0 x_32) y_5))))
(assert (forall ((x_32 Nat_0) (y_5 Nat_0))
	(=> (lt_0 x_32 y_5)
	    (div_0 Z_0 x_32 y_5))))
(assert (forall ((x_32 Nat_0) (y_5 Nat_0) (r_0 Nat_0) (z_3 Nat_0))
	(=>	(and (ge_0 x_32 y_5)
			(minus_0 z_3 x_32 y_5)
			(div_0 r_0 z_3 y_5))
		(div_0 (S_0 r_0) x_32 y_5))))
(assert (forall ((x_32 Nat_0) (y_5 Nat_0))
	(=> (lt_0 x_32 y_5)
	    (mod_0 x_32 x_32 y_5))))
(assert (forall ((x_32 Nat_0) (y_5 Nat_0) (r_0 Nat_0) (z_3 Nat_0))
	(=>	(and (ge_0 x_32 y_5)
			(minus_0 z_3 x_32 y_5)
			(mod_0 r_0 z_3 y_5))
		(mod_0 r_0 x_32 y_5))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_1 (Nat_0 list_0) Bool)
(declare-fun tail_1 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_44 list_0) (x_42 Nat_0) (x_43 list_0))
	(=> (= x_44 (cons_0 x_42 x_43))
	    (head_1 x_42 x_44))))
(assert (forall ((x_44 list_0) (x_42 Nat_0) (x_43 list_0))
	(=> (= x_44 (cons_0 x_42 x_43))
	    (tail_1 x_43 x_44))))
(assert (isnil_0 nil_0))
(assert (forall ((x_45 Nat_0) (x_46 list_0))
	(iscons_0 (cons_0 x_45 x_46))))
(assert (forall ((x_47 Nat_0) (x_48 list_0))
	(diseqlist_0 nil_0 (cons_0 x_47 x_48))))
(assert (forall ((x_49 Nat_0) (x_50 list_0))
	(diseqlist_0 (cons_0 x_49 x_50) nil_0)))
(assert (forall ((x_51 Nat_0) (x_52 list_0) (x_53 Nat_0) (x_54 list_0))
	(=> (diseqNat_0 x_51 x_53)
	    (diseqlist_0 (cons_0 x_51 x_52) (cons_0 x_53 x_54)))))
(assert (forall ((x_51 Nat_0) (x_52 list_0) (x_53 Nat_0) (x_54 list_0))
	(=> (diseqlist_0 x_52 x_54)
	    (diseqlist_0 (cons_0 x_51 x_52) (cons_0 x_53 x_54)))))
(declare-datatypes ((Tree_0 0)) (((TNode_0 (projTNode_0 Tree_0) (projTNode_1 Nat_0) (projTNode_2 Tree_0)) (TNil_0 ))))
(declare-fun diseqTree_0 (Tree_0 Tree_0) Bool)
(declare-fun projTNode_3 (Tree_0 Tree_0) Bool)
(declare-fun projTNode_4 (Nat_0 Tree_0) Bool)
(declare-fun projTNode_5 (Tree_0 Tree_0) Bool)
(declare-fun isTNode_0 (Tree_0) Bool)
(declare-fun isTNil_0 (Tree_0) Bool)
(assert (forall ((x_58 Tree_0) (x_55 Tree_0) (x_56 Nat_0) (x_57 Tree_0))
	(=> (= x_58 (TNode_0 x_55 x_56 x_57))
	    (projTNode_3 x_55 x_58))))
(assert (forall ((x_58 Tree_0) (x_55 Tree_0) (x_56 Nat_0) (x_57 Tree_0))
	(=> (= x_58 (TNode_0 x_55 x_56 x_57))
	    (projTNode_4 x_56 x_58))))
(assert (forall ((x_58 Tree_0) (x_55 Tree_0) (x_56 Nat_0) (x_57 Tree_0))
	(=> (= x_58 (TNode_0 x_55 x_56 x_57))
	    (projTNode_5 x_57 x_58))))
(assert (forall ((x_60 Tree_0) (x_61 Nat_0) (x_62 Tree_0))
	(isTNode_0 (TNode_0 x_60 x_61 x_62))))
(assert (isTNil_0 TNil_0))
(assert (forall ((x_63 Tree_0) (x_64 Nat_0) (x_65 Tree_0))
	(diseqTree_0 (TNode_0 x_63 x_64 x_65) TNil_0)))
(assert (forall ((x_66 Tree_0) (x_67 Nat_0) (x_68 Tree_0))
	(diseqTree_0 TNil_0 (TNode_0 x_66 x_67 x_68))))
(assert (forall ((x_69 Tree_0) (x_70 Nat_0) (x_71 Tree_0) (x_72 Tree_0) (x_73 Nat_0) (x_74 Tree_0))
	(=> (diseqTree_0 x_69 x_72)
	    (diseqTree_0 (TNode_0 x_69 x_70 x_71) (TNode_0 x_72 x_73 x_74)))))
(assert (forall ((x_69 Tree_0) (x_70 Nat_0) (x_71 Tree_0) (x_72 Tree_0) (x_73 Nat_0) (x_74 Tree_0))
	(=> (diseqNat_0 x_70 x_73)
	    (diseqTree_0 (TNode_0 x_69 x_70 x_71) (TNode_0 x_72 x_73 x_74)))))
(assert (forall ((x_69 Tree_0) (x_70 Nat_0) (x_71 Tree_0) (x_72 Tree_0) (x_73 Nat_0) (x_74 Tree_0))
	(=> (diseqTree_0 x_71 x_74)
	    (diseqTree_0 (TNode_0 x_69 x_70 x_71) (TNode_0 x_72 x_73 x_74)))))
(declare-fun insert_0 (list_0 Nat_0 list_0) Bool)
(assert (forall ((x_0 Nat_0) (y_0 list_0) (z_0 Nat_0) (xs_0 list_0) (x_6 list_0))
	(=>	(and (= x_6 (cons_0 x_0 (cons_0 z_0 xs_0)))
			(= y_0 (cons_0 z_0 xs_0))
			(le_0 x_0 z_0))
		(insert_0 x_6 x_0 y_0))))
(assert (forall ((x_0 Nat_0) (y_0 list_0) (z_0 Nat_0) (xs_0 list_0) (x_7 list_0) (x_8 list_0))
	(=>	(and (= x_7 (cons_0 z_0 x_8))
			(insert_0 x_8 x_0 xs_0)
			(= y_0 (cons_0 z_0 xs_0))
			(gt_0 x_0 z_0))
		(insert_0 x_7 x_0 y_0))))
(assert (forall ((x_0 Nat_0) (y_0 list_0) (x_9 list_0))
	(=>	(and (= x_9 (cons_0 x_0 nil_0))
			(= y_0 nil_0))
		(insert_0 x_9 x_0 y_0))))
(declare-fun isort_0 (list_0 list_0) Bool)
(assert (forall ((x_1 list_0) (y_1 Nat_0) (xs_1 list_0) (x_10 list_0) (x_11 list_0) (x_12 list_0))
	(=>	(and (= x_10 x_12)
			(isort_0 x_11 xs_1)
			(insert_0 x_12 y_1 x_11)
			(= x_1 (cons_0 y_1 xs_1)))
		(isort_0 x_10 x_1))))
(assert (forall ((x_1 list_0) (x_13 list_0))
	(=>	(and (= x_13 nil_0)
			(= x_1 nil_0))
		(isort_0 x_13 x_1))))
(declare-fun flatten_0 (list_0 Tree_0 list_0) Bool)
(assert (forall ((x_2 Tree_0) (y_2 list_0) (x_14 list_0))
	(=>	(and (= x_14 y_2)
			(= x_2 TNil_0))
		(flatten_0 x_14 x_2 y_2))))
(assert (forall ((x_2 Tree_0) (y_2 list_0) (p_0 Tree_0) (z_1 Nat_0) (q_0 Tree_0) (x_15 list_0) (x_16 list_0) (x_17 list_0))
	(=>	(and (= x_15 x_17)
			(flatten_0 x_16 q_0 y_2)
			(flatten_0 x_17 p_0 (cons_0 z_1 x_16))
			(= x_2 (TNode_0 p_0 z_1 q_0)))
		(flatten_0 x_15 x_2 y_2))))
(declare-fun add_0 (Tree_0 Nat_0 Tree_0) Bool)
(assert (forall ((x_3 Nat_0) (y_3 Tree_0) (x_18 Tree_0))
	(=>	(and (= x_18 (TNode_0 TNil_0 x_3 TNil_0))
			(= y_3 TNil_0))
		(add_0 x_18 x_3 y_3))))
(assert (forall ((x_3 Nat_0) (y_3 Tree_0) (p_1 Tree_0) (z_2 Nat_0) (q_1 Tree_0) (x_19 Tree_0) (x_20 Tree_0))
	(=>	(and (= x_19 (TNode_0 x_20 z_2 q_1))
			(add_0 x_20 x_3 p_1)
			(= y_3 (TNode_0 p_1 z_2 q_1))
			(le_0 x_3 z_2))
		(add_0 x_19 x_3 y_3))))
(assert (forall ((x_3 Nat_0) (y_3 Tree_0) (p_1 Tree_0) (z_2 Nat_0) (q_1 Tree_0) (x_21 Tree_0) (x_22 Tree_0))
	(=>	(and (= x_21 (TNode_0 p_1 z_2 x_22))
			(add_0 x_22 x_3 q_1)
			(= y_3 (TNode_0 p_1 z_2 q_1))
			(gt_0 x_3 z_2))
		(add_0 x_21 x_3 y_3))))
(declare-fun toTree_0 (Tree_0 list_0) Bool)
(assert (forall ((x_4 list_0) (y_4 Nat_0) (xs_2 list_0) (x_23 Tree_0) (x_24 Tree_0) (x_25 Tree_0))
	(=>	(and (= x_23 x_25)
			(toTree_0 x_24 xs_2)
			(add_0 x_25 y_4 x_24)
			(= x_4 (cons_0 y_4 xs_2)))
		(toTree_0 x_23 x_4))))
(assert (forall ((x_4 list_0) (x_26 Tree_0))
	(=>	(and (= x_26 TNil_0)
			(= x_4 nil_0))
		(toTree_0 x_26 x_4))))
(declare-fun tsort_0 (list_0 list_0) Bool)
(assert (forall ((x_5 list_0) (x_27 list_0) (x_28 Tree_0) (x_29 list_0))
	(=>	(and (= x_27 x_29)
			(toTree_0 x_28 x_5)
			(flatten_0 x_29 x_28 nil_0))
		(tsort_0 x_27 x_5))))
(assert (forall ((xs_3 list_0) (x_30 list_0) (x_31 list_0))
	(=>	(and (diseqlist_0 x_30 x_31)
			(tsort_0 x_30 xs_3)
			(isort_0 x_31 xs_3))
		false)))
(check-sat)
