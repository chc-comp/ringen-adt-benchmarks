(set-logic HORN)
(declare-datatypes ((Bool_0 0)) (((false_0 ) (true_0 ))))
(declare-fun diseqBool_0 (Bool_0 Bool_0) Bool)
(declare-datatypes ((Nat_0 0)) (((zero_0 ) (succ_0 (p_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun plus_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun leq_0 (Bool_0 Nat_0 Nat_0) Bool)
(declare-fun sort_0 (list_0 Nat_0 Nat_0) Bool)
(declare-fun evens_0 (list_0 list_0) Bool)
(declare-fun odds_0 (list_0 list_0) Bool)
(declare-fun count_0 (Nat_0 Nat_0 list_0) Bool)
(declare-fun x_9 (list_0 list_0 list_0) Bool)
(declare-fun pairs_0 (list_0 list_0 list_0) Bool)
(declare-fun stitch_0 (list_0 list_0 list_0) Bool)
(declare-fun bmerge_0 (list_0 list_0 list_0) Bool)
(declare-fun bsort_0 (list_0 list_0) Bool)
(assert (diseqBool_0 false_0 true_0))
(assert (diseqBool_0 true_0 false_0))
(assert (forall ((x_120 Nat_0))
	(diseqNat_0 zero_0 (succ_0 x_120))))
(assert (forall ((x_121 Nat_0))
	(diseqNat_0 (succ_0 x_121) zero_0)))
(assert (forall ((x_122 Nat_0) (x_123 Nat_0))
	(=> (diseqNat_0 x_122 x_123) (diseqNat_0 (succ_0 x_122) (succ_0 x_123)))))
(assert (forall ((x_33 Nat_0) (z_0 Nat_0) (y_0 Nat_0))
	(=> (plus_0 x_33 z_0 y_0) (plus_0 (succ_0 x_33) (succ_0 z_0) y_0))))
(assert (forall ((x_34 Nat_0))
	(plus_0 x_34 zero_0 x_34)))
(assert (forall ((x_35 Bool_0) (x_2 Nat_0) (z_1 Nat_0))
	(=> (leq_0 x_35 z_1 x_2) (leq_0 x_35 (succ_0 z_1) (succ_0 x_2)))))
(assert (forall ((z_1 Nat_0))
	(leq_0 false_0 (succ_0 z_1) zero_0)))
(assert (forall ((y_1 Nat_0))
	(leq_0 true_0 zero_0 y_1)))
(assert (forall ((x_3 Nat_0) (y_2 Nat_0))
	(=> (leq_0 true_0 x_3 y_2) (sort_0 (cons_0 x_3 (cons_0 y_2 nil_0)) x_3 y_2))))
(assert (forall ((x_41 Bool_0) (x_3 Nat_0) (y_2 Nat_0))
	(=> (and (diseqBool_0 x_41 true_0) (leq_0 x_41 x_3 y_2)) (sort_0 (cons_0 y_2 (cons_0 x_3 nil_0)) x_3 y_2))))
(assert (forall ((x_44 list_0) (y_3 Nat_0) (xs_0 list_0))
	(=> (odds_0 x_44 xs_0) (evens_0 (cons_0 y_3 x_44) (cons_0 y_3 xs_0)))))
(assert (evens_0 nil_0 nil_0))
(assert (forall ((x_46 list_0) (y_4 Nat_0) (xs_1 list_0))
	(=> (evens_0 x_46 xs_1) (odds_0 x_46 (cons_0 y_4 xs_1)))))
(assert (odds_0 nil_0 nil_0))
(assert (forall ((x_49 Nat_0) (x_50 Nat_0) (ys_0 list_0) (x_8 Nat_0))
	(=> (and (count_0 x_50 x_8 ys_0) (plus_0 x_49 (succ_0 zero_0) x_50)) (count_0 x_49 x_8 (cons_0 x_8 ys_0)))))
(assert (forall ((x_52 Nat_0) (z_2 Nat_0) (ys_0 list_0) (x_8 Nat_0))
	(=> (and (diseqNat_0 x_8 z_2) (count_0 x_52 x_8 ys_0)) (count_0 x_52 x_8 (cons_0 z_2 ys_0)))))
(assert (forall ((x_8 Nat_0))
	(count_0 zero_0 x_8 nil_0)))
(assert (forall ((x_56 list_0) (z_3 Nat_0) (xs_2 list_0) (y_6 list_0))
	(=> (x_9 x_56 xs_2 y_6) (x_9 (cons_0 z_3 x_56) (cons_0 z_3 xs_2) y_6))))
(assert (forall ((x_57 list_0))
	(x_9 x_57 nil_0 x_57)))
(assert (forall ((x_58 list_0) (x_59 list_0) (x_60 list_0) (x_13 Nat_0) (x_14 list_0) (z_4 Nat_0) (x_12 list_0))
	(=> (and (sort_0 x_59 z_4 x_13) (pairs_0 x_60 x_12 x_14) (x_9 x_58 x_59 x_60)) (pairs_0 x_58 (cons_0 z_4 x_12) (cons_0 x_13 x_14)))))
(assert (forall ((z_4 Nat_0) (x_12 list_0))
	(pairs_0 (cons_0 z_4 x_12) (cons_0 z_4 x_12) nil_0)))
(assert (forall ((x_63 list_0))
	(pairs_0 x_63 nil_0 x_63)))
(assert (forall ((x_65 list_0) (z_5 Nat_0) (xs_3 list_0) (y_8 list_0))
	(=> (pairs_0 x_65 xs_3 y_8) (stitch_0 (cons_0 z_5 x_65) (cons_0 z_5 xs_3) y_8))))
(assert (forall ((x_66 list_0))
	(stitch_0 x_66 nil_0 x_66)))
(assert (forall ((x_67 list_0) (x_68 list_0) (x_69 list_0) (x_70 list_0) (x_71 list_0) (x_72 list_0) (x_22 Nat_0) (x_23 list_0) (fail_0 list_0) (x_18 Nat_0) (x_19 list_0) (z_6 Nat_0))
	(=> (and (evens_0 x_67 (cons_0 z_6 (cons_0 x_22 x_23))) (evens_0 x_68 (cons_0 x_18 x_19)) (bmerge_0 x_69 x_67 x_68) (odds_0 x_70 (cons_0 z_6 (cons_0 x_22 x_23))) (odds_0 x_71 (cons_0 x_18 x_19)) (bmerge_0 x_72 x_70 x_71) (stitch_0 fail_0 x_69 x_72)) (bmerge_0 fail_0 (cons_0 z_6 (cons_0 x_22 x_23)) (cons_0 x_18 x_19)))))
(assert (forall ((x_75 list_0) (x_76 list_0) (x_77 list_0) (x_78 list_0) (x_79 list_0) (x_80 list_0) (x_20 Nat_0) (x_21 list_0) (fail_0 list_0) (x_18 Nat_0) (z_6 Nat_0))
	(=> (and (evens_0 x_75 (cons_0 z_6 nil_0)) (evens_0 x_76 (cons_0 x_18 (cons_0 x_20 x_21))) (bmerge_0 x_77 x_75 x_76) (odds_0 x_78 (cons_0 z_6 nil_0)) (odds_0 x_79 (cons_0 x_18 (cons_0 x_20 x_21))) (bmerge_0 x_80 x_78 x_79) (stitch_0 fail_0 x_77 x_80)) (bmerge_0 fail_0 (cons_0 z_6 nil_0) (cons_0 x_18 (cons_0 x_20 x_21))))))
(assert (forall ((x_90 list_0) (x_83 list_0) (x_84 list_0) (x_85 list_0) (x_86 list_0) (x_87 list_0) (x_88 list_0) (fail_0 list_0) (x_18 Nat_0) (z_6 Nat_0))
	(=> (and (sort_0 x_90 z_6 x_18) (evens_0 x_83 (cons_0 z_6 nil_0)) (evens_0 x_84 (cons_0 x_18 nil_0)) (bmerge_0 x_85 x_83 x_84) (odds_0 x_86 (cons_0 z_6 nil_0)) (odds_0 x_87 (cons_0 x_18 nil_0)) (bmerge_0 x_88 x_86 x_87) (stitch_0 fail_0 x_85 x_88)) (bmerge_0 x_90 (cons_0 z_6 nil_0) (cons_0 x_18 nil_0)))))
(assert (forall ((z_6 Nat_0) (x_17 list_0))
	(bmerge_0 (cons_0 z_6 x_17) (cons_0 z_6 x_17) nil_0)))
(assert (forall ((y_9 list_0))
	(bmerge_0 nil_0 nil_0 y_9)))
(assert (forall ((x_94 list_0) (x_95 list_0) (x_96 list_0) (x_97 list_0) (x_98 list_0) (x_25 Nat_0) (x_26 list_0) (y_10 Nat_0))
	(=> (and (evens_0 x_95 (cons_0 y_10 (cons_0 x_25 x_26))) (bsort_0 x_96 x_95) (odds_0 x_97 (cons_0 y_10 (cons_0 x_25 x_26))) (bsort_0 x_98 x_97) (bmerge_0 x_94 x_96 x_98)) (bsort_0 x_94 (cons_0 y_10 (cons_0 x_25 x_26))))))
(assert (forall ((y_10 Nat_0))
	(bsort_0 (cons_0 y_10 nil_0) (cons_0 y_10 nil_0))))
(assert (bsort_0 nil_0 nil_0))
(assert (forall ((x_102 Nat_0) (x_103 Nat_0) (x_104 Nat_0) (x_105 Nat_0) (x_27 Nat_0) (y_11 Nat_0) (z_8 Nat_0))
	(=> (and (diseqNat_0 x_103 x_105) (plus_0 x_102 y_11 z_8) (plus_0 x_103 x_27 x_102) (plus_0 x_104 x_27 y_11) (plus_0 x_105 x_104 z_8)) false)))
(assert (forall ((x_106 Nat_0) (x_107 Nat_0) (x_28 Nat_0) (y_12 Nat_0))
	(=> (and (diseqNat_0 x_106 x_107) (plus_0 x_106 x_28 y_12) (plus_0 x_107 y_12 x_28)) false)))
(assert (forall ((x_108 Nat_0) (x_29 Nat_0))
	(=> (and (diseqNat_0 x_108 x_29) (plus_0 x_108 x_29 zero_0)) false)))
(assert (forall ((x_109 Nat_0) (x_30 Nat_0))
	(=> (and (diseqNat_0 x_109 x_30) (plus_0 x_109 zero_0 x_30)) false)))
(assert (forall ((x_110 list_0) (x_111 Nat_0) (x_112 Nat_0) (x_31 Nat_0) (xs_4 list_0))
	(=> (and (diseqNat_0 x_111 x_112) (bsort_0 x_110 xs_4) (count_0 x_111 x_31 x_110) (count_0 x_112 x_31 xs_4)) false)))
(check-sat)
(get-model)
