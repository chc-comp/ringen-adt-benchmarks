(set-logic HORN)
(declare-datatypes ((Bool_0 0)) (((false_0 ) (true_0 ))))
(declare-fun diseqBool_0 (Bool_0 Bool_0) Bool)
(declare-fun and_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-datatypes ((Nat_0 0)) (((zero_0 ) (succ_0 (p_0 Nat_0)))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-datatypes ((Heap_0 0)) (((Node_0 (projNode_0 Heap_0) (projNode_1 Nat_0) (projNode_2 Heap_0)) (Nil_1 ))))
(declare-fun leq_0 (Bool_0 Nat_0 Nat_0) Bool)
(declare-fun ordered_0 (Bool_0 list_0) Bool)
(declare-fun hmerge_0 (Heap_0 Heap_0 Heap_0) Bool)
(declare-fun toList_0 (list_0 Heap_0) Bool)
(declare-fun hinsert_0 (Heap_0 Nat_0 Heap_0) Bool)
(declare-fun toHeap_0 (Heap_0 list_0) Bool)
(declare-fun hsort_0 (list_0 list_0) Bool)
(assert (diseqBool_0 false_0 true_0))
(assert (diseqBool_0 true_0 false_0))
(assert (and_0 false_0 false_0 false_0))
(assert (and_0 false_0 true_0 false_0))
(assert (and_0 false_0 false_0 true_0))
(assert (and_0 true_0 true_0 true_0))
(assert (forall ((x_13 Bool_0) (x_1 Nat_0) (z_0 Nat_0))
	(=> (leq_0 x_13 z_0 x_1) (leq_0 x_13 (succ_0 z_0) (succ_0 x_1)))))
(assert (forall ((z_0 Nat_0))
	(leq_0 false_0 (succ_0 z_0) zero_0)))
(assert (forall ((y_0 Nat_0))
	(leq_0 true_0 zero_0 y_0)))
(assert (forall ((x_17 Bool_0) (x_18 Bool_0) (x_19 Bool_0) (y_2 Nat_0) (xs_0 list_0) (y_1 Nat_0))
	(=> (and (leq_0 x_18 y_1 y_2) (ordered_0 x_19 (cons_0 y_2 xs_0)) (and_0 x_17 x_18 x_19)) (ordered_0 x_17 (cons_0 y_1 (cons_0 y_2 xs_0))))))
(assert (forall ((y_1 Nat_0))
	(ordered_0 true_0 (cons_0 y_1 nil_0))))
(assert (ordered_0 true_0 nil_0))
(assert (forall ((x_22 Heap_0))
	(hmerge_0 x_22 Nil_1 x_22)))
(assert (forall ((z_2 Heap_0) (x_4 Nat_0) (x_5 Heap_0))
	(hmerge_0 (Node_0 z_2 x_4 x_5) (Node_0 z_2 x_4 x_5) Nil_1)))
(assert (forall ((x_26 Heap_0) (x_6 Heap_0) (x_7 Nat_0) (x_8 Heap_0) (z_2 Heap_0) (x_4 Nat_0) (x_5 Heap_0))
	(=> (and (hmerge_0 x_26 x_5 (Node_0 x_6 x_7 x_8)) (leq_0 true_0 x_4 x_7)) (hmerge_0 (Node_0 x_26 x_4 z_2) (Node_0 z_2 x_4 x_5) (Node_0 x_6 x_7 x_8)))))
(assert (forall ((x_29 Heap_0) (x_27 Bool_0) (x_6 Heap_0) (x_7 Nat_0) (x_8 Heap_0) (z_2 Heap_0) (x_4 Nat_0) (x_5 Heap_0))
	(=> (and (diseqBool_0 x_27 true_0) (hmerge_0 x_29 (Node_0 z_2 x_4 x_5) x_8) (leq_0 x_27 x_4 x_7)) (hmerge_0 (Node_0 x_29 x_7 x_6) (Node_0 z_2 x_4 x_5) (Node_0 x_6 x_7 x_8)))))
(assert (toList_0 nil_0 Nil_1))
(assert (forall ((x_32 Heap_0) (x_33 list_0) (q_0 Heap_0) (y_4 Nat_0) (r_0 Heap_0))
	(=> (and (hmerge_0 x_32 q_0 r_0) (toList_0 x_33 x_32)) (toList_0 (cons_0 y_4 x_33) (Node_0 q_0 y_4 r_0)))))
(assert (forall ((x_34 Heap_0) (x_10 Nat_0) (y_5 Heap_0))
	(=> (hmerge_0 x_34 (Node_0 Nil_1 x_10 Nil_1) y_5) (hinsert_0 x_34 x_10 y_5))))
(assert (forall ((x_36 Heap_0) (x_37 Heap_0) (y_6 Nat_0) (xs_1 list_0))
	(=> (and (toHeap_0 x_37 xs_1) (hinsert_0 x_36 y_6 x_37)) (toHeap_0 x_36 (cons_0 y_6 xs_1)))))
(assert (toHeap_0 Nil_1 nil_0))
(assert (forall ((x_40 list_0) (x_41 Heap_0) (x_12 list_0))
	(=> (and (toHeap_0 x_41 x_12) (toList_0 x_40 x_41)) (hsort_0 x_40 x_12))))
(assert (forall ((x_43 list_0) (x_44 Bool_0) (xs_2 list_0))
	(=> (and (diseqBool_0 x_44 true_0) (hsort_0 x_43 xs_2) (ordered_0 x_44 x_43)) false)))
(check-sat)
(get-model)
