(set-logic HORN)
(declare-datatypes ((Nat_0 0)) (((Z_3 ) (Z_4 (unS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun add_1 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun le_0 (Nat_0 Nat_0) Bool)
(declare-fun gt_0 (Nat_0 Nat_0) Bool)
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-datatypes ((Tree_0 0)) (((TNode_0 (projTNode_0 Tree_0) (projTNode_1 Nat_0) (projTNode_2 Tree_0)) (TNil_0 ))))
(declare-fun flatten_0 (list_0 Tree_0 list_0) Bool)
(declare-fun count_0 (Nat_0 Nat_0 list_0) Bool)
(declare-fun add_0 (Tree_0 Nat_0 Tree_0) Bool)
(declare-fun toTree_0 (Tree_0 list_0) Bool)
(declare-fun tsort_0 (list_0 list_0) Bool)
(assert (forall ((x_36 Nat_0))
	(diseqNat_0 Z_3 (Z_4 x_36))))
(assert (forall ((x_37 Nat_0))
	(diseqNat_0 (Z_4 x_37) Z_3)))
(assert (forall ((x_38 Nat_0) (x_39 Nat_0))
	(=> (diseqNat_0 x_38 x_39) (diseqNat_0 (Z_4 x_38) (Z_4 x_39)))))
(assert (forall ((y_4 Nat_0))
	(add_1 y_4 Z_3 y_4)))
(assert (forall ((r_0 Nat_0) (x_30 Nat_0) (y_4 Nat_0))
	(=> (add_1 r_0 x_30 y_4) (add_1 (Z_4 r_0) (Z_4 x_30) y_4))))
(assert (forall ((y_4 Nat_0))
	(le_0 Z_3 y_4)))
(assert (forall ((x_30 Nat_0) (y_4 Nat_0))
	(=> (le_0 x_30 y_4) (le_0 (Z_4 x_30) (Z_4 y_4)))))
(assert (forall ((y_4 Nat_0))
	(gt_0 (Z_4 y_4) Z_3)))
(assert (forall ((x_30 Nat_0) (y_4 Nat_0))
	(=> (gt_0 x_30 y_4) (gt_0 (Z_4 x_30) (Z_4 y_4)))))
(assert (forall ((x_6 list_0))
	(flatten_0 x_6 TNil_0 x_6)))
(assert (forall ((x_7 list_0) (x_8 list_0) (p_0 Tree_0) (z_0 Nat_0) (q_0 Tree_0) (y_0 list_0))
	(=> (and (flatten_0 x_8 q_0 y_0) (flatten_0 x_7 p_0 (cons_0 z_0 x_8))) (flatten_0 x_7 (TNode_0 p_0 z_0 q_0) y_0))))
(assert (forall ((x_10 Nat_0) (x_11 Nat_0) (ys_0 list_0) (x_1 Nat_0))
	(=> (and (count_0 x_11 x_1 ys_0) (add_1 x_10 (Z_4 Z_3) x_11)) (count_0 x_10 x_1 (cons_0 x_1 ys_0)))))
(assert (forall ((x_12 Nat_0) (z_1 Nat_0) (ys_0 list_0) (x_1 Nat_0))
	(=> (and (diseqNat_0 x_1 z_1) (count_0 x_12 x_1 ys_0)) (count_0 x_12 x_1 (cons_0 z_1 ys_0)))))
(assert (forall ((x_1 Nat_0))
	(count_0 Z_3 x_1 nil_0)))
(assert (forall ((x_2 Nat_0))
	(add_0 (TNode_0 TNil_0 x_2 TNil_0) x_2 TNil_0)))
(assert (forall ((x_17 Tree_0) (p_1 Tree_0) (z_2 Nat_0) (q_1 Tree_0) (x_2 Nat_0))
	(=> (and (le_0 x_2 z_2) (add_0 x_17 x_2 p_1)) (add_0 (TNode_0 x_17 z_2 q_1) x_2 (TNode_0 p_1 z_2 q_1)))))
(assert (forall ((x_19 Tree_0) (p_1 Tree_0) (z_2 Nat_0) (q_1 Tree_0) (x_2 Nat_0))
	(=> (and (gt_0 x_2 z_2) (add_0 x_19 x_2 q_1)) (add_0 (TNode_0 p_1 z_2 x_19) x_2 (TNode_0 p_1 z_2 q_1)))))
(assert (forall ((x_20 Tree_0) (x_21 Tree_0) (y_3 Nat_0) (xs_0 list_0))
	(=> (and (toTree_0 x_21 xs_0) (add_0 x_20 y_3 x_21)) (toTree_0 x_20 (cons_0 y_3 xs_0)))))
(assert (toTree_0 TNil_0 nil_0))
(assert (forall ((x_24 list_0) (x_25 Tree_0) (x_4 list_0))
	(=> (and (toTree_0 x_25 x_4) (flatten_0 x_24 x_25 nil_0)) (tsort_0 x_24 x_4))))
(assert (forall ((x_27 list_0) (x_28 Nat_0) (x_29 Nat_0) (x_5 Nat_0) (xs_1 list_0))
	(=> (and (diseqNat_0 x_28 x_29) (tsort_0 x_27 xs_1) (count_0 x_28 x_5 x_27) (count_0 x_29 x_5 xs_1)) false)))
(check-sat)
(get-model)
