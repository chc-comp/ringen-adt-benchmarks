(set-logic HORN)
(declare-datatypes ((Nat_1 0)) (((Z_0 ) (S_0 (unS_0 Nat_1)))))
(declare-fun diseqNat_0 (Nat_1 Nat_1) Bool)
(declare-fun unS_1 (Nat_1 Nat_1) Bool)
(declare-fun isZ_0 (Nat_1) Bool)
(declare-fun isS_0 (Nat_1) Bool)
(assert (forall ((x_39 Nat_1) (x_38 Nat_1))
	(=> (= x_39 (S_0 x_38))
	    (unS_1 x_38 x_39))))
(assert (isZ_0 Z_0))
(assert (forall ((x_40 Nat_1))
	(isS_0 (S_0 x_40))))
(assert (forall ((x_41 Nat_1))
	(diseqNat_0 Z_0 (S_0 x_41))))
(assert (forall ((x_42 Nat_1))
	(diseqNat_0 (S_0 x_42) Z_0)))
(assert (forall ((x_43 Nat_1) (x_44 Nat_1))
	(=> (diseqNat_0 x_43 x_44)
	    (diseqNat_0 (S_0 x_43) (S_0 x_44)))))
(declare-fun add_1 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun minus_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun le_0 (Nat_1 Nat_1) Bool)
(declare-fun ge_0 (Nat_1 Nat_1) Bool)
(declare-fun lt_0 (Nat_1 Nat_1) Bool)
(declare-fun gt_0 (Nat_1 Nat_1) Bool)
(declare-fun mult_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun div_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun mod_0 (Nat_1 Nat_1 Nat_1) Bool)
(assert (forall ((y_6 Nat_1))
	(add_1 y_6 Z_0 y_6)))
(assert (forall ((x_36 Nat_1) (y_6 Nat_1) (r_2 Nat_1))
	(=> (add_1 r_2 x_36 y_6)
	    (add_1 (S_0 r_2) (S_0 x_36) y_6))))
(assert (forall ((y_6 Nat_1))
	(minus_0 Z_0 Z_0 y_6)))
(assert (forall ((x_36 Nat_1) (y_6 Nat_1) (r_2 Nat_1))
	(=> (minus_0 r_2 x_36 y_6)
	    (minus_0 (S_0 r_2) (S_0 x_36) y_6))))
(assert (forall ((y_6 Nat_1))
	(le_0 Z_0 y_6)))
(assert (forall ((x_36 Nat_1) (y_6 Nat_1))
	(=> (le_0 x_36 y_6)
	    (le_0 (S_0 x_36) (S_0 y_6)))))
(assert (forall ((y_6 Nat_1))
	(ge_0 y_6 Z_0)))
(assert (forall ((x_36 Nat_1) (y_6 Nat_1))
	(=> (ge_0 x_36 y_6)
	    (ge_0 (S_0 x_36) (S_0 y_6)))))
(assert (forall ((y_6 Nat_1))
	(lt_0 Z_0 (S_0 y_6))))
(assert (forall ((x_36 Nat_1) (y_6 Nat_1))
	(=> (lt_0 x_36 y_6)
	    (lt_0 (S_0 x_36) (S_0 y_6)))))
(assert (forall ((y_6 Nat_1))
	(gt_0 (S_0 y_6) Z_0)))
(assert (forall ((x_36 Nat_1) (y_6 Nat_1))
	(=> (gt_0 x_36 y_6)
	    (gt_0 (S_0 x_36) (S_0 y_6)))))
(assert (forall ((y_6 Nat_1))
	(mult_0 Z_0 Z_0 y_6)))
(assert (forall ((x_36 Nat_1) (y_6 Nat_1) (r_2 Nat_1) (z_4 Nat_1))
	(=>	(and (mult_0 r_2 x_36 y_6)
			(add_1 z_4 r_2 y_6))
		(mult_0 z_4 (S_0 x_36) y_6))))
(assert (forall ((x_36 Nat_1) (y_6 Nat_1))
	(=> (lt_0 x_36 y_6)
	    (div_0 Z_0 x_36 y_6))))
(assert (forall ((x_36 Nat_1) (y_6 Nat_1) (r_2 Nat_1) (z_4 Nat_1))
	(=>	(and (ge_0 x_36 y_6)
			(minus_0 z_4 x_36 y_6)
			(div_0 r_2 z_4 y_6))
		(div_0 (S_0 r_2) x_36 y_6))))
(assert (forall ((x_36 Nat_1) (y_6 Nat_1))
	(=> (lt_0 x_36 y_6)
	    (mod_0 x_36 x_36 y_6))))
(assert (forall ((x_36 Nat_1) (y_6 Nat_1) (r_2 Nat_1) (z_4 Nat_1))
	(=>	(and (ge_0 x_36 y_6)
			(minus_0 z_4 x_36 y_6)
			(mod_0 r_2 z_4 y_6))
		(mod_0 r_2 x_36 y_6))))
(declare-datatypes ((Nat_0 0)) (((zero_0 ) (succ_0 (p_0 Nat_0)))))
(declare-fun diseqNat_1 (Nat_0 Nat_0) Bool)
(declare-fun p_1 (Nat_0 Nat_0) Bool)
(declare-fun iszero_0 (Nat_0) Bool)
(declare-fun issucc_0 (Nat_0) Bool)
(assert (forall ((x_47 Nat_0) (x_46 Nat_0))
	(=> (= x_47 (succ_0 x_46))
	    (p_1 x_46 x_47))))
(assert (iszero_0 zero_0))
(assert (forall ((x_48 Nat_0))
	(issucc_0 (succ_0 x_48))))
(assert (forall ((x_49 Nat_0))
	(diseqNat_1 zero_0 (succ_0 x_49))))
(assert (forall ((x_50 Nat_0))
	(diseqNat_1 (succ_0 x_50) zero_0)))
(assert (forall ((x_51 Nat_0) (x_52 Nat_0))
	(=> (diseqNat_1 x_51 x_52)
	    (diseqNat_1 (succ_0 x_51) (succ_0 x_52)))))
(declare-datatypes ((Tree_0 0)) (((TNode_0 (projTNode_0 Tree_0) (projTNode_1 Nat_0) (projTNode_2 Tree_0)) (TNil_0 ))))
(declare-fun diseqTree_0 (Tree_0 Tree_0) Bool)
(declare-fun projTNode_3 (Tree_0 Tree_0) Bool)
(declare-fun projTNode_4 (Nat_0 Tree_0) Bool)
(declare-fun projTNode_5 (Tree_0 Tree_0) Bool)
(declare-fun isTNode_0 (Tree_0) Bool)
(declare-fun isTNil_0 (Tree_0) Bool)
(assert (forall ((x_56 Tree_0) (x_53 Tree_0) (x_54 Nat_0) (x_55 Tree_0))
	(=> (= x_56 (TNode_0 x_53 x_54 x_55))
	    (projTNode_3 x_53 x_56))))
(assert (forall ((x_56 Tree_0) (x_53 Tree_0) (x_54 Nat_0) (x_55 Tree_0))
	(=> (= x_56 (TNode_0 x_53 x_54 x_55))
	    (projTNode_4 x_54 x_56))))
(assert (forall ((x_56 Tree_0) (x_53 Tree_0) (x_54 Nat_0) (x_55 Tree_0))
	(=> (= x_56 (TNode_0 x_53 x_54 x_55))
	    (projTNode_5 x_55 x_56))))
(assert (forall ((x_58 Tree_0) (x_59 Nat_0) (x_60 Tree_0))
	(isTNode_0 (TNode_0 x_58 x_59 x_60))))
(assert (isTNil_0 TNil_0))
(assert (forall ((x_61 Tree_0) (x_62 Nat_0) (x_63 Tree_0))
	(diseqTree_0 (TNode_0 x_61 x_62 x_63) TNil_0)))
(assert (forall ((x_64 Tree_0) (x_65 Nat_0) (x_66 Tree_0))
	(diseqTree_0 TNil_0 (TNode_0 x_64 x_65 x_66))))
(assert (forall ((x_67 Tree_0) (x_68 Nat_0) (x_69 Tree_0) (x_70 Tree_0) (x_71 Nat_0) (x_72 Tree_0))
	(=> (diseqTree_0 x_67 x_70)
	    (diseqTree_0 (TNode_0 x_67 x_68 x_69) (TNode_0 x_70 x_71 x_72)))))
(assert (forall ((x_67 Tree_0) (x_68 Nat_0) (x_69 Tree_0) (x_70 Tree_0) (x_71 Nat_0) (x_72 Tree_0))
	(=> (diseqNat_1 x_68 x_71)
	    (diseqTree_0 (TNode_0 x_67 x_68 x_69) (TNode_0 x_70 x_71 x_72)))))
(assert (forall ((x_67 Tree_0) (x_68 Nat_0) (x_69 Tree_0) (x_70 Tree_0) (x_71 Nat_0) (x_72 Tree_0))
	(=> (diseqTree_0 x_69 x_72)
	    (diseqTree_0 (TNode_0 x_67 x_68 x_69) (TNode_0 x_70 x_71 x_72)))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_1 (Nat_0 list_0) Bool)
(declare-fun tail_1 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_76 list_0) (x_74 Nat_0) (x_75 list_0))
	(=> (= x_76 (cons_0 x_74 x_75))
	    (head_1 x_74 x_76))))
(assert (forall ((x_76 list_0) (x_74 Nat_0) (x_75 list_0))
	(=> (= x_76 (cons_0 x_74 x_75))
	    (tail_1 x_75 x_76))))
(assert (isnil_0 nil_0))
(assert (forall ((x_77 Nat_0) (x_78 list_0))
	(iscons_0 (cons_0 x_77 x_78))))
(assert (forall ((x_79 Nat_0) (x_80 list_0))
	(diseqlist_0 nil_0 (cons_0 x_79 x_80))))
(assert (forall ((x_81 Nat_0) (x_82 list_0))
	(diseqlist_0 (cons_0 x_81 x_82) nil_0)))
(assert (forall ((x_83 Nat_0) (x_84 list_0) (x_85 Nat_0) (x_86 list_0))
	(=> (diseqNat_1 x_83 x_85)
	    (diseqlist_0 (cons_0 x_83 x_84) (cons_0 x_85 x_86)))))
(assert (forall ((x_83 Nat_0) (x_84 list_0) (x_85 Nat_0) (x_86 list_0))
	(=> (diseqlist_0 x_84 x_86)
	    (diseqlist_0 (cons_0 x_83 x_84) (cons_0 x_85 x_86)))))
(declare-fun leq_0 (Bool Nat_0 Nat_0) Bool)
(assert (forall ((x_0 Nat_0) (y_0 Nat_0) (z_0 Nat_0) (x_1 Nat_0) (x_7 Bool) (x_8 Bool))
	(=>	(and (= x_7 x_8)
			(leq_0 x_8 z_0 x_1)
			(= x_0 (succ_0 z_0))
			(= y_0 (succ_0 x_1)))
		(leq_0 x_7 x_0 y_0))))
(assert (forall ((x_0 Nat_0) (y_0 Nat_0) (z_0 Nat_0) (x_9 Bool))
	(=>	(and (= x_9 false)
			(= x_0 (succ_0 z_0))
			(= y_0 zero_0))
		(leq_0 x_9 x_0 y_0))))
(assert (forall ((x_0 Nat_0) (y_0 Nat_0) (x_10 Bool))
	(=>	(and (= x_10 true)
			(= x_0 zero_0))
		(leq_0 x_10 x_0 y_0))))
(declare-fun ordered_0 (Bool list_0) Bool)
(assert (forall ((x_2 list_0) (y_1 Nat_0) (z_1 list_0) (y_2 Nat_0) (xs_0 list_0) (x_11 Bool) (x_12 Bool) (x_13 Bool))
	(=>	(and (= x_11 (and x_12 x_13))
			(leq_0 x_12 y_1 y_2)
			(ordered_0 x_13 (cons_0 y_2 xs_0))
			(= x_2 (cons_0 y_1 z_1))
			(= z_1 (cons_0 y_2 xs_0)))
		(ordered_0 x_11 x_2))))
(assert (forall ((x_2 list_0) (y_1 Nat_0) (z_1 list_0) (x_14 Bool))
	(=>	(and (= x_14 true)
			(= x_2 (cons_0 y_1 z_1))
			(= z_1 nil_0))
		(ordered_0 x_14 x_2))))
(assert (forall ((x_2 list_0) (x_15 Bool))
	(=>	(and (= x_15 true)
			(= x_2 nil_0))
		(ordered_0 x_15 x_2))))
(declare-fun flatten_0 (list_0 Tree_0 list_0) Bool)
(assert (forall ((x_3 Tree_0) (y_3 list_0) (x_16 list_0))
	(=>	(and (= x_16 y_3)
			(= x_3 TNil_0))
		(flatten_0 x_16 x_3 y_3))))
(assert (forall ((x_3 Tree_0) (y_3 list_0) (q_0 Tree_0) (z_2 Nat_0) (r_0 Tree_0) (x_17 list_0) (x_18 list_0) (x_19 list_0))
	(=>	(and (= x_17 x_19)
			(flatten_0 x_18 r_0 y_3)
			(flatten_0 x_19 q_0 (cons_0 z_2 x_18))
			(= x_3 (TNode_0 q_0 z_2 r_0)))
		(flatten_0 x_17 x_3 y_3))))
(declare-fun add_0 (Tree_0 Nat_0 Tree_0) Bool)
(assert (forall ((x_4 Nat_0) (y_4 Tree_0) (x_20 Tree_0))
	(=>	(and (= x_20 (TNode_0 TNil_0 x_4 TNil_0))
			(= y_4 TNil_0))
		(add_0 x_20 x_4 y_4))))
(assert (forall ((x_4 Nat_0) (y_4 Tree_0) (q_1 Tree_0) (z_3 Nat_0) (r_1 Tree_0) (x_22 Tree_0) (x_23 Tree_0) (x_21 Bool))
	(=>	(and (= x_22 (TNode_0 x_23 z_3 r_1))
			(add_0 x_23 x_4 q_1)
			(= y_4 (TNode_0 q_1 z_3 r_1))
			(= x_21 true)
			(leq_0 x_21 x_4 z_3))
		(add_0 x_22 x_4 y_4))))
(assert (forall ((x_4 Nat_0) (y_4 Tree_0) (q_1 Tree_0) (z_3 Nat_0) (r_1 Tree_0) (x_25 Tree_0) (x_26 Tree_0) (x_24 Bool))
	(=>	(and (= x_25 (TNode_0 q_1 z_3 x_26))
			(add_0 x_26 x_4 r_1)
			(= y_4 (TNode_0 q_1 z_3 r_1))
			(= x_24 false)
			(leq_0 x_24 x_4 z_3))
		(add_0 x_25 x_4 y_4))))
(declare-fun toTree_0 (Tree_0 list_0) Bool)
(assert (forall ((x_5 list_0) (y_5 Nat_0) (xs_1 list_0) (x_27 Tree_0) (x_28 Tree_0) (x_29 Tree_0))
	(=>	(and (= x_27 x_29)
			(toTree_0 x_28 xs_1)
			(add_0 x_29 y_5 x_28)
			(= x_5 (cons_0 y_5 xs_1)))
		(toTree_0 x_27 x_5))))
(assert (forall ((x_5 list_0) (x_30 Tree_0))
	(=>	(and (= x_30 TNil_0)
			(= x_5 nil_0))
		(toTree_0 x_30 x_5))))
(declare-fun tsort_0 (list_0 list_0) Bool)
(assert (forall ((x_6 list_0) (x_31 list_0) (x_32 Tree_0) (x_33 list_0))
	(=>	(and (= x_31 x_33)
			(toTree_0 x_32 x_6)
			(flatten_0 x_33 x_32 nil_0))
		(tsort_0 x_31 x_6))))
(assert (forall ((xs_2 list_0) (x_34 list_0) (x_35 Bool))
	(=>	(and (= x_35 false)
			(tsort_0 x_34 xs_2)
			(ordered_0 x_35 x_34))
		false)))
(check-sat)
