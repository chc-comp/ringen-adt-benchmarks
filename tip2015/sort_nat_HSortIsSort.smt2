(set-logic HORN)
(declare-datatypes ((Bool_0 0)) (((false_0 ) (true_0 ))))
(declare-fun diseqBool_0 (Bool_0 Bool_0) Bool)
(declare-datatypes ((Nat_0 0)) (((zero_0 ) (succ_0 (p_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-datatypes ((Heap_0 0)) (((Node_0 (projNode_0 Heap_0) (projNode_1 Nat_0) (projNode_2 Heap_0)) (Nil_1 ))))
(declare-datatypes ((list_1 0)) (((nil_2 ) (cons_1 (head_1 Heap_0) (tail_1 list_1)))))
(declare-fun toHeap_0 (list_1 list_0) Bool)
(declare-fun leq_0 (Bool_0 Nat_0 Nat_0) Bool)
(declare-fun insert_0 (list_0 Nat_0 list_0) Bool)
(declare-fun isort_0 (list_0 list_0) Bool)
(declare-fun hmerge_0 (Heap_0 Heap_0 Heap_0) Bool)
(declare-fun hpairwise_0 (list_1 list_1) Bool)
(declare-fun hmerging_0 (Heap_0 list_1) Bool)
(declare-fun toHeap_1 (Heap_0 list_0) Bool)
(declare-fun toList_0 (list_0 Heap_0) Bool)
(declare-fun hsort_0 (list_0 list_0) Bool)
(assert (diseqBool_0 false_0 true_0))
(assert (diseqBool_0 true_0 false_0))
(assert (forall ((x_71 Nat_0))
	(diseqNat_0 zero_0 (succ_0 x_71))))
(assert (forall ((x_72 Nat_0))
	(diseqNat_0 (succ_0 x_72) zero_0)))
(assert (forall ((x_73 Nat_0) (x_74 Nat_0))
	(=> (diseqNat_0 x_73 x_74) (diseqNat_0 (succ_0 x_73) (succ_0 x_74)))))
(assert (forall ((x_81 Nat_0) (x_82 list_0))
	(diseqlist_0 nil_0 (cons_0 x_81 x_82))))
(assert (forall ((x_83 Nat_0) (x_84 list_0))
	(diseqlist_0 (cons_0 x_83 x_84) nil_0)))
(assert (forall ((x_85 Nat_0) (x_86 list_0) (x_87 Nat_0) (x_88 list_0))
	(=> (diseqNat_0 x_85 x_87) (diseqlist_0 (cons_0 x_85 x_86) (cons_0 x_87 x_88)))))
(assert (forall ((x_85 Nat_0) (x_86 list_0) (x_87 Nat_0) (x_88 list_0))
	(=> (diseqlist_0 x_86 x_88) (diseqlist_0 (cons_0 x_85 x_86) (cons_0 x_87 x_88)))))
(assert (forall ((x_18 list_1) (y_0 Nat_0) (z_0 list_0))
	(=> (toHeap_0 x_18 z_0) (toHeap_0 (cons_1 (Node_0 Nil_1 y_0 Nil_1) x_18) (cons_0 y_0 z_0)))))
(assert (toHeap_0 nil_2 nil_0))
(assert (forall ((x_20 Bool_0) (x_2 Nat_0) (z_1 Nat_0))
	(=> (leq_0 x_20 z_1 x_2) (leq_0 x_20 (succ_0 z_1) (succ_0 x_2)))))
(assert (forall ((z_1 Nat_0))
	(leq_0 false_0 (succ_0 z_1) zero_0)))
(assert (forall ((y_1 Nat_0))
	(leq_0 true_0 zero_0 y_1)))
(assert (forall ((z_2 Nat_0) (xs_0 list_0) (x_3 Nat_0))
	(=> (leq_0 true_0 x_3 z_2) (insert_0 (cons_0 x_3 (cons_0 z_2 xs_0)) x_3 (cons_0 z_2 xs_0)))))
(assert (forall ((x_28 list_0) (x_26 Bool_0) (z_2 Nat_0) (xs_0 list_0) (x_3 Nat_0))
	(=> (and (diseqBool_0 x_26 true_0) (insert_0 x_28 x_3 xs_0) (leq_0 x_26 x_3 z_2)) (insert_0 (cons_0 z_2 x_28) x_3 (cons_0 z_2 xs_0)))))
(assert (forall ((x_3 Nat_0))
	(insert_0 (cons_0 x_3 nil_0) x_3 nil_0)))
(assert (forall ((x_30 list_0) (x_31 list_0) (y_3 Nat_0) (xs_1 list_0))
	(=> (and (isort_0 x_31 xs_1) (insert_0 x_30 y_3 x_31)) (isort_0 x_30 (cons_0 y_3 xs_1)))))
(assert (isort_0 nil_0 nil_0))
(assert (forall ((x_34 Heap_0))
	(hmerge_0 x_34 Nil_1 x_34)))
(assert (forall ((z_3 Heap_0) (x_6 Nat_0) (x_7 Heap_0))
	(hmerge_0 (Node_0 z_3 x_6 x_7) (Node_0 z_3 x_6 x_7) Nil_1)))
(assert (forall ((x_38 Heap_0) (x_8 Heap_0) (x_9 Nat_0) (x_10 Heap_0) (z_3 Heap_0) (x_6 Nat_0) (x_7 Heap_0))
	(=> (and (hmerge_0 x_38 x_7 (Node_0 x_8 x_9 x_10)) (leq_0 true_0 x_6 x_9)) (hmerge_0 (Node_0 x_38 x_6 z_3) (Node_0 z_3 x_6 x_7) (Node_0 x_8 x_9 x_10)))))
(assert (forall ((x_41 Heap_0) (x_39 Bool_0) (x_8 Heap_0) (x_9 Nat_0) (x_10 Heap_0) (z_3 Heap_0) (x_6 Nat_0) (x_7 Heap_0))
	(=> (and (diseqBool_0 x_39 true_0) (hmerge_0 x_41 (Node_0 z_3 x_6 x_7) x_10) (leq_0 x_39 x_6 x_9)) (hmerge_0 (Node_0 x_41 x_9 x_8) (Node_0 z_3 x_6 x_7) (Node_0 x_8 x_9 x_10)))))
(assert (forall ((x_43 Heap_0) (x_44 list_1) (r_0 Heap_0) (qs_0 list_1) (q_0 Heap_0))
	(=> (and (hmerge_0 x_43 q_0 r_0) (hpairwise_0 x_44 qs_0)) (hpairwise_0 (cons_1 x_43 x_44) (cons_1 q_0 (cons_1 r_0 qs_0))))))
(assert (forall ((q_0 Heap_0))
	(hpairwise_0 (cons_1 q_0 nil_2) (cons_1 q_0 nil_2))))
(assert (hpairwise_0 nil_2 nil_2))
(assert (forall ((x_47 Heap_0) (x_48 list_1) (z_4 Heap_0) (x_13 list_1) (q_1 Heap_0))
	(=> (and (hpairwise_0 x_48 (cons_1 q_1 (cons_1 z_4 x_13))) (hmerging_0 x_47 x_48)) (hmerging_0 x_47 (cons_1 q_1 (cons_1 z_4 x_13))))))
(assert (forall ((q_1 Heap_0))
	(hmerging_0 q_1 (cons_1 q_1 nil_2))))
(assert (hmerging_0 Nil_1 nil_2))
(assert (forall ((x_52 Heap_0) (x_53 list_1) (x_14 list_0))
	(=> (and (toHeap_0 x_53 x_14) (hmerging_0 x_52 x_53)) (toHeap_1 x_52 x_14))))
(assert (toList_0 nil_0 Nil_1))
(assert (forall ((x_57 Heap_0) (x_58 list_0) (q_2 Heap_0) (y_7 Nat_0) (r_1 Heap_0))
	(=> (and (hmerge_0 x_57 q_2 r_1) (toList_0 x_58 x_57)) (toList_0 (cons_0 y_7 x_58) (Node_0 q_2 y_7 r_1)))))
(assert (forall ((x_59 list_0) (x_60 Heap_0) (x_16 list_0))
	(=> (and (toHeap_1 x_60 x_16) (toList_0 x_59 x_60)) (hsort_0 x_59 x_16))))
(assert (forall ((x_62 list_0) (x_63 list_0) (xs_2 list_0))
	(=> (and (diseqlist_0 x_62 x_63) (hsort_0 x_62 xs_2) (isort_0 x_63 xs_2)) false)))
(check-sat)
(get-model)
