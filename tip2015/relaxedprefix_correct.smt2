(set-logic HORN)
(declare-datatypes ((Bool_0 0)) (((false_0 ) (true_0 ))))
(declare-fun diseqBool_0 (Bool_0 Bool_0) Bool)
(declare-fun or_1 (Bool_0 Bool_0 Bool_0) Bool)
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Bool_0) (tail_0 list_0)))))
(declare-datatypes ((It_0 0)) (((A_0 ) (B_0 ) (C_0 ))))
(declare-fun diseqIt_0 (It_0 It_0) Bool)
(declare-datatypes ((list_1 0)) (((nil_1 ) (cons_1 (head_1 It_0) (tail_1 list_1)))))
(declare-datatypes ((list_2 0)) (((nil_2 ) (cons_2 (head_2 list_1) (tail_2 list_2)))))
(declare-fun removeOne_0 (list_2 It_0 list_2) Bool)
(declare-fun removeOne_1 (list_2 list_1) Bool)
(declare-fun or_0 (Bool_0 list_0) Bool)
(declare-fun isPrefix_0 (Bool_0 list_1 list_1) Bool)
(declare-fun isRelaxedPrefix_0 (Bool_0 list_1 list_1) Bool)
(declare-fun spec_0 (list_0 list_1 list_2) Bool)
(declare-fun spec_1 (Bool_0 list_1 list_1) Bool)
(assert (diseqBool_0 false_0 true_0))
(assert (diseqBool_0 true_0 false_0))
(assert (or_1 false_0 false_0 false_0))
(assert (or_1 true_0 true_0 false_0))
(assert (or_1 true_0 false_0 true_0))
(assert (or_1 true_0 true_0 true_0))
(assert (diseqIt_0 A_0 B_0))
(assert (diseqIt_0 A_0 C_0))
(assert (diseqIt_0 B_0 A_0))
(assert (diseqIt_0 C_0 A_0))
(assert (diseqIt_0 B_0 C_0))
(assert (diseqIt_0 C_0 B_0))
(assert (forall ((x_17 list_2) (z_0 list_1) (x_1 list_2) (x_0 It_0))
	(=> (removeOne_0 x_17 x_0 x_1) (removeOne_0 (cons_2 (cons_1 x_0 z_0) x_17) x_0 (cons_2 z_0 x_1)))))
(assert (forall ((x_0 It_0))
	(removeOne_0 nil_2 x_0 nil_2)))
(assert (forall ((x_20 list_2) (x_21 list_2) (y_1 It_0) (xs_0 list_1))
	(=> (and (removeOne_1 x_20 xs_0) (removeOne_0 x_21 y_1 x_20)) (removeOne_1 (cons_2 xs_0 x_21) (cons_1 y_1 xs_0)))))
(assert (removeOne_1 nil_2 nil_1))
(assert (forall ((x_23 Bool_0) (x_24 Bool_0) (y_2 Bool_0) (xs_1 list_0))
	(=> (and (or_0 x_24 xs_1) (or_1 x_23 y_2 x_24)) (or_0 x_23 (cons_0 y_2 xs_1)))))
(assert (or_0 false_0 nil_0))
(assert (forall ((x_26 Bool_0) (x_6 It_0) (x_7 list_1) (x_5 list_1))
	(=> (isPrefix_0 x_26 x_5 x_7) (isPrefix_0 x_26 (cons_1 x_6 x_5) (cons_1 x_6 x_7)))))
(assert (forall ((x_6 It_0) (x_7 list_1) (z_1 It_0) (x_5 list_1))
	(=> (diseqIt_0 z_1 x_6) (isPrefix_0 false_0 (cons_1 z_1 x_5) (cons_1 x_6 x_7)))))
(assert (forall ((z_1 It_0) (x_5 list_1))
	(isPrefix_0 false_0 (cons_1 z_1 x_5) nil_1)))
(assert (forall ((y_3 list_1))
	(isPrefix_0 true_0 nil_1 y_3)))
(assert (forall ((x_31 Bool_0) (x_12 It_0) (x_13 list_1) (x_10 It_0) (x_11 list_1))
	(=> (isRelaxedPrefix_0 x_31 (cons_1 x_10 x_11) x_13) (isRelaxedPrefix_0 x_31 (cons_1 x_12 (cons_1 x_10 x_11)) (cons_1 x_12 x_13)))))
(assert (forall ((x_33 Bool_0) (x_12 It_0) (x_13 list_1) (x_10 It_0) (x_11 list_1) (z_2 It_0))
	(=> (and (diseqIt_0 z_2 x_12) (isPrefix_0 x_33 (cons_1 x_10 x_11) (cons_1 x_12 x_13))) (isRelaxedPrefix_0 x_33 (cons_1 z_2 (cons_1 x_10 x_11)) (cons_1 x_12 x_13)))))
(assert (forall ((x_10 It_0) (x_11 list_1) (z_2 It_0))
	(isRelaxedPrefix_0 false_0 (cons_1 z_2 (cons_1 x_10 x_11)) nil_1)))
(assert (forall ((z_2 It_0) (y_4 list_1))
	(isRelaxedPrefix_0 true_0 (cons_1 z_2 nil_1) y_4)))
(assert (forall ((y_4 list_1))
	(isRelaxedPrefix_0 true_0 nil_1 y_4)))
(assert (forall ((x_39 Bool_0) (x_40 list_0) (y_5 list_1) (z_3 list_2) (ys_0 list_1))
	(=> (and (isPrefix_0 x_39 y_5 ys_0) (spec_0 x_40 ys_0 z_3)) (spec_0 (cons_0 x_39 x_40) ys_0 (cons_2 y_5 z_3)))))
(assert (forall ((ys_0 list_1))
	(spec_0 nil_0 ys_0 nil_2)))
(assert (forall ((x_42 Bool_0) (x_43 list_2) (x_44 list_0) (x_15 list_1) (y_6 list_1))
	(=> (and (removeOne_1 x_43 x_15) (spec_0 x_44 y_6 (cons_2 x_15 x_43)) (or_0 x_42 x_44)) (spec_1 x_42 x_15 y_6))))
(assert (forall ((x_46 Bool_0) (x_47 Bool_0) (xs_2 list_1) (ys_1 list_1))
	(=> (and (diseqBool_0 x_46 x_47) (isRelaxedPrefix_0 x_46 xs_2 ys_1) (spec_1 x_47 xs_2 ys_1)) false)))
(check-sat)
(get-model)
