(set-logic HORN)
(declare-datatypes ((Nat_0 0)) (((Z_0 ) (S_0 (unS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun unS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_0 (Nat_0) Bool)
(declare-fun isS_0 (Nat_0) Bool)
(assert (forall ((x_29 Nat_0) (x_28 Nat_0))
	(=> (= x_29 (S_0 x_28))
	    (unS_1 x_28 x_29))))
(assert (isZ_0 Z_0))
(assert (forall ((x_30 Nat_0))
	(isS_0 (S_0 x_30))))
(assert (forall ((x_31 Nat_0))
	(diseqNat_0 Z_0 (S_0 x_31))))
(assert (forall ((x_32 Nat_0))
	(diseqNat_0 (S_0 x_32) Z_0)))
(assert (forall ((x_33 Nat_0) (x_34 Nat_0))
	(=> (diseqNat_0 x_33 x_34)
	    (diseqNat_0 (S_0 x_33) (S_0 x_34)))))
(declare-fun add_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun minus_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun le_0 (Nat_0 Nat_0) Bool)
(declare-fun ge_0 (Nat_0 Nat_0) Bool)
(declare-fun lt_0 (Nat_0 Nat_0) Bool)
(declare-fun gt_0 (Nat_0 Nat_0) Bool)
(declare-fun mult_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun div_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun mod_0 (Nat_0 Nat_0 Nat_0) Bool)
(assert (forall ((y_3 Nat_0))
	(add_0 y_3 Z_0 y_3)))
(assert (forall ((x_26 Nat_0) (y_3 Nat_0) (r_0 Nat_0))
	(=> (add_0 r_0 x_26 y_3)
	    (add_0 (S_0 r_0) (S_0 x_26) y_3))))
(assert (forall ((y_3 Nat_0))
	(minus_0 Z_0 Z_0 y_3)))
(assert (forall ((x_26 Nat_0) (y_3 Nat_0) (r_0 Nat_0))
	(=> (minus_0 r_0 x_26 y_3)
	    (minus_0 (S_0 r_0) (S_0 x_26) y_3))))
(assert (forall ((y_3 Nat_0))
	(le_0 Z_0 y_3)))
(assert (forall ((x_26 Nat_0) (y_3 Nat_0))
	(=> (le_0 x_26 y_3)
	    (le_0 (S_0 x_26) (S_0 y_3)))))
(assert (forall ((y_3 Nat_0))
	(ge_0 y_3 Z_0)))
(assert (forall ((x_26 Nat_0) (y_3 Nat_0))
	(=> (ge_0 x_26 y_3)
	    (ge_0 (S_0 x_26) (S_0 y_3)))))
(assert (forall ((y_3 Nat_0))
	(lt_0 Z_0 (S_0 y_3))))
(assert (forall ((x_26 Nat_0) (y_3 Nat_0))
	(=> (lt_0 x_26 y_3)
	    (lt_0 (S_0 x_26) (S_0 y_3)))))
(assert (forall ((y_3 Nat_0))
	(gt_0 (S_0 y_3) Z_0)))
(assert (forall ((x_26 Nat_0) (y_3 Nat_0))
	(=> (gt_0 x_26 y_3)
	    (gt_0 (S_0 x_26) (S_0 y_3)))))
(assert (forall ((y_3 Nat_0))
	(mult_0 Z_0 Z_0 y_3)))
(assert (forall ((x_26 Nat_0) (y_3 Nat_0) (r_0 Nat_0) (z_2 Nat_0))
	(=>	(and (mult_0 r_0 x_26 y_3)
			(add_0 z_2 r_0 y_3))
		(mult_0 z_2 (S_0 x_26) y_3))))
(assert (forall ((x_26 Nat_0) (y_3 Nat_0))
	(=> (lt_0 x_26 y_3)
	    (div_0 Z_0 x_26 y_3))))
(assert (forall ((x_26 Nat_0) (y_3 Nat_0) (r_0 Nat_0) (z_2 Nat_0))
	(=>	(and (ge_0 x_26 y_3)
			(minus_0 z_2 x_26 y_3)
			(div_0 r_0 z_2 y_3))
		(div_0 (S_0 r_0) x_26 y_3))))
(assert (forall ((x_26 Nat_0) (y_3 Nat_0))
	(=> (lt_0 x_26 y_3)
	    (mod_0 x_26 x_26 y_3))))
(assert (forall ((x_26 Nat_0) (y_3 Nat_0) (r_0 Nat_0) (z_2 Nat_0))
	(=>	(and (ge_0 x_26 y_3)
			(minus_0 z_2 x_26 y_3)
			(mod_0 r_0 z_2 y_3))
		(mod_0 r_0 x_26 y_3))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_2 (Nat_0 list_0) Bool)
(declare-fun tail_2 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_38 list_0) (x_36 Nat_0) (x_37 list_0))
	(=> (= x_38 (cons_0 x_36 x_37))
	    (head_2 x_36 x_38))))
(assert (forall ((x_38 list_0) (x_36 Nat_0) (x_37 list_0))
	(=> (= x_38 (cons_0 x_36 x_37))
	    (tail_2 x_37 x_38))))
(assert (isnil_0 nil_0))
(assert (forall ((x_39 Nat_0) (x_40 list_0))
	(iscons_0 (cons_0 x_39 x_40))))
(assert (forall ((x_41 Nat_0) (x_42 list_0))
	(diseqlist_0 nil_0 (cons_0 x_41 x_42))))
(assert (forall ((x_43 Nat_0) (x_44 list_0))
	(diseqlist_0 (cons_0 x_43 x_44) nil_0)))
(assert (forall ((x_45 Nat_0) (x_46 list_0) (x_47 Nat_0) (x_48 list_0))
	(=> (diseqNat_0 x_45 x_47)
	    (diseqlist_0 (cons_0 x_45 x_46) (cons_0 x_47 x_48)))))
(assert (forall ((x_45 Nat_0) (x_46 list_0) (x_47 Nat_0) (x_48 list_0))
	(=> (diseqlist_0 x_46 x_48)
	    (diseqlist_0 (cons_0 x_45 x_46) (cons_0 x_47 x_48)))))
(declare-datatypes ((Tree_0 0)) (((Node_0 (projNode_0 Tree_0) (projNode_1 Nat_0) (projNode_2 Tree_0)) (Nil_0 ))))
(declare-fun diseqTree_0 (Tree_0 Tree_0) Bool)
(declare-fun projNode_3 (Tree_0 Tree_0) Bool)
(declare-fun projNode_4 (Nat_0 Tree_0) Bool)
(declare-fun projNode_5 (Tree_0 Tree_0) Bool)
(declare-fun isNode_0 (Tree_0) Bool)
(declare-fun isNil_0 (Tree_0) Bool)
(assert (forall ((x_52 Tree_0) (x_49 Tree_0) (x_50 Nat_0) (x_51 Tree_0))
	(=> (= x_52 (Node_0 x_49 x_50 x_51))
	    (projNode_3 x_49 x_52))))
(assert (forall ((x_52 Tree_0) (x_49 Tree_0) (x_50 Nat_0) (x_51 Tree_0))
	(=> (= x_52 (Node_0 x_49 x_50 x_51))
	    (projNode_4 x_50 x_52))))
(assert (forall ((x_52 Tree_0) (x_49 Tree_0) (x_50 Nat_0) (x_51 Tree_0))
	(=> (= x_52 (Node_0 x_49 x_50 x_51))
	    (projNode_5 x_51 x_52))))
(assert (forall ((x_54 Tree_0) (x_55 Nat_0) (x_56 Tree_0))
	(isNode_0 (Node_0 x_54 x_55 x_56))))
(assert (isNil_0 Nil_0))
(assert (forall ((x_57 Tree_0) (x_58 Nat_0) (x_59 Tree_0))
	(diseqTree_0 (Node_0 x_57 x_58 x_59) Nil_0)))
(assert (forall ((x_60 Tree_0) (x_61 Nat_0) (x_62 Tree_0))
	(diseqTree_0 Nil_0 (Node_0 x_60 x_61 x_62))))
(assert (forall ((x_63 Tree_0) (x_64 Nat_0) (x_65 Tree_0) (x_66 Tree_0) (x_67 Nat_0) (x_68 Tree_0))
	(=> (diseqTree_0 x_63 x_66)
	    (diseqTree_0 (Node_0 x_63 x_64 x_65) (Node_0 x_66 x_67 x_68)))))
(assert (forall ((x_63 Tree_0) (x_64 Nat_0) (x_65 Tree_0) (x_66 Tree_0) (x_67 Nat_0) (x_68 Tree_0))
	(=> (diseqNat_0 x_64 x_67)
	    (diseqTree_0 (Node_0 x_63 x_64 x_65) (Node_0 x_66 x_67 x_68)))))
(assert (forall ((x_63 Tree_0) (x_64 Nat_0) (x_65 Tree_0) (x_66 Tree_0) (x_67 Nat_0) (x_68 Tree_0))
	(=> (diseqTree_0 x_65 x_68)
	    (diseqTree_0 (Node_0 x_63 x_64 x_65) (Node_0 x_66 x_67 x_68)))))
(declare-datatypes ((list_1 0)) (((nil_1 ) (cons_1 (head_1 Tree_0) (tail_1 list_1)))))
(declare-fun diseqlist_1 (list_1 list_1) Bool)
(declare-fun head_3 (Tree_0 list_1) Bool)
(declare-fun tail_3 (list_1 list_1) Bool)
(declare-fun isnil_1 (list_1) Bool)
(declare-fun iscons_1 (list_1) Bool)
(assert (forall ((x_72 list_1) (x_70 Tree_0) (x_71 list_1))
	(=> (= x_72 (cons_1 x_70 x_71))
	    (head_3 x_70 x_72))))
(assert (forall ((x_72 list_1) (x_70 Tree_0) (x_71 list_1))
	(=> (= x_72 (cons_1 x_70 x_71))
	    (tail_3 x_71 x_72))))
(assert (isnil_1 nil_1))
(assert (forall ((x_73 Tree_0) (x_74 list_1))
	(iscons_1 (cons_1 x_73 x_74))))
(assert (forall ((x_75 Tree_0) (x_76 list_1))
	(diseqlist_1 nil_1 (cons_1 x_75 x_76))))
(assert (forall ((x_77 Tree_0) (x_78 list_1))
	(diseqlist_1 (cons_1 x_77 x_78) nil_1)))
(assert (forall ((x_79 Tree_0) (x_80 list_1) (x_81 Tree_0) (x_82 list_1))
	(=> (diseqTree_0 x_79 x_81)
	    (diseqlist_1 (cons_1 x_79 x_80) (cons_1 x_81 x_82)))))
(assert (forall ((x_79 Tree_0) (x_80 list_1) (x_81 Tree_0) (x_82 list_1))
	(=> (diseqlist_1 x_80 x_82)
	    (diseqlist_1 (cons_1 x_79 x_80) (cons_1 x_81 x_82)))))
(declare-fun flatten_0 (list_0 list_1) Bool)
(assert (forall ((x_0 list_1) (y_0 Tree_0) (ps_0 list_1) (x_8 list_0) (x_9 list_0))
	(=>	(and (= x_8 x_9)
			(flatten_0 x_9 ps_0)
			(= x_0 (cons_1 y_0 ps_0))
			(= y_0 Nil_0))
		(flatten_0 x_8 x_0))))
(assert (forall ((x_0 list_1) (y_0 Tree_0) (ps_0 list_1) (z_0 Tree_0) (x_1 Nat_0) (q_0 Tree_0) (x_10 list_0) (x_11 list_0))
	(=>	(and (= x_10 (cons_0 x_1 x_11))
			(flatten_0 x_11 (cons_1 q_0 ps_0))
			(= x_0 (cons_1 y_0 ps_0))
			(= y_0 (Node_0 z_0 x_1 q_0))
			(= z_0 Nil_0))
		(flatten_0 x_10 x_0))))
(assert (forall ((x_0 list_1) (y_0 Tree_0) (ps_0 list_1) (z_0 Tree_0) (x_1 Nat_0) (q_0 Tree_0) (x_2 Tree_0) (x_3 Nat_0) (x_4 Tree_0) (x_12 list_0) (x_13 list_0))
	(=>	(and (= x_12 x_13)
			(flatten_0 x_13 (cons_1 (Node_0 x_2 x_3 x_4) (cons_1 (Node_0 Nil_0 x_1 q_0) ps_0)))
			(= x_0 (cons_1 y_0 ps_0))
			(= y_0 (Node_0 z_0 x_1 q_0))
			(= z_0 (Node_0 x_2 x_3 x_4)))
		(flatten_0 x_12 x_0))))
(assert (forall ((x_0 list_1) (x_14 list_0))
	(=>	(and (= x_14 nil_0)
			(= x_0 nil_1))
		(flatten_0 x_14 x_0))))
(declare-fun x_5 (list_0 list_0 list_0) Bool)
(assert (forall ((x_6 list_0) (y_1 list_0) (z_1 Nat_0) (xs_0 list_0) (x_15 list_0) (x_16 list_0))
	(=>	(and (= x_15 (cons_0 z_1 x_16))
			(x_5 x_16 xs_0 y_1)
			(= x_6 (cons_0 z_1 xs_0)))
		(x_5 x_15 x_6 y_1))))
(assert (forall ((x_6 list_0) (y_1 list_0) (x_17 list_0))
	(=>	(and (= x_17 y_1)
			(= x_6 nil_0))
		(x_5 x_17 x_6 y_1))))
(declare-fun flatten_1 (list_0 Tree_0) Bool)
(assert (forall ((x_7 Tree_0) (x_18 list_0))
	(=>	(and (= x_18 nil_0)
			(= x_7 Nil_0))
		(flatten_1 x_18 x_7))))
(assert (forall ((x_7 Tree_0) (p_0 Tree_0) (y_2 Nat_0) (q_1 Tree_0) (x_19 list_0) (x_20 list_0) (x_21 list_0) (x_22 list_0) (x_23 list_0))
	(=>	(and (= x_19 x_23)
			(flatten_1 x_20 p_0)
			(flatten_1 x_21 q_1)
			(x_5 x_22 (cons_0 y_2 nil_0) x_21)
			(x_5 x_23 x_20 x_22)
			(= x_7 (Node_0 p_0 y_2 q_1)))
		(flatten_1 x_19 x_7))))
(assert (forall ((p_1 Tree_0) (x_24 list_0) (x_25 list_0))
	(=>	(and (diseqlist_0 x_24 x_25)
			(flatten_0 x_24 (cons_1 p_1 nil_1))
			(flatten_1 x_25 p_1))
		false)))
(check-sat)
