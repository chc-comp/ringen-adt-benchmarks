(set-logic HORN)
(declare-datatypes ((Nat_0 0)) (((Z_0 ) (S_0 (unS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun unS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_0 (Nat_0) Bool)
(declare-fun isS_0 (Nat_0) Bool)
(assert (forall ((x_30 Nat_0) (x_29 Nat_0))
	(=> (= x_30 (S_0 x_29))
	    (unS_1 x_29 x_30))))
(assert (isZ_0 Z_0))
(assert (forall ((x_31 Nat_0))
	(isS_0 (S_0 x_31))))
(assert (forall ((x_32 Nat_0))
	(diseqNat_0 Z_0 (S_0 x_32))))
(assert (forall ((x_33 Nat_0))
	(diseqNat_0 (S_0 x_33) Z_0)))
(assert (forall ((x_34 Nat_0) (x_35 Nat_0))
	(=> (diseqNat_0 x_34 x_35)
	    (diseqNat_0 (S_0 x_34) (S_0 x_35)))))
(declare-fun add_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun minus_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun le_0 (Nat_0 Nat_0) Bool)
(declare-fun ge_0 (Nat_0 Nat_0) Bool)
(declare-fun lt_0 (Nat_0 Nat_0) Bool)
(declare-fun gt_0 (Nat_0 Nat_0) Bool)
(declare-fun mult_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun div_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun mod_0 (Nat_0 Nat_0 Nat_0) Bool)
(assert (forall ((y_2 Nat_0))
	(add_0 y_2 Z_0 y_2)))
(assert (forall ((x_27 Nat_0) (y_2 Nat_0) (r_0 Nat_0))
	(=> (add_0 r_0 x_27 y_2)
	    (add_0 (S_0 r_0) (S_0 x_27) y_2))))
(assert (forall ((y_2 Nat_0))
	(minus_0 Z_0 Z_0 y_2)))
(assert (forall ((x_27 Nat_0) (y_2 Nat_0) (r_0 Nat_0))
	(=> (minus_0 r_0 x_27 y_2)
	    (minus_0 (S_0 r_0) (S_0 x_27) y_2))))
(assert (forall ((y_2 Nat_0))
	(le_0 Z_0 y_2)))
(assert (forall ((x_27 Nat_0) (y_2 Nat_0))
	(=> (le_0 x_27 y_2)
	    (le_0 (S_0 x_27) (S_0 y_2)))))
(assert (forall ((y_2 Nat_0))
	(ge_0 y_2 Z_0)))
(assert (forall ((x_27 Nat_0) (y_2 Nat_0))
	(=> (ge_0 x_27 y_2)
	    (ge_0 (S_0 x_27) (S_0 y_2)))))
(assert (forall ((y_2 Nat_0))
	(lt_0 Z_0 (S_0 y_2))))
(assert (forall ((x_27 Nat_0) (y_2 Nat_0))
	(=> (lt_0 x_27 y_2)
	    (lt_0 (S_0 x_27) (S_0 y_2)))))
(assert (forall ((y_2 Nat_0))
	(gt_0 (S_0 y_2) Z_0)))
(assert (forall ((x_27 Nat_0) (y_2 Nat_0))
	(=> (gt_0 x_27 y_2)
	    (gt_0 (S_0 x_27) (S_0 y_2)))))
(assert (forall ((y_2 Nat_0))
	(mult_0 Z_0 Z_0 y_2)))
(assert (forall ((x_27 Nat_0) (y_2 Nat_0) (r_0 Nat_0) (z_2 Nat_0))
	(=>	(and (mult_0 r_0 x_27 y_2)
			(add_0 z_2 r_0 y_2))
		(mult_0 z_2 (S_0 x_27) y_2))))
(assert (forall ((x_27 Nat_0) (y_2 Nat_0))
	(=> (lt_0 x_27 y_2)
	    (div_0 Z_0 x_27 y_2))))
(assert (forall ((x_27 Nat_0) (y_2 Nat_0) (r_0 Nat_0) (z_2 Nat_0))
	(=>	(and (ge_0 x_27 y_2)
			(minus_0 z_2 x_27 y_2)
			(div_0 r_0 z_2 y_2))
		(div_0 (S_0 r_0) x_27 y_2))))
(assert (forall ((x_27 Nat_0) (y_2 Nat_0))
	(=> (lt_0 x_27 y_2)
	    (mod_0 x_27 x_27 y_2))))
(assert (forall ((x_27 Nat_0) (y_2 Nat_0) (r_0 Nat_0) (z_2 Nat_0))
	(=>	(and (ge_0 x_27 y_2)
			(minus_0 z_2 x_27 y_2)
			(mod_0 r_0 z_2 y_2))
		(mod_0 r_0 x_27 y_2))))
(declare-datatypes ((Bin_0 0)) (((One_0 ) (ZeroAnd_0 (projZeroAnd_0 Bin_0)) (OneAnd_0 (projOneAnd_0 Bin_0)))))
(declare-fun diseqBin_0 (Bin_0 Bin_0) Bool)
(declare-fun projZeroAnd_1 (Bin_0 Bin_0) Bool)
(declare-fun projOneAnd_1 (Bin_0 Bin_0) Bool)
(declare-fun isOne_0 (Bin_0) Bool)
(declare-fun isZeroAnd_0 (Bin_0) Bool)
(declare-fun isOneAnd_0 (Bin_0) Bool)
(assert (forall ((x_38 Bin_0) (x_37 Bin_0))
	(=> (= x_38 (ZeroAnd_0 x_37))
	    (projZeroAnd_1 x_37 x_38))))
(assert (forall ((x_40 Bin_0) (x_39 Bin_0))
	(=> (= x_40 (OneAnd_0 x_39))
	    (projOneAnd_1 x_39 x_40))))
(assert (isOne_0 One_0))
(assert (forall ((x_41 Bin_0))
	(isZeroAnd_0 (ZeroAnd_0 x_41))))
(assert (forall ((x_42 Bin_0))
	(isOneAnd_0 (OneAnd_0 x_42))))
(assert (forall ((x_43 Bin_0))
	(diseqBin_0 One_0 (ZeroAnd_0 x_43))))
(assert (forall ((x_44 Bin_0))
	(diseqBin_0 One_0 (OneAnd_0 x_44))))
(assert (forall ((x_45 Bin_0))
	(diseqBin_0 (ZeroAnd_0 x_45) One_0)))
(assert (forall ((x_46 Bin_0))
	(diseqBin_0 (OneAnd_0 x_46) One_0)))
(assert (forall ((x_47 Bin_0) (x_48 Bin_0))
	(diseqBin_0 (ZeroAnd_0 x_47) (OneAnd_0 x_48))))
(assert (forall ((x_49 Bin_0) (x_50 Bin_0))
	(diseqBin_0 (OneAnd_0 x_49) (ZeroAnd_0 x_50))))
(assert (forall ((x_51 Bin_0) (x_52 Bin_0))
	(=> (diseqBin_0 x_51 x_52)
	    (diseqBin_0 (ZeroAnd_0 x_51) (ZeroAnd_0 x_52)))))
(assert (forall ((x_53 Bin_0) (x_54 Bin_0))
	(=> (diseqBin_0 x_53 x_54)
	    (diseqBin_0 (OneAnd_0 x_53) (OneAnd_0 x_54)))))
(declare-fun s_0 (Bin_0 Bin_0) Bool)
(assert (forall ((x_0 Bin_0) (ys_0 Bin_0) (x_4 Bin_0) (x_5 Bin_0))
	(=>	(and (= x_4 (ZeroAnd_0 x_5))
			(s_0 x_5 ys_0)
			(= x_0 (OneAnd_0 ys_0)))
		(s_0 x_4 x_0))))
(assert (forall ((x_0 Bin_0) (xs_0 Bin_0) (x_6 Bin_0))
	(=>	(and (= x_6 (OneAnd_0 xs_0))
			(= x_0 (ZeroAnd_0 xs_0)))
		(s_0 x_6 x_0))))
(assert (forall ((x_0 Bin_0) (x_7 Bin_0))
	(=>	(and (= x_7 (ZeroAnd_0 One_0))
			(= x_0 One_0))
		(s_0 x_7 x_0))))
(declare-fun plus_0 (Bin_0 Bin_0 Bin_0) Bool)
(assert (forall ((x_1 Bin_0) (y_0 Bin_0) (x_2 Bin_0) (ys_1 Bin_0) (x_8 Bin_0) (x_9 Bin_0) (x_10 Bin_0))
	(=>	(and (= x_8 (ZeroAnd_0 x_10))
			(plus_0 x_9 x_2 ys_1)
			(s_0 x_10 x_9)
			(= x_1 (OneAnd_0 x_2))
			(= y_0 (OneAnd_0 ys_1)))
		(plus_0 x_8 x_1 y_0))))
(assert (forall ((x_1 Bin_0) (y_0 Bin_0) (x_2 Bin_0) (zs_0 Bin_0) (x_11 Bin_0) (x_12 Bin_0))
	(=>	(and (= x_11 (OneAnd_0 x_12))
			(plus_0 x_12 x_2 zs_0)
			(= x_1 (OneAnd_0 x_2))
			(= y_0 (ZeroAnd_0 zs_0)))
		(plus_0 x_11 x_1 y_0))))
(assert (forall ((x_1 Bin_0) (y_0 Bin_0) (x_2 Bin_0) (x_13 Bin_0) (x_14 Bin_0))
	(=>	(and (= x_13 x_14)
			(s_0 x_14 (OneAnd_0 x_2))
			(= x_1 (OneAnd_0 x_2))
			(= y_0 One_0))
		(plus_0 x_13 x_1 y_0))))
(assert (forall ((x_1 Bin_0) (y_0 Bin_0) (z_0 Bin_0) (xs_1 Bin_0) (x_15 Bin_0) (x_16 Bin_0))
	(=>	(and (= x_15 (OneAnd_0 x_16))
			(plus_0 x_16 z_0 xs_1)
			(= x_1 (ZeroAnd_0 z_0))
			(= y_0 (OneAnd_0 xs_1)))
		(plus_0 x_15 x_1 y_0))))
(assert (forall ((x_1 Bin_0) (y_0 Bin_0) (z_0 Bin_0) (ys_2 Bin_0) (x_17 Bin_0) (x_18 Bin_0))
	(=>	(and (= x_17 (ZeroAnd_0 x_18))
			(plus_0 x_18 z_0 ys_2)
			(= x_1 (ZeroAnd_0 z_0))
			(= y_0 (ZeroAnd_0 ys_2)))
		(plus_0 x_17 x_1 y_0))))
(assert (forall ((x_1 Bin_0) (y_0 Bin_0) (z_0 Bin_0) (x_19 Bin_0) (x_20 Bin_0))
	(=>	(and (= x_19 x_20)
			(s_0 x_20 (ZeroAnd_0 z_0))
			(= x_1 (ZeroAnd_0 z_0))
			(= y_0 One_0))
		(plus_0 x_19 x_1 y_0))))
(assert (forall ((x_1 Bin_0) (y_0 Bin_0) (x_21 Bin_0) (x_22 Bin_0))
	(=>	(and (= x_21 x_22)
			(s_0 x_22 y_0)
			(= x_1 One_0))
		(plus_0 x_21 x_1 y_0))))
(assert (forall ((x_3 Bin_0) (y_1 Bin_0) (z_1 Bin_0) (x_23 Bin_0) (x_24 Bin_0) (x_25 Bin_0) (x_26 Bin_0))
	(=>	(and (diseqBin_0 x_24 x_26)
			(plus_0 x_23 y_1 z_1)
			(plus_0 x_24 x_3 x_23)
			(plus_0 x_25 x_3 y_1)
			(plus_0 x_26 x_25 z_1))
		false)))
(check-sat)
