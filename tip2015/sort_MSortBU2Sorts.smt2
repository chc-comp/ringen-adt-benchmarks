(set-logic HORN)
(declare-datatypes ((Nat_0 0)) (((Z_4 ) (Z_5 (unS_0 Nat_0)))))
(declare-fun le_0 (Nat_0 Nat_0) Bool)
(declare-fun gt_0 (Nat_0 Nat_0) Bool)
(declare-datatypes ((Bool_0 0)) (((false_0 ) (true_0 ))))
(declare-fun diseqBool_0 (Bool_0 Bool_0) Bool)
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-datatypes ((list_1 0)) (((nil_1 ) (cons_1 (head_1 list_0) (tail_1 list_1)))))
(declare-fun risers_0 (list_1 list_0) Bool)
(declare-fun ordered_0 (Bool_0 list_0) Bool)
(declare-fun lmerge_0 (list_0 list_0 list_0) Bool)
(declare-fun pairwise_0 (list_1 list_1) Bool)
(declare-fun mergingbu_0 (list_0 list_1) Bool)
(declare-fun msortbu_0 (list_0 list_0) Bool)
(assert (forall ((y_7 Nat_0))
	(le_0 Z_4 y_7)))
(assert (forall ((x_46 Nat_0) (y_7 Nat_0))
	(=> (le_0 x_46 y_7) (le_0 (Z_5 x_46) (Z_5 y_7)))))
(assert (forall ((y_7 Nat_0))
	(gt_0 (Z_5 y_7) Z_4)))
(assert (forall ((x_46 Nat_0) (y_7 Nat_0))
	(=> (gt_0 x_46 y_7) (gt_0 (Z_5 x_46) (Z_5 y_7)))))
(assert (diseqBool_0 false_0 true_0))
(assert (diseqBool_0 true_0 false_0))
(assert (forall ((ys_0 list_0) (yss_0 list_1) (y_1 Nat_0) (xs_0 list_0) (y_0 Nat_0))
	(=> (and (le_0 y_0 y_1) (risers_0 (cons_1 ys_0 yss_0) (cons_0 y_1 xs_0))) (risers_0 (cons_1 (cons_0 y_0 ys_0) yss_0) (cons_0 y_0 (cons_0 y_1 xs_0))))))
(assert (forall ((x_13 list_1) (y_1 Nat_0) (xs_0 list_0) (y_0 Nat_0))
	(=> (and (gt_0 y_0 y_1) (risers_0 x_13 (cons_0 y_1 xs_0))) (risers_0 (cons_1 (cons_0 y_0 nil_0) x_13) (cons_0 y_0 (cons_0 y_1 xs_0))))))
(assert (forall ((y_1 Nat_0) (xs_0 list_0) (y_0 Nat_0))
	(=> (and (le_0 y_0 y_1) (risers_0 nil_1 (cons_0 y_1 xs_0))) (risers_0 nil_1 (cons_0 y_0 (cons_0 y_1 xs_0))))))
(assert (forall ((x_17 list_1) (y_1 Nat_0) (xs_0 list_0) (y_0 Nat_0))
	(=> (and (gt_0 y_0 y_1) (risers_0 x_17 (cons_0 y_1 xs_0))) (risers_0 (cons_1 (cons_0 y_0 nil_0) x_17) (cons_0 y_0 (cons_0 y_1 xs_0))))))
(assert (forall ((y_0 Nat_0))
	(risers_0 (cons_1 (cons_0 y_0 nil_0) nil_1) (cons_0 y_0 nil_0))))
(assert (risers_0 nil_1 nil_0))
(assert (forall ((x_20 Bool_0) (y_3 Nat_0) (xs_1 list_0) (y_2 Nat_0))
	(=> (and (le_0 y_2 y_3) (ordered_0 x_20 (cons_0 y_3 xs_1))) (ordered_0 x_20 (cons_0 y_2 (cons_0 y_3 xs_1))))))
(assert (forall ((y_3 Nat_0) (xs_1 list_0) (y_2 Nat_0))
	(=> (gt_0 y_2 y_3) (ordered_0 false_0 (cons_0 y_2 (cons_0 y_3 xs_1))))))
(assert (forall ((y_2 Nat_0))
	(ordered_0 true_0 (cons_0 y_2 nil_0))))
(assert (ordered_0 true_0 nil_0))
(assert (forall ((x_26 list_0) (x_4 Nat_0) (x_5 list_0) (z_2 Nat_0) (x_3 list_0))
	(=> (and (le_0 z_2 x_4) (lmerge_0 x_26 x_3 (cons_0 x_4 x_5))) (lmerge_0 (cons_0 z_2 x_26) (cons_0 z_2 x_3) (cons_0 x_4 x_5)))))
(assert (forall ((x_28 list_0) (x_4 Nat_0) (x_5 list_0) (z_2 Nat_0) (x_3 list_0))
	(=> (and (gt_0 z_2 x_4) (lmerge_0 x_28 (cons_0 z_2 x_3) x_5)) (lmerge_0 (cons_0 x_4 x_28) (cons_0 z_2 x_3) (cons_0 x_4 x_5)))))
(assert (forall ((z_2 Nat_0) (x_3 list_0))
	(lmerge_0 (cons_0 z_2 x_3) (cons_0 z_2 x_3) nil_0)))
(assert (forall ((x_30 list_0))
	(lmerge_0 x_30 nil_0 x_30)))
(assert (forall ((x_32 list_0) (x_33 list_1) (ys_1 list_0) (xss_0 list_1) (xs_2 list_0))
	(=> (and (lmerge_0 x_32 xs_2 ys_1) (pairwise_0 x_33 xss_0)) (pairwise_0 (cons_1 x_32 x_33) (cons_1 xs_2 (cons_1 ys_1 xss_0))))))
(assert (forall ((xs_2 list_0))
	(pairwise_0 (cons_1 xs_2 nil_1) (cons_1 xs_2 nil_1))))
(assert (pairwise_0 nil_1 nil_1))
(assert (forall ((x_36 list_0) (x_37 list_1) (z_3 list_0) (x_8 list_1) (xs_3 list_0))
	(=> (and (pairwise_0 x_37 (cons_1 xs_3 (cons_1 z_3 x_8))) (mergingbu_0 x_36 x_37)) (mergingbu_0 x_36 (cons_1 xs_3 (cons_1 z_3 x_8))))))
(assert (forall ((x_39 list_0))
	(mergingbu_0 x_39 (cons_1 x_39 nil_1))))
(assert (mergingbu_0 nil_0 nil_1))
(assert (forall ((x_41 list_0) (x_42 list_1) (x_9 list_0))
	(=> (and (risers_0 x_42 x_9) (mergingbu_0 x_41 x_42)) (msortbu_0 x_41 x_9))))
(assert (forall ((x_44 list_0) (x_45 Bool_0) (xs_4 list_0))
	(=> (and (diseqBool_0 x_45 true_0) (msortbu_0 x_44 xs_4) (ordered_0 x_45 x_44)) false)))
(check-sat)
(get-model)
