(set-logic HORN)
(declare-datatypes ((Nat_0 0)) (((Z_0 ) (S_0 (unS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun unS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_0 (Nat_0) Bool)
(declare-fun isS_0 (Nat_0) Bool)
(assert (forall ((x_34 Nat_0) (x_33 Nat_0))
	(=> (= x_34 (S_0 x_33))
	    (unS_1 x_33 x_34))))
(assert (isZ_0 Z_0))
(assert (forall ((x_35 Nat_0))
	(isS_0 (S_0 x_35))))
(assert (forall ((x_36 Nat_0))
	(diseqNat_0 Z_0 (S_0 x_36))))
(assert (forall ((x_37 Nat_0))
	(diseqNat_0 (S_0 x_37) Z_0)))
(assert (forall ((x_38 Nat_0) (x_39 Nat_0))
	(=> (diseqNat_0 x_38 x_39)
	    (diseqNat_0 (S_0 x_38) (S_0 x_39)))))
(declare-fun add_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun minus_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun le_0 (Nat_0 Nat_0) Bool)
(declare-fun ge_0 (Nat_0 Nat_0) Bool)
(declare-fun lt_0 (Nat_0 Nat_0) Bool)
(declare-fun gt_0 (Nat_0 Nat_0) Bool)
(declare-fun mult_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun div_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun mod_0 (Nat_0 Nat_0 Nat_0) Bool)
(assert (forall ((y_1 Nat_0))
	(add_0 y_1 Z_0 y_1)))
(assert (forall ((x_31 Nat_0) (y_1 Nat_0) (r_0 Nat_0))
	(=> (add_0 r_0 x_31 y_1)
	    (add_0 (S_0 r_0) (S_0 x_31) y_1))))
(assert (forall ((y_1 Nat_0))
	(minus_0 Z_0 Z_0 y_1)))
(assert (forall ((x_31 Nat_0) (y_1 Nat_0) (r_0 Nat_0))
	(=> (minus_0 r_0 x_31 y_1)
	    (minus_0 (S_0 r_0) (S_0 x_31) y_1))))
(assert (forall ((y_1 Nat_0))
	(le_0 Z_0 y_1)))
(assert (forall ((x_31 Nat_0) (y_1 Nat_0))
	(=> (le_0 x_31 y_1)
	    (le_0 (S_0 x_31) (S_0 y_1)))))
(assert (forall ((y_1 Nat_0))
	(ge_0 y_1 Z_0)))
(assert (forall ((x_31 Nat_0) (y_1 Nat_0))
	(=> (ge_0 x_31 y_1)
	    (ge_0 (S_0 x_31) (S_0 y_1)))))
(assert (forall ((y_1 Nat_0))
	(lt_0 Z_0 (S_0 y_1))))
(assert (forall ((x_31 Nat_0) (y_1 Nat_0))
	(=> (lt_0 x_31 y_1)
	    (lt_0 (S_0 x_31) (S_0 y_1)))))
(assert (forall ((y_1 Nat_0))
	(gt_0 (S_0 y_1) Z_0)))
(assert (forall ((x_31 Nat_0) (y_1 Nat_0))
	(=> (gt_0 x_31 y_1)
	    (gt_0 (S_0 x_31) (S_0 y_1)))))
(assert (forall ((y_1 Nat_0))
	(mult_0 Z_0 Z_0 y_1)))
(assert (forall ((x_31 Nat_0) (y_1 Nat_0) (r_0 Nat_0) (z_0 Nat_0))
	(=>	(and (mult_0 r_0 x_31 y_1)
			(add_0 z_0 r_0 y_1))
		(mult_0 z_0 (S_0 x_31) y_1))))
(assert (forall ((x_31 Nat_0) (y_1 Nat_0))
	(=> (lt_0 x_31 y_1)
	    (div_0 Z_0 x_31 y_1))))
(assert (forall ((x_31 Nat_0) (y_1 Nat_0) (r_0 Nat_0) (z_0 Nat_0))
	(=>	(and (ge_0 x_31 y_1)
			(minus_0 z_0 x_31 y_1)
			(div_0 r_0 z_0 y_1))
		(div_0 (S_0 r_0) x_31 y_1))))
(assert (forall ((x_31 Nat_0) (y_1 Nat_0))
	(=> (lt_0 x_31 y_1)
	    (mod_0 x_31 x_31 y_1))))
(assert (forall ((x_31 Nat_0) (y_1 Nat_0) (r_0 Nat_0) (z_0 Nat_0))
	(=>	(and (ge_0 x_31 y_1)
			(minus_0 z_0 x_31 y_1)
			(mod_0 r_0 z_0 y_1))
		(mod_0 r_0 x_31 y_1))))
(declare-datatypes ((Token_0 0)) (((A_0 ) (B_0 ) (C_0 ) (D_0 ) (ESC_0 ) (P_0 ) (Q_0 ) (R_0 ))))
(declare-fun diseqToken_0 (Token_0 Token_0) Bool)
(declare-fun isA_0 (Token_0) Bool)
(declare-fun isB_0 (Token_0) Bool)
(declare-fun isC_0 (Token_0) Bool)
(declare-fun isD_0 (Token_0) Bool)
(declare-fun isESC_0 (Token_0) Bool)
(declare-fun isP_0 (Token_0) Bool)
(declare-fun isQ_0 (Token_0) Bool)
(declare-fun isR_0 (Token_0) Bool)
(assert (isA_0 A_0))
(assert (isB_0 B_0))
(assert (isC_0 C_0))
(assert (isD_0 D_0))
(assert (isESC_0 ESC_0))
(assert (isP_0 P_0))
(assert (isQ_0 Q_0))
(assert (isR_0 R_0))
(assert (diseqToken_0 A_0 B_0))
(assert (diseqToken_0 A_0 C_0))
(assert (diseqToken_0 A_0 D_0))
(assert (diseqToken_0 A_0 ESC_0))
(assert (diseqToken_0 A_0 P_0))
(assert (diseqToken_0 A_0 Q_0))
(assert (diseqToken_0 A_0 R_0))
(assert (diseqToken_0 B_0 A_0))
(assert (diseqToken_0 C_0 A_0))
(assert (diseqToken_0 D_0 A_0))
(assert (diseqToken_0 ESC_0 A_0))
(assert (diseqToken_0 P_0 A_0))
(assert (diseqToken_0 Q_0 A_0))
(assert (diseqToken_0 R_0 A_0))
(assert (diseqToken_0 B_0 C_0))
(assert (diseqToken_0 B_0 D_0))
(assert (diseqToken_0 B_0 ESC_0))
(assert (diseqToken_0 B_0 P_0))
(assert (diseqToken_0 B_0 Q_0))
(assert (diseqToken_0 B_0 R_0))
(assert (diseqToken_0 C_0 B_0))
(assert (diseqToken_0 D_0 B_0))
(assert (diseqToken_0 ESC_0 B_0))
(assert (diseqToken_0 P_0 B_0))
(assert (diseqToken_0 Q_0 B_0))
(assert (diseqToken_0 R_0 B_0))
(assert (diseqToken_0 C_0 D_0))
(assert (diseqToken_0 C_0 ESC_0))
(assert (diseqToken_0 C_0 P_0))
(assert (diseqToken_0 C_0 Q_0))
(assert (diseqToken_0 C_0 R_0))
(assert (diseqToken_0 D_0 C_0))
(assert (diseqToken_0 ESC_0 C_0))
(assert (diseqToken_0 P_0 C_0))
(assert (diseqToken_0 Q_0 C_0))
(assert (diseqToken_0 R_0 C_0))
(assert (diseqToken_0 D_0 ESC_0))
(assert (diseqToken_0 D_0 P_0))
(assert (diseqToken_0 D_0 Q_0))
(assert (diseqToken_0 D_0 R_0))
(assert (diseqToken_0 ESC_0 D_0))
(assert (diseqToken_0 P_0 D_0))
(assert (diseqToken_0 Q_0 D_0))
(assert (diseqToken_0 R_0 D_0))
(assert (diseqToken_0 ESC_0 P_0))
(assert (diseqToken_0 ESC_0 Q_0))
(assert (diseqToken_0 ESC_0 R_0))
(assert (diseqToken_0 P_0 ESC_0))
(assert (diseqToken_0 Q_0 ESC_0))
(assert (diseqToken_0 R_0 ESC_0))
(assert (diseqToken_0 P_0 Q_0))
(assert (diseqToken_0 P_0 R_0))
(assert (diseqToken_0 Q_0 P_0))
(assert (diseqToken_0 R_0 P_0))
(assert (diseqToken_0 Q_0 R_0))
(assert (diseqToken_0 R_0 Q_0))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Token_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_1 (Token_0 list_0) Bool)
(declare-fun tail_1 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_51 list_0) (x_49 Token_0) (x_50 list_0))
	(=> (= x_51 (cons_0 x_49 x_50))
	    (head_1 x_49 x_51))))
(assert (forall ((x_51 list_0) (x_49 Token_0) (x_50 list_0))
	(=> (= x_51 (cons_0 x_49 x_50))
	    (tail_1 x_50 x_51))))
(assert (isnil_0 nil_0))
(assert (forall ((x_52 Token_0) (x_53 list_0))
	(iscons_0 (cons_0 x_52 x_53))))
(assert (forall ((x_54 Token_0) (x_55 list_0))
	(diseqlist_0 nil_0 (cons_0 x_54 x_55))))
(assert (forall ((x_56 Token_0) (x_57 list_0))
	(diseqlist_0 (cons_0 x_56 x_57) nil_0)))
(assert (forall ((x_58 Token_0) (x_59 list_0) (x_60 Token_0) (x_61 list_0))
	(=> (diseqToken_0 x_58 x_60)
	    (diseqlist_0 (cons_0 x_58 x_59) (cons_0 x_60 x_61)))))
(assert (forall ((x_58 Token_0) (x_59 list_0) (x_60 Token_0) (x_61 list_0))
	(=> (diseqlist_0 x_59 x_61)
	    (diseqlist_0 (cons_0 x_58 x_59) (cons_0 x_60 x_61)))))
(declare-fun isSpecial_0 (Bool Token_0) Bool)
(assert (forall ((x_0 Token_0) (x_5 Bool))
	(=>	(and (= x_5 true)
			(= x_0 R_0))
		(isSpecial_0 x_5 x_0))))
(assert (forall ((x_0 Token_0) (x_6 Bool))
	(=>	(and (= x_6 true)
			(= x_0 Q_0))
		(isSpecial_0 x_6 x_0))))
(assert (forall ((x_0 Token_0) (x_7 Bool))
	(=>	(and (= x_7 true)
			(= x_0 P_0))
		(isSpecial_0 x_7 x_0))))
(assert (forall ((x_0 Token_0) (x_8 Bool))
	(=>	(and (= x_8 true)
			(= x_0 ESC_0))
		(isSpecial_0 x_8 x_0))))
(assert (forall ((x_0 Token_0) (x_1 Token_0) (x_9 Bool))
	(=>	(and (= x_9 false)
			(= x_0 A_0))
		(isSpecial_0 x_9 x_0))))
(assert (forall ((x_0 Token_0) (x_1 Token_0) (x_10 Bool))
	(=>	(and (= x_10 false)
			(= x_0 B_0))
		(isSpecial_0 x_10 x_0))))
(assert (forall ((x_0 Token_0) (x_1 Token_0) (x_11 Bool))
	(=>	(and (= x_11 false)
			(= x_0 C_0))
		(isSpecial_0 x_11 x_0))))
(assert (forall ((x_0 Token_0) (x_1 Token_0) (x_12 Bool))
	(=>	(and (= x_12 false)
			(= x_0 D_0))
		(isSpecial_0 x_12 x_0))))
(declare-fun code_0 (Token_0 Token_0) Bool)
(assert (forall ((x_2 Token_0) (x_13 Token_0))
	(=>	(and (= x_13 C_0)
			(= x_2 R_0))
		(code_0 x_13 x_2))))
(assert (forall ((x_2 Token_0) (x_14 Token_0))
	(=>	(and (= x_14 B_0)
			(= x_2 Q_0))
		(code_0 x_14 x_2))))
(assert (forall ((x_2 Token_0) (x_15 Token_0))
	(=>	(and (= x_15 A_0)
			(= x_2 P_0))
		(code_0 x_15 x_2))))
(assert (forall ((x_2 Token_0) (x_16 Token_0))
	(=>	(and (= x_16 ESC_0)
			(= x_2 ESC_0))
		(code_0 x_16 x_2))))
(assert (forall ((x_2 Token_0) (x_3 Token_0) (x_17 Token_0))
	(=>	(and (= x_17 x_2)
			(= x_2 A_0))
		(code_0 x_17 x_2))))
(assert (forall ((x_2 Token_0) (x_3 Token_0) (x_18 Token_0))
	(=>	(and (= x_18 x_2)
			(= x_2 B_0))
		(code_0 x_18 x_2))))
(assert (forall ((x_2 Token_0) (x_3 Token_0) (x_19 Token_0))
	(=>	(and (= x_19 x_2)
			(= x_2 C_0))
		(code_0 x_19 x_2))))
(assert (forall ((x_2 Token_0) (x_3 Token_0) (x_20 Token_0))
	(=>	(and (= x_20 x_2)
			(= x_2 D_0))
		(code_0 x_20 x_2))))
(declare-fun escape_0 (list_0 list_0) Bool)
(assert (forall ((x_4 list_0) (y_0 Token_0) (xs_0 list_0) (x_22 list_0) (x_23 Token_0) (x_24 list_0) (x_21 Bool))
	(=>	(and (= x_22 (cons_0 ESC_0 (cons_0 x_23 x_24)))
			(code_0 x_23 y_0)
			(escape_0 x_24 xs_0)
			(= x_4 (cons_0 y_0 xs_0))
			(= x_21 true)
			(isSpecial_0 x_21 y_0))
		(escape_0 x_22 x_4))))
(assert (forall ((x_4 list_0) (y_0 Token_0) (xs_0 list_0) (x_26 list_0) (x_27 list_0) (x_25 Bool))
	(=>	(and (= x_26 (cons_0 y_0 x_27))
			(escape_0 x_27 xs_0)
			(= x_4 (cons_0 y_0 xs_0))
			(= x_25 false)
			(isSpecial_0 x_25 y_0))
		(escape_0 x_26 x_4))))
(assert (forall ((x_4 list_0) (x_28 list_0))
	(=>	(and (= x_28 nil_0)
			(= x_4 nil_0))
		(escape_0 x_28 x_4))))
(assert (forall ((xs_1 list_0) (ys_0 list_0) (x_29 list_0) (x_30 list_0))
	(=>	(and (diseqlist_0 xs_1 ys_0)
			(= x_29 x_30)
			(escape_0 x_29 xs_1)
			(escape_0 x_30 ys_0))
		false)))
(check-sat)
