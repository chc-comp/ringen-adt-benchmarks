(set-logic HORN)
(declare-datatypes ((Nat_0 0)) (((Z_0 ) (S_0 (unS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun unS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_0 (Nat_0) Bool)
(declare-fun isS_0 (Nat_0) Bool)
(assert (forall ((x_30 Nat_0) (x_29 Nat_0))
	(=> (= x_30 (S_0 x_29))
	    (unS_1 x_29 x_30))))
(assert (isZ_0 Z_0))
(assert (forall ((x_31 Nat_0))
	(isS_0 (S_0 x_31))))
(assert (forall ((x_32 Nat_0))
	(diseqNat_0 Z_0 (S_0 x_32))))
(assert (forall ((x_33 Nat_0))
	(diseqNat_0 (S_0 x_33) Z_0)))
(assert (forall ((x_34 Nat_0) (x_35 Nat_0))
	(=> (diseqNat_0 x_34 x_35)
	    (diseqNat_0 (S_0 x_34) (S_0 x_35)))))
(declare-fun add_1 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun minus_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun le_0 (Nat_0 Nat_0) Bool)
(declare-fun ge_0 (Nat_0 Nat_0) Bool)
(declare-fun lt_0 (Nat_0 Nat_0) Bool)
(declare-fun gt_0 (Nat_0 Nat_0) Bool)
(declare-fun mult_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun div_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun mod_0 (Nat_0 Nat_0 Nat_0) Bool)
(assert (forall ((y_5 Nat_0))
	(add_1 y_5 Z_0 y_5)))
(assert (forall ((x_27 Nat_0) (y_5 Nat_0) (r_0 Nat_0))
	(=> (add_1 r_0 x_27 y_5)
	    (add_1 (S_0 r_0) (S_0 x_27) y_5))))
(assert (forall ((y_5 Nat_0))
	(minus_0 Z_0 Z_0 y_5)))
(assert (forall ((x_27 Nat_0) (y_5 Nat_0) (r_0 Nat_0))
	(=> (minus_0 r_0 x_27 y_5)
	    (minus_0 (S_0 r_0) (S_0 x_27) y_5))))
(assert (forall ((y_5 Nat_0))
	(le_0 Z_0 y_5)))
(assert (forall ((x_27 Nat_0) (y_5 Nat_0))
	(=> (le_0 x_27 y_5)
	    (le_0 (S_0 x_27) (S_0 y_5)))))
(assert (forall ((y_5 Nat_0))
	(ge_0 y_5 Z_0)))
(assert (forall ((x_27 Nat_0) (y_5 Nat_0))
	(=> (ge_0 x_27 y_5)
	    (ge_0 (S_0 x_27) (S_0 y_5)))))
(assert (forall ((y_5 Nat_0))
	(lt_0 Z_0 (S_0 y_5))))
(assert (forall ((x_27 Nat_0) (y_5 Nat_0))
	(=> (lt_0 x_27 y_5)
	    (lt_0 (S_0 x_27) (S_0 y_5)))))
(assert (forall ((y_5 Nat_0))
	(gt_0 (S_0 y_5) Z_0)))
(assert (forall ((x_27 Nat_0) (y_5 Nat_0))
	(=> (gt_0 x_27 y_5)
	    (gt_0 (S_0 x_27) (S_0 y_5)))))
(assert (forall ((y_5 Nat_0))
	(mult_0 Z_0 Z_0 y_5)))
(assert (forall ((x_27 Nat_0) (y_5 Nat_0) (r_0 Nat_0) (z_3 Nat_0))
	(=>	(and (mult_0 r_0 x_27 y_5)
			(add_1 z_3 r_0 y_5))
		(mult_0 z_3 (S_0 x_27) y_5))))
(assert (forall ((x_27 Nat_0) (y_5 Nat_0))
	(=> (lt_0 x_27 y_5)
	    (div_0 Z_0 x_27 y_5))))
(assert (forall ((x_27 Nat_0) (y_5 Nat_0) (r_0 Nat_0) (z_3 Nat_0))
	(=>	(and (ge_0 x_27 y_5)
			(minus_0 z_3 x_27 y_5)
			(div_0 r_0 z_3 y_5))
		(div_0 (S_0 r_0) x_27 y_5))))
(assert (forall ((x_27 Nat_0) (y_5 Nat_0))
	(=> (lt_0 x_27 y_5)
	    (mod_0 x_27 x_27 y_5))))
(assert (forall ((x_27 Nat_0) (y_5 Nat_0) (r_0 Nat_0) (z_3 Nat_0))
	(=>	(and (ge_0 x_27 y_5)
			(minus_0 z_3 x_27 y_5)
			(mod_0 r_0 z_3 y_5))
		(mod_0 r_0 x_27 y_5))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_1 (Nat_0 list_0) Bool)
(declare-fun tail_1 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_39 list_0) (x_37 Nat_0) (x_38 list_0))
	(=> (= x_39 (cons_0 x_37 x_38))
	    (head_1 x_37 x_39))))
(assert (forall ((x_39 list_0) (x_37 Nat_0) (x_38 list_0))
	(=> (= x_39 (cons_0 x_37 x_38))
	    (tail_1 x_38 x_39))))
(assert (isnil_0 nil_0))
(assert (forall ((x_40 Nat_0) (x_41 list_0))
	(iscons_0 (cons_0 x_40 x_41))))
(assert (forall ((x_42 Nat_0) (x_43 list_0))
	(diseqlist_0 nil_0 (cons_0 x_42 x_43))))
(assert (forall ((x_44 Nat_0) (x_45 list_0))
	(diseqlist_0 (cons_0 x_44 x_45) nil_0)))
(assert (forall ((x_46 Nat_0) (x_47 list_0) (x_48 Nat_0) (x_49 list_0))
	(=> (diseqNat_0 x_46 x_48)
	    (diseqlist_0 (cons_0 x_46 x_47) (cons_0 x_48 x_49)))))
(assert (forall ((x_46 Nat_0) (x_47 list_0) (x_48 Nat_0) (x_49 list_0))
	(=> (diseqlist_0 x_47 x_49)
	    (diseqlist_0 (cons_0 x_46 x_47) (cons_0 x_48 x_49)))))
(declare-datatypes ((Tree_0 0)) (((TNode_0 (projTNode_0 Tree_0) (projTNode_1 Nat_0) (projTNode_2 Tree_0)) (TNil_0 ))))
(declare-fun diseqTree_0 (Tree_0 Tree_0) Bool)
(declare-fun projTNode_3 (Tree_0 Tree_0) Bool)
(declare-fun projTNode_4 (Nat_0 Tree_0) Bool)
(declare-fun projTNode_5 (Tree_0 Tree_0) Bool)
(declare-fun isTNode_0 (Tree_0) Bool)
(declare-fun isTNil_0 (Tree_0) Bool)
(assert (forall ((x_53 Tree_0) (x_50 Tree_0) (x_51 Nat_0) (x_52 Tree_0))
	(=> (= x_53 (TNode_0 x_50 x_51 x_52))
	    (projTNode_3 x_50 x_53))))
(assert (forall ((x_53 Tree_0) (x_50 Tree_0) (x_51 Nat_0) (x_52 Tree_0))
	(=> (= x_53 (TNode_0 x_50 x_51 x_52))
	    (projTNode_4 x_51 x_53))))
(assert (forall ((x_53 Tree_0) (x_50 Tree_0) (x_51 Nat_0) (x_52 Tree_0))
	(=> (= x_53 (TNode_0 x_50 x_51 x_52))
	    (projTNode_5 x_52 x_53))))
(assert (forall ((x_55 Tree_0) (x_56 Nat_0) (x_57 Tree_0))
	(isTNode_0 (TNode_0 x_55 x_56 x_57))))
(assert (isTNil_0 TNil_0))
(assert (forall ((x_58 Tree_0) (x_59 Nat_0) (x_60 Tree_0))
	(diseqTree_0 (TNode_0 x_58 x_59 x_60) TNil_0)))
(assert (forall ((x_61 Tree_0) (x_62 Nat_0) (x_63 Tree_0))
	(diseqTree_0 TNil_0 (TNode_0 x_61 x_62 x_63))))
(assert (forall ((x_64 Tree_0) (x_65 Nat_0) (x_66 Tree_0) (x_67 Tree_0) (x_68 Nat_0) (x_69 Tree_0))
	(=> (diseqTree_0 x_64 x_67)
	    (diseqTree_0 (TNode_0 x_64 x_65 x_66) (TNode_0 x_67 x_68 x_69)))))
(assert (forall ((x_64 Tree_0) (x_65 Nat_0) (x_66 Tree_0) (x_67 Tree_0) (x_68 Nat_0) (x_69 Tree_0))
	(=> (diseqNat_0 x_65 x_68)
	    (diseqTree_0 (TNode_0 x_64 x_65 x_66) (TNode_0 x_67 x_68 x_69)))))
(assert (forall ((x_64 Tree_0) (x_65 Nat_0) (x_66 Tree_0) (x_67 Tree_0) (x_68 Nat_0) (x_69 Tree_0))
	(=> (diseqTree_0 x_66 x_69)
	    (diseqTree_0 (TNode_0 x_64 x_65 x_66) (TNode_0 x_67 x_68 x_69)))))
(declare-fun ordered_0 (Bool list_0) Bool)
(assert (forall ((x_0 list_0) (y_0 Nat_0) (z_0 list_0) (y_1 Nat_0) (xs_0 list_0) (x_5 Bool) (x_6 Bool))
	(=>	(and (= x_5 (and (le_0 y_0 y_1) x_6))
			(ordered_0 x_6 (cons_0 y_1 xs_0))
			(= x_0 (cons_0 y_0 z_0))
			(= z_0 (cons_0 y_1 xs_0)))
		(ordered_0 x_5 x_0))))
(assert (forall ((x_0 list_0) (y_0 Nat_0) (z_0 list_0) (x_7 Bool))
	(=>	(and (= x_7 true)
			(= x_0 (cons_0 y_0 z_0))
			(= z_0 nil_0))
		(ordered_0 x_7 x_0))))
(assert (forall ((x_0 list_0) (x_8 Bool))
	(=>	(and (= x_8 true)
			(= x_0 nil_0))
		(ordered_0 x_8 x_0))))
(declare-fun flatten_0 (list_0 Tree_0 list_0) Bool)
(assert (forall ((x_1 Tree_0) (y_2 list_0) (x_9 list_0))
	(=>	(and (= x_9 y_2)
			(= x_1 TNil_0))
		(flatten_0 x_9 x_1 y_2))))
(assert (forall ((x_1 Tree_0) (y_2 list_0) (p_0 Tree_0) (z_1 Nat_0) (q_0 Tree_0) (x_10 list_0) (x_11 list_0) (x_12 list_0))
	(=>	(and (= x_10 x_12)
			(flatten_0 x_11 q_0 y_2)
			(flatten_0 x_12 p_0 (cons_0 z_1 x_11))
			(= x_1 (TNode_0 p_0 z_1 q_0)))
		(flatten_0 x_10 x_1 y_2))))
(declare-fun add_0 (Tree_0 Nat_0 Tree_0) Bool)
(assert (forall ((x_2 Nat_0) (y_3 Tree_0) (x_13 Tree_0))
	(=>	(and (= x_13 (TNode_0 TNil_0 x_2 TNil_0))
			(= y_3 TNil_0))
		(add_0 x_13 x_2 y_3))))
(assert (forall ((x_2 Nat_0) (y_3 Tree_0) (p_1 Tree_0) (z_2 Nat_0) (q_1 Tree_0) (x_14 Tree_0) (x_15 Tree_0))
	(=>	(and (= x_14 (TNode_0 x_15 z_2 q_1))
			(add_0 x_15 x_2 p_1)
			(= y_3 (TNode_0 p_1 z_2 q_1))
			(le_0 x_2 z_2))
		(add_0 x_14 x_2 y_3))))
(assert (forall ((x_2 Nat_0) (y_3 Tree_0) (p_1 Tree_0) (z_2 Nat_0) (q_1 Tree_0) (x_16 Tree_0) (x_17 Tree_0))
	(=>	(and (= x_16 (TNode_0 p_1 z_2 x_17))
			(add_0 x_17 x_2 q_1)
			(= y_3 (TNode_0 p_1 z_2 q_1))
			(gt_0 x_2 z_2))
		(add_0 x_16 x_2 y_3))))
(declare-fun toTree_0 (Tree_0 list_0) Bool)
(assert (forall ((x_3 list_0) (y_4 Nat_0) (xs_1 list_0) (x_18 Tree_0) (x_19 Tree_0) (x_20 Tree_0))
	(=>	(and (= x_18 x_20)
			(toTree_0 x_19 xs_1)
			(add_0 x_20 y_4 x_19)
			(= x_3 (cons_0 y_4 xs_1)))
		(toTree_0 x_18 x_3))))
(assert (forall ((x_3 list_0) (x_21 Tree_0))
	(=>	(and (= x_21 TNil_0)
			(= x_3 nil_0))
		(toTree_0 x_21 x_3))))
(declare-fun tsort_0 (list_0 list_0) Bool)
(assert (forall ((x_4 list_0) (x_22 list_0) (x_23 Tree_0) (x_24 list_0))
	(=>	(and (= x_22 x_24)
			(toTree_0 x_23 x_4)
			(flatten_0 x_24 x_23 nil_0))
		(tsort_0 x_22 x_4))))
(assert (forall ((xs_2 list_0) (x_25 list_0) (x_26 Bool))
	(=>	(and (= x_26 false)
			(tsort_0 x_25 xs_2)
			(ordered_0 x_26 x_25))
		false)))
(check-sat)
