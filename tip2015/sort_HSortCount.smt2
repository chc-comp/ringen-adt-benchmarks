(set-logic HORN)
(declare-datatypes ((Nat_0 0)) (((Z_4 ) (Z_5 (unS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun add_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun le_0 (Nat_0 Nat_0) Bool)
(declare-fun gt_0 (Nat_0 Nat_0) Bool)
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-datatypes ((Heap_0 0)) (((Node_0 (projNode_0 Heap_0) (projNode_1 Nat_0) (projNode_2 Heap_0)) (Nil_1 ))))
(declare-datatypes ((list_1 0)) (((nil_2 ) (cons_1 (head_1 Heap_0) (tail_1 list_1)))))
(declare-fun toHeap_0 (list_1 list_0) Bool)
(declare-fun hmerge_0 (Heap_0 Heap_0 Heap_0) Bool)
(declare-fun hpairwise_0 (list_1 list_1) Bool)
(declare-fun hmerging_0 (Heap_0 list_1) Bool)
(declare-fun toHeap_1 (Heap_0 list_0) Bool)
(declare-fun toList_0 (list_0 Heap_0) Bool)
(declare-fun hsort_0 (list_0 list_0) Bool)
(declare-fun count_0 (Nat_0 Nat_0 list_0) Bool)
(assert (forall ((x_58 Nat_0))
	(diseqNat_0 Z_4 (Z_5 x_58))))
(assert (forall ((x_59 Nat_0))
	(diseqNat_0 (Z_5 x_59) Z_4)))
(assert (forall ((x_60 Nat_0) (x_61 Nat_0))
	(=> (diseqNat_0 x_60 x_61) (diseqNat_0 (Z_5 x_60) (Z_5 x_61)))))
(assert (forall ((y_6 Nat_0))
	(add_0 y_6 Z_4 y_6)))
(assert (forall ((r_0 Nat_0) (x_52 Nat_0) (y_6 Nat_0))
	(=> (add_0 r_0 x_52 y_6) (add_0 (Z_5 r_0) (Z_5 x_52) y_6))))
(assert (forall ((y_6 Nat_0))
	(le_0 Z_4 y_6)))
(assert (forall ((x_52 Nat_0) (y_6 Nat_0))
	(=> (le_0 x_52 y_6) (le_0 (Z_5 x_52) (Z_5 y_6)))))
(assert (forall ((y_6 Nat_0))
	(gt_0 (Z_5 y_6) Z_4)))
(assert (forall ((x_52 Nat_0) (y_6 Nat_0))
	(=> (gt_0 x_52 y_6) (gt_0 (Z_5 x_52) (Z_5 y_6)))))
(assert (forall ((x_16 list_1) (y_0 Nat_0) (z_0 list_0))
	(=> (toHeap_0 x_16 z_0) (toHeap_0 (cons_1 (Node_0 Nil_1 y_0 Nil_1) x_16) (cons_0 y_0 z_0)))))
(assert (toHeap_0 nil_2 nil_0))
(assert (forall ((x_18 Heap_0))
	(hmerge_0 x_18 Nil_1 x_18)))
(assert (forall ((z_1 Heap_0) (x_2 Nat_0) (x_3 Heap_0))
	(hmerge_0 (Node_0 z_1 x_2 x_3) (Node_0 z_1 x_2 x_3) Nil_1)))
(assert (forall ((x_21 Heap_0) (x_4 Heap_0) (x_5 Nat_0) (x_6 Heap_0) (z_1 Heap_0) (x_2 Nat_0) (x_3 Heap_0))
	(=> (and (le_0 x_2 x_5) (hmerge_0 x_21 x_3 (Node_0 x_4 x_5 x_6))) (hmerge_0 (Node_0 x_21 x_2 z_1) (Node_0 z_1 x_2 x_3) (Node_0 x_4 x_5 x_6)))))
(assert (forall ((x_23 Heap_0) (x_4 Heap_0) (x_5 Nat_0) (x_6 Heap_0) (z_1 Heap_0) (x_2 Nat_0) (x_3 Heap_0))
	(=> (and (gt_0 x_2 x_5) (hmerge_0 x_23 (Node_0 z_1 x_2 x_3) x_6)) (hmerge_0 (Node_0 x_23 x_5 x_4) (Node_0 z_1 x_2 x_3) (Node_0 x_4 x_5 x_6)))))
(assert (forall ((x_25 Heap_0) (x_26 list_1) (q_0 Heap_0) (qs_0 list_1) (p_0 Heap_0))
	(=> (and (hmerge_0 x_25 p_0 q_0) (hpairwise_0 x_26 qs_0)) (hpairwise_0 (cons_1 x_25 x_26) (cons_1 p_0 (cons_1 q_0 qs_0))))))
(assert (forall ((p_0 Heap_0))
	(hpairwise_0 (cons_1 p_0 nil_2) (cons_1 p_0 nil_2))))
(assert (hpairwise_0 nil_2 nil_2))
(assert (forall ((x_29 Heap_0) (x_30 list_1) (z_2 Heap_0) (x_9 list_1) (p_1 Heap_0))
	(=> (and (hpairwise_0 x_30 (cons_1 p_1 (cons_1 z_2 x_9))) (hmerging_0 x_29 x_30)) (hmerging_0 x_29 (cons_1 p_1 (cons_1 z_2 x_9))))))
(assert (forall ((p_1 Heap_0))
	(hmerging_0 p_1 (cons_1 p_1 nil_2))))
(assert (hmerging_0 Nil_1 nil_2))
(assert (forall ((x_34 Heap_0) (x_35 list_1) (x_10 list_0))
	(=> (and (toHeap_0 x_35 x_10) (hmerging_0 x_34 x_35)) (toHeap_1 x_34 x_10))))
(assert (toList_0 nil_0 Nil_1))
(assert (forall ((x_39 Heap_0) (x_40 list_0) (p_2 Heap_0) (y_4 Nat_0) (q_1 Heap_0))
	(=> (and (hmerge_0 x_39 p_2 q_1) (toList_0 x_40 x_39)) (toList_0 (cons_0 y_4 x_40) (Node_0 p_2 y_4 q_1)))))
(assert (forall ((x_41 list_0) (x_42 Heap_0) (x_12 list_0))
	(=> (and (toHeap_1 x_42 x_12) (toList_0 x_41 x_42)) (hsort_0 x_41 x_12))))
(assert (forall ((x_44 Nat_0) (x_45 Nat_0) (ys_0 list_0) (x_13 Nat_0))
	(=> (and (count_0 x_45 x_13 ys_0) (add_0 x_44 (Z_5 Z_4) x_45)) (count_0 x_44 x_13 (cons_0 x_13 ys_0)))))
(assert (forall ((x_46 Nat_0) (z_3 Nat_0) (ys_0 list_0) (x_13 Nat_0))
	(=> (and (diseqNat_0 x_13 z_3) (count_0 x_46 x_13 ys_0)) (count_0 x_46 x_13 (cons_0 z_3 ys_0)))))
(assert (forall ((x_13 Nat_0))
	(count_0 Z_4 x_13 nil_0)))
(assert (forall ((x_49 list_0) (x_50 Nat_0) (x_51 Nat_0) (x_14 Nat_0) (xs_0 list_0))
	(=> (and (diseqNat_0 x_50 x_51) (hsort_0 x_49 xs_0) (count_0 x_50 x_14 x_49) (count_0 x_51 x_14 xs_0)) false)))
(check-sat)
(get-model)
