(set-logic HORN)
(declare-datatypes ((Bool_0 0)) (((false_0 ) (true_0 ))))
(declare-fun diseqBool_0 (Bool_0 Bool_0) Bool)
(declare-datatypes ((Token_0 0)) (((A_0 ) (B_0 ) (C_0 ) (D_0 ) (ESC_0 ) (P_0 ) (Q_0 ) (R_0 ))))
(declare-fun diseqToken_0 (Token_0 Token_0) Bool)
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Token_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun isSpecial_0 (Bool_0 Token_0) Bool)
(declare-fun code_0 (Token_0 Token_0) Bool)
(declare-fun escape_0 (list_0 list_0) Bool)
(assert (diseqBool_0 false_0 true_0))
(assert (diseqBool_0 true_0 false_0))
(assert (diseqToken_0 A_0 B_0))
(assert (diseqToken_0 A_0 C_0))
(assert (diseqToken_0 A_0 D_0))
(assert (diseqToken_0 A_0 ESC_0))
(assert (diseqToken_0 A_0 P_0))
(assert (diseqToken_0 A_0 Q_0))
(assert (diseqToken_0 A_0 R_0))
(assert (diseqToken_0 B_0 A_0))
(assert (diseqToken_0 C_0 A_0))
(assert (diseqToken_0 D_0 A_0))
(assert (diseqToken_0 ESC_0 A_0))
(assert (diseqToken_0 P_0 A_0))
(assert (diseqToken_0 Q_0 A_0))
(assert (diseqToken_0 R_0 A_0))
(assert (diseqToken_0 B_0 C_0))
(assert (diseqToken_0 B_0 D_0))
(assert (diseqToken_0 B_0 ESC_0))
(assert (diseqToken_0 B_0 P_0))
(assert (diseqToken_0 B_0 Q_0))
(assert (diseqToken_0 B_0 R_0))
(assert (diseqToken_0 C_0 B_0))
(assert (diseqToken_0 D_0 B_0))
(assert (diseqToken_0 ESC_0 B_0))
(assert (diseqToken_0 P_0 B_0))
(assert (diseqToken_0 Q_0 B_0))
(assert (diseqToken_0 R_0 B_0))
(assert (diseqToken_0 C_0 D_0))
(assert (diseqToken_0 C_0 ESC_0))
(assert (diseqToken_0 C_0 P_0))
(assert (diseqToken_0 C_0 Q_0))
(assert (diseqToken_0 C_0 R_0))
(assert (diseqToken_0 D_0 C_0))
(assert (diseqToken_0 ESC_0 C_0))
(assert (diseqToken_0 P_0 C_0))
(assert (diseqToken_0 Q_0 C_0))
(assert (diseqToken_0 R_0 C_0))
(assert (diseqToken_0 D_0 ESC_0))
(assert (diseqToken_0 D_0 P_0))
(assert (diseqToken_0 D_0 Q_0))
(assert (diseqToken_0 D_0 R_0))
(assert (diseqToken_0 ESC_0 D_0))
(assert (diseqToken_0 P_0 D_0))
(assert (diseqToken_0 Q_0 D_0))
(assert (diseqToken_0 R_0 D_0))
(assert (diseqToken_0 ESC_0 P_0))
(assert (diseqToken_0 ESC_0 Q_0))
(assert (diseqToken_0 ESC_0 R_0))
(assert (diseqToken_0 P_0 ESC_0))
(assert (diseqToken_0 Q_0 ESC_0))
(assert (diseqToken_0 R_0 ESC_0))
(assert (diseqToken_0 P_0 Q_0))
(assert (diseqToken_0 P_0 R_0))
(assert (diseqToken_0 Q_0 P_0))
(assert (diseqToken_0 R_0 P_0))
(assert (diseqToken_0 Q_0 R_0))
(assert (diseqToken_0 R_0 Q_0))
(assert (forall ((x_48 Token_0) (x_49 list_0))
	(diseqlist_0 nil_0 (cons_0 x_48 x_49))))
(assert (forall ((x_50 Token_0) (x_51 list_0))
	(diseqlist_0 (cons_0 x_50 x_51) nil_0)))
(assert (forall ((x_52 Token_0) (x_53 list_0) (x_54 Token_0) (x_55 list_0))
	(=> (diseqToken_0 x_52 x_54) (diseqlist_0 (cons_0 x_52 x_53) (cons_0 x_54 x_55)))))
(assert (forall ((x_52 Token_0) (x_53 list_0) (x_54 Token_0) (x_55 list_0))
	(=> (diseqlist_0 x_53 x_55) (diseqlist_0 (cons_0 x_52 x_53) (cons_0 x_54 x_55)))))
(assert (isSpecial_0 true_0 R_0))
(assert (isSpecial_0 true_0 Q_0))
(assert (isSpecial_0 true_0 P_0))
(assert (isSpecial_0 true_0 ESC_0))
(assert (forall ((x_1 Token_0))
	(isSpecial_0 false_0 A_0)))
(assert (forall ((x_1 Token_0))
	(isSpecial_0 false_0 B_0)))
(assert (forall ((x_1 Token_0))
	(isSpecial_0 false_0 C_0)))
(assert (forall ((x_1 Token_0))
	(isSpecial_0 false_0 D_0)))
(assert (code_0 C_0 R_0))
(assert (code_0 B_0 Q_0))
(assert (code_0 A_0 P_0))
(assert (code_0 ESC_0 ESC_0))
(assert (forall ((x_3 Token_0))
	(code_0 A_0 A_0)))
(assert (forall ((x_3 Token_0))
	(code_0 B_0 B_0)))
(assert (forall ((x_3 Token_0))
	(code_0 C_0 C_0)))
(assert (forall ((x_3 Token_0))
	(code_0 D_0 D_0)))
(assert (forall ((x_23 Token_0) (x_24 list_0) (y_0 Token_0) (xs_0 list_0))
	(=> (and (code_0 x_23 y_0) (escape_0 x_24 xs_0) (isSpecial_0 true_0 y_0)) (escape_0 (cons_0 ESC_0 (cons_0 x_23 x_24)) (cons_0 y_0 xs_0)))))
(assert (forall ((x_27 list_0) (x_25 Bool_0) (y_0 Token_0) (xs_0 list_0))
	(=> (and (diseqBool_0 x_25 true_0) (escape_0 x_27 xs_0) (isSpecial_0 x_25 y_0)) (escape_0 (cons_0 y_0 x_27) (cons_0 y_0 xs_0)))))
(assert (escape_0 nil_0 nil_0))
(assert (forall ((x_29 list_0) (xs_1 list_0) (ys_0 list_0))
	(=> (and (diseqlist_0 xs_1 ys_0) (escape_0 x_29 xs_1) (escape_0 x_29 ys_0)) false)))
(check-sat)
(get-model)
