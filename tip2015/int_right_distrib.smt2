(set-logic HORN)
(declare-datatypes ((Sign_0 0)) (((Pos_0 ) (Neg_0 ))))
(declare-datatypes ((Nat_0 0)) (((zero_0 ) (succ_0 (p_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-datatypes ((Integer_0 0)) (((P_1 (projP_0 Nat_0)) (N_0 (projN_0 Nat_0)))))
(declare-fun diseqInteger_0 (Integer_0 Integer_0) Bool)
(declare-fun toInteger_0 (Integer_0 Sign_0 Nat_0) Bool)
(declare-fun sign_1 (Sign_0 Integer_0) Bool)
(declare-fun plus_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun times_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun opposite_0 (Sign_0 Sign_0) Bool)
(declare-fun timesSign_0 (Sign_0 Sign_0 Sign_0) Bool)
(declare-fun absVal_0 (Nat_0 Integer_0) Bool)
(declare-fun times_1 (Integer_0 Integer_0 Integer_0) Bool)
(declare-fun x_8 (Integer_0 Nat_0 Nat_0) Bool)
(declare-fun plus_1 (Integer_0 Integer_0 Integer_0) Bool)
(assert (forall ((x_118 Nat_0))
	(diseqNat_0 zero_0 (succ_0 x_118))))
(assert (forall ((x_119 Nat_0))
	(diseqNat_0 (succ_0 x_119) zero_0)))
(assert (forall ((x_120 Nat_0) (x_121 Nat_0))
	(=> (diseqNat_0 x_120 x_121) (diseqNat_0 (succ_0 x_120) (succ_0 x_121)))))
(assert (forall ((x_128 Nat_0) (x_129 Nat_0))
	(diseqInteger_0 (P_1 x_128) (N_0 x_129))))
(assert (forall ((x_130 Nat_0) (x_131 Nat_0))
	(diseqInteger_0 (N_0 x_130) (P_1 x_131))))
(assert (forall ((x_132 Nat_0) (x_133 Nat_0))
	(=> (diseqNat_0 x_132 x_133) (diseqInteger_0 (P_1 x_132) (P_1 x_133)))))
(assert (forall ((x_134 Nat_0) (x_135 Nat_0))
	(=> (diseqNat_0 x_134 x_135) (diseqInteger_0 (N_0 x_134) (N_0 x_135)))))
(assert (forall ((z_0 Nat_0))
	(toInteger_0 (N_0 z_0) Neg_0 (succ_0 z_0))))
(assert (toInteger_0 (P_1 zero_0) Neg_0 zero_0))
(assert (forall ((y_0 Nat_0))
	(toInteger_0 (P_1 y_0) Pos_0 y_0)))
(assert (forall ((z_1 Nat_0))
	(sign_1 Neg_0 (N_0 z_1))))
(assert (forall ((y_1 Nat_0))
	(sign_1 Pos_0 (P_1 y_1))))
(assert (forall ((x_33 Nat_0) (z_2 Nat_0) (y_2 Nat_0))
	(=> (plus_0 x_33 z_2 y_2) (plus_0 (succ_0 x_33) (succ_0 z_2) y_2))))
(assert (forall ((x_34 Nat_0))
	(plus_0 x_34 zero_0 x_34)))
(assert (forall ((x_35 Nat_0) (x_36 Nat_0) (z_3 Nat_0) (y_3 Nat_0))
	(=> (and (times_0 x_36 z_3 y_3) (plus_0 x_35 y_3 x_36)) (times_0 x_35 (succ_0 z_3) y_3))))
(assert (forall ((y_3 Nat_0))
	(times_0 zero_0 zero_0 y_3)))
(assert (opposite_0 Pos_0 Neg_0))
(assert (opposite_0 Neg_0 Pos_0))
(assert (forall ((x_41 Sign_0) (y_4 Sign_0))
	(=> (opposite_0 x_41 y_4) (timesSign_0 x_41 Neg_0 y_4))))
(assert (forall ((x_43 Sign_0))
	(timesSign_0 x_43 Pos_0 x_43)))
(assert (forall ((x_44 Nat_0) (m_0 Nat_0))
	(=> (plus_0 x_44 (succ_0 zero_0) m_0) (absVal_0 x_44 (N_0 m_0)))))
(assert (forall ((n_1 Nat_0))
	(absVal_0 n_1 (P_1 n_1))))
(assert (forall ((x_47 Integer_0) (x_48 Sign_0) (x_49 Sign_0) (x_50 Sign_0) (x_51 Nat_0) (x_52 Nat_0) (x_53 Nat_0) (x_7 Integer_0) (y_5 Integer_0))
	(=> (and (sign_1 x_48 x_7) (sign_1 x_49 y_5) (timesSign_0 x_50 x_48 x_49) (absVal_0 x_51 x_7) (absVal_0 x_52 y_5) (times_0 x_53 x_51 x_52) (toInteger_0 x_47 x_50 x_53)) (times_1 x_47 x_7 y_5))))
(assert (forall ((x_10 Nat_0) (z_4 Nat_0) (fail_0 Integer_0))
	(=> (x_8 fail_0 x_10 z_4) (x_8 fail_0 (succ_0 x_10) (succ_0 z_4)))))
(assert (forall ((x_11 Nat_0))
	(x_8 (N_0 (succ_0 x_11)) zero_0 (succ_0 x_11))))
(assert (forall ((x_12 Nat_0))
	(x_8 (P_1 (succ_0 x_12)) (succ_0 x_12) zero_0)))
(assert (x_8 (P_1 zero_0) zero_0 zero_0))
(assert (forall ((x_68 Nat_0) (x_69 Nat_0) (n_4 Nat_0) (m_2 Nat_0))
	(=> (and (plus_0 x_68 (succ_0 zero_0) m_2) (plus_0 x_69 x_68 n_4)) (plus_1 (N_0 x_69) (N_0 m_2) (N_0 n_4)))))
(assert (forall ((x_70 Integer_0) (x_71 Nat_0) (n_3 Nat_0) (m_2 Nat_0))
	(=> (and (plus_0 x_71 (succ_0 zero_0) m_2) (x_8 x_70 n_3 x_71)) (plus_1 x_70 (N_0 m_2) (P_1 n_3)))))
(assert (forall ((x_73 Integer_0) (x_74 Nat_0) (o_0 Nat_0) (m_1 Nat_0))
	(=> (and (plus_0 x_74 (succ_0 zero_0) o_0) (x_8 x_73 m_1 x_74)) (plus_1 x_73 (P_1 m_1) (N_0 o_0)))))
(assert (forall ((x_77 Nat_0) (n_2 Nat_0) (m_1 Nat_0))
	(=> (plus_0 x_77 m_1 n_2) (plus_1 (P_1 x_77) (P_1 m_1) (P_1 n_2)))))
(assert (forall ((x_78 Integer_0) (x_79 Integer_0) (x_80 Integer_0) (x_81 Integer_0) (x_82 Integer_0) (x_14 Integer_0) (y_8 Integer_0) (z_5 Integer_0))
	(=> (and (diseqInteger_0 x_79 x_82) (plus_1 x_78 x_14 y_8) (times_1 x_79 x_78 z_5) (times_1 x_80 x_14 z_5) (times_1 x_81 y_8 z_5) (plus_1 x_82 x_80 x_81)) false)))
(assert (forall ((x_83 Nat_0) (x_84 Nat_0) (x_85 Nat_0) (x_86 Nat_0) (x_15 Nat_0) (y_9 Nat_0) (z_6 Nat_0))
	(=> (and (diseqNat_0 x_84 x_86) (times_0 x_83 y_9 z_6) (times_0 x_84 x_15 x_83) (times_0 x_85 x_15 y_9) (times_0 x_86 x_85 z_6)) false)))
(assert (forall ((x_87 Nat_0) (x_88 Nat_0) (x_89 Nat_0) (x_90 Nat_0) (x_16 Nat_0) (y_10 Nat_0) (z_7 Nat_0))
	(=> (and (diseqNat_0 x_88 x_90) (plus_0 x_87 y_10 z_7) (plus_0 x_88 x_16 x_87) (plus_0 x_89 x_16 y_10) (plus_0 x_90 x_89 z_7)) false)))
(assert (forall ((x_91 Nat_0) (x_92 Nat_0) (x_17 Nat_0) (y_11 Nat_0))
	(=> (and (diseqNat_0 x_91 x_92) (times_0 x_91 x_17 y_11) (times_0 x_92 y_11 x_17)) false)))
(assert (forall ((x_93 Nat_0) (x_94 Nat_0) (x_18 Nat_0) (y_12 Nat_0))
	(=> (and (diseqNat_0 x_93 x_94) (plus_0 x_93 x_18 y_12) (plus_0 x_94 y_12 x_18)) false)))
(assert (forall ((x_95 Nat_0) (x_96 Nat_0) (x_97 Nat_0) (x_98 Nat_0) (x_99 Nat_0) (x_19 Nat_0) (y_13 Nat_0) (z_8 Nat_0))
	(=> (and (diseqNat_0 x_96 x_99) (plus_0 x_95 y_13 z_8) (times_0 x_96 x_19 x_95) (times_0 x_97 x_19 y_13) (times_0 x_98 x_19 z_8) (plus_0 x_99 x_97 x_98)) false)))
(assert (forall ((x_100 Nat_0) (x_101 Nat_0) (x_102 Nat_0) (x_103 Nat_0) (x_104 Nat_0) (x_20 Nat_0) (y_14 Nat_0) (z_9 Nat_0))
	(=> (and (diseqNat_0 x_101 x_104) (plus_0 x_100 x_20 y_14) (times_0 x_101 x_100 z_9) (times_0 x_102 x_20 z_9) (times_0 x_103 y_14 z_9) (plus_0 x_104 x_102 x_103)) false)))
(assert (forall ((x_105 Nat_0) (x_21 Nat_0))
	(=> (and (diseqNat_0 x_105 x_21) (times_0 x_105 x_21 (succ_0 zero_0))) false)))
(assert (forall ((x_106 Nat_0) (x_22 Nat_0))
	(=> (and (diseqNat_0 x_106 x_22) (times_0 x_106 (succ_0 zero_0) x_22)) false)))
(assert (forall ((x_107 Nat_0) (x_23 Nat_0))
	(=> (and (diseqNat_0 x_107 x_23) (plus_0 x_107 x_23 zero_0)) false)))
(assert (forall ((x_108 Nat_0) (x_24 Nat_0))
	(=> (and (diseqNat_0 x_108 x_24) (plus_0 x_108 zero_0 x_24)) false)))
(assert (forall ((x_109 Nat_0) (x_25 Nat_0))
	(=> (and (diseqNat_0 x_109 zero_0) (times_0 x_109 x_25 zero_0)) false)))
(assert (forall ((x_110 Nat_0) (x_26 Nat_0))
	(=> (and (diseqNat_0 x_110 zero_0) (times_0 x_110 zero_0 x_26)) false)))
(check-sat)
(get-model)
