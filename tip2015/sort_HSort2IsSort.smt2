(set-logic HORN)
(declare-datatypes ((Nat_0 0)) (((Z_2 ) (Z_3 (unS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun le_0 (Nat_0 Nat_0) Bool)
(declare-fun gt_0 (Nat_0 Nat_0) Bool)
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-datatypes ((Heap_0 0)) (((Node_0 (projNode_0 Heap_0) (projNode_1 Nat_0) (projNode_2 Heap_0)) (Nil_1 ))))
(declare-fun insert_0 (list_0 Nat_0 list_0) Bool)
(declare-fun isort_0 (list_0 list_0) Bool)
(declare-fun hmerge_0 (Heap_0 Heap_0 Heap_0) Bool)
(declare-fun toList_0 (list_0 Heap_0) Bool)
(declare-fun hinsert_0 (Heap_0 Nat_0 Heap_0) Bool)
(declare-fun toHeap_0 (Heap_0 list_0) Bool)
(declare-fun hsort_0 (list_0 list_0) Bool)
(assert (forall ((x_46 Nat_0))
	(diseqNat_0 Z_2 (Z_3 x_46))))
(assert (forall ((x_47 Nat_0))
	(diseqNat_0 (Z_3 x_47) Z_2)))
(assert (forall ((x_48 Nat_0) (x_49 Nat_0))
	(=> (diseqNat_0 x_48 x_49) (diseqNat_0 (Z_3 x_48) (Z_3 x_49)))))
(assert (forall ((y_6 Nat_0))
	(le_0 Z_2 y_6)))
(assert (forall ((x_41 Nat_0) (y_6 Nat_0))
	(=> (le_0 x_41 y_6) (le_0 (Z_3 x_41) (Z_3 y_6)))))
(assert (forall ((y_6 Nat_0))
	(gt_0 (Z_3 y_6) Z_2)))
(assert (forall ((x_41 Nat_0) (y_6 Nat_0))
	(=> (gt_0 x_41 y_6) (gt_0 (Z_3 x_41) (Z_3 y_6)))))
(assert (forall ((x_56 Nat_0) (x_57 list_0))
	(diseqlist_0 nil_0 (cons_0 x_56 x_57))))
(assert (forall ((x_58 Nat_0) (x_59 list_0))
	(diseqlist_0 (cons_0 x_58 x_59) nil_0)))
(assert (forall ((x_60 Nat_0) (x_61 list_0) (x_62 Nat_0) (x_63 list_0))
	(=> (diseqNat_0 x_60 x_62) (diseqlist_0 (cons_0 x_60 x_61) (cons_0 x_62 x_63)))))
(assert (forall ((x_60 Nat_0) (x_61 list_0) (x_62 Nat_0) (x_63 list_0))
	(=> (diseqlist_0 x_61 x_63) (diseqlist_0 (cons_0 x_60 x_61) (cons_0 x_62 x_63)))))
(assert (forall ((z_0 Nat_0) (xs_0 list_0) (x_0 Nat_0))
	(=> (le_0 x_0 z_0) (insert_0 (cons_0 x_0 (cons_0 z_0 xs_0)) x_0 (cons_0 z_0 xs_0)))))
(assert (forall ((x_14 list_0) (z_0 Nat_0) (xs_0 list_0) (x_0 Nat_0))
	(=> (and (gt_0 x_0 z_0) (insert_0 x_14 x_0 xs_0)) (insert_0 (cons_0 z_0 x_14) x_0 (cons_0 z_0 xs_0)))))
(assert (forall ((x_0 Nat_0))
	(insert_0 (cons_0 x_0 nil_0) x_0 nil_0)))
(assert (forall ((x_16 list_0) (x_17 list_0) (y_1 Nat_0) (xs_1 list_0))
	(=> (and (isort_0 x_17 xs_1) (insert_0 x_16 y_1 x_17)) (isort_0 x_16 (cons_0 y_1 xs_1)))))
(assert (isort_0 nil_0 nil_0))
(assert (forall ((x_20 Heap_0))
	(hmerge_0 x_20 Nil_1 x_20)))
(assert (forall ((z_1 Heap_0) (x_3 Nat_0) (x_4 Heap_0))
	(hmerge_0 (Node_0 z_1 x_3 x_4) (Node_0 z_1 x_3 x_4) Nil_1)))
(assert (forall ((x_23 Heap_0) (x_5 Heap_0) (x_6 Nat_0) (x_7 Heap_0) (z_1 Heap_0) (x_3 Nat_0) (x_4 Heap_0))
	(=> (and (le_0 x_3 x_6) (hmerge_0 x_23 x_4 (Node_0 x_5 x_6 x_7))) (hmerge_0 (Node_0 x_23 x_3 z_1) (Node_0 z_1 x_3 x_4) (Node_0 x_5 x_6 x_7)))))
(assert (forall ((x_25 Heap_0) (x_5 Heap_0) (x_6 Nat_0) (x_7 Heap_0) (z_1 Heap_0) (x_3 Nat_0) (x_4 Heap_0))
	(=> (and (gt_0 x_3 x_6) (hmerge_0 x_25 (Node_0 z_1 x_3 x_4) x_7)) (hmerge_0 (Node_0 x_25 x_6 x_5) (Node_0 z_1 x_3 x_4) (Node_0 x_5 x_6 x_7)))))
(assert (toList_0 nil_0 Nil_1))
(assert (forall ((x_28 Heap_0) (x_29 list_0) (p_0 Heap_0) (y_3 Nat_0) (q_0 Heap_0))
	(=> (and (hmerge_0 x_28 p_0 q_0) (toList_0 x_29 x_28)) (toList_0 (cons_0 y_3 x_29) (Node_0 p_0 y_3 q_0)))))
(assert (forall ((x_30 Heap_0) (x_9 Nat_0) (y_4 Heap_0))
	(=> (hmerge_0 x_30 (Node_0 Nil_1 x_9 Nil_1) y_4) (hinsert_0 x_30 x_9 y_4))))
(assert (forall ((x_32 Heap_0) (x_33 Heap_0) (y_5 Nat_0) (xs_2 list_0))
	(=> (and (toHeap_0 x_33 xs_2) (hinsert_0 x_32 y_5 x_33)) (toHeap_0 x_32 (cons_0 y_5 xs_2)))))
(assert (toHeap_0 Nil_1 nil_0))
(assert (forall ((x_36 list_0) (x_37 Heap_0) (x_11 list_0))
	(=> (and (toHeap_0 x_37 x_11) (toList_0 x_36 x_37)) (hsort_0 x_36 x_11))))
(assert (forall ((x_39 list_0) (x_40 list_0) (xs_3 list_0))
	(=> (and (diseqlist_0 x_39 x_40) (hsort_0 x_39 xs_3) (isort_0 x_40 xs_3)) false)))
(check-sat)
(get-model)
