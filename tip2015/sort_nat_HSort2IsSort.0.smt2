(set-logic HORN)
(declare-datatypes ((Nat_1 0)) (((Z_0 ) (S_0 (unS_0 Nat_1)))))
(declare-fun diseqNat_0 (Nat_1 Nat_1) Bool)
(declare-fun unS_1 (Nat_1 Nat_1) Bool)
(declare-fun isZ_0 (Nat_1) Bool)
(declare-fun isS_0 (Nat_1) Bool)
(assert (forall ((x_54 Nat_1) (x_53 Nat_1))
	(=> (= x_54 (S_0 x_53))
	    (unS_1 x_53 x_54))))
(assert (isZ_0 Z_0))
(assert (forall ((x_55 Nat_1))
	(isS_0 (S_0 x_55))))
(assert (forall ((x_56 Nat_1))
	(diseqNat_0 Z_0 (S_0 x_56))))
(assert (forall ((x_57 Nat_1))
	(diseqNat_0 (S_0 x_57) Z_0)))
(assert (forall ((x_58 Nat_1) (x_59 Nat_1))
	(=> (diseqNat_0 x_58 x_59)
	    (diseqNat_0 (S_0 x_58) (S_0 x_59)))))
(declare-fun add_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun minus_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun le_0 (Nat_1 Nat_1) Bool)
(declare-fun ge_0 (Nat_1 Nat_1) Bool)
(declare-fun lt_0 (Nat_1 Nat_1) Bool)
(declare-fun gt_0 (Nat_1 Nat_1) Bool)
(declare-fun mult_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun div_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun mod_0 (Nat_1 Nat_1 Nat_1) Bool)
(assert (forall ((y_7 Nat_1))
	(add_0 y_7 Z_0 y_7)))
(assert (forall ((x_51 Nat_1) (y_7 Nat_1) (r_1 Nat_1))
	(=> (add_0 r_1 x_51 y_7)
	    (add_0 (S_0 r_1) (S_0 x_51) y_7))))
(assert (forall ((y_7 Nat_1))
	(minus_0 Z_0 Z_0 y_7)))
(assert (forall ((x_51 Nat_1) (y_7 Nat_1) (r_1 Nat_1))
	(=> (minus_0 r_1 x_51 y_7)
	    (minus_0 (S_0 r_1) (S_0 x_51) y_7))))
(assert (forall ((y_7 Nat_1))
	(le_0 Z_0 y_7)))
(assert (forall ((x_51 Nat_1) (y_7 Nat_1))
	(=> (le_0 x_51 y_7)
	    (le_0 (S_0 x_51) (S_0 y_7)))))
(assert (forall ((y_7 Nat_1))
	(ge_0 y_7 Z_0)))
(assert (forall ((x_51 Nat_1) (y_7 Nat_1))
	(=> (ge_0 x_51 y_7)
	    (ge_0 (S_0 x_51) (S_0 y_7)))))
(assert (forall ((y_7 Nat_1))
	(lt_0 Z_0 (S_0 y_7))))
(assert (forall ((x_51 Nat_1) (y_7 Nat_1))
	(=> (lt_0 x_51 y_7)
	    (lt_0 (S_0 x_51) (S_0 y_7)))))
(assert (forall ((y_7 Nat_1))
	(gt_0 (S_0 y_7) Z_0)))
(assert (forall ((x_51 Nat_1) (y_7 Nat_1))
	(=> (gt_0 x_51 y_7)
	    (gt_0 (S_0 x_51) (S_0 y_7)))))
(assert (forall ((y_7 Nat_1))
	(mult_0 Z_0 Z_0 y_7)))
(assert (forall ((x_51 Nat_1) (y_7 Nat_1) (r_1 Nat_1) (z_3 Nat_1))
	(=>	(and (mult_0 r_1 x_51 y_7)
			(add_0 z_3 r_1 y_7))
		(mult_0 z_3 (S_0 x_51) y_7))))
(assert (forall ((x_51 Nat_1) (y_7 Nat_1))
	(=> (lt_0 x_51 y_7)
	    (div_0 Z_0 x_51 y_7))))
(assert (forall ((x_51 Nat_1) (y_7 Nat_1) (r_1 Nat_1) (z_3 Nat_1))
	(=>	(and (ge_0 x_51 y_7)
			(minus_0 z_3 x_51 y_7)
			(div_0 r_1 z_3 y_7))
		(div_0 (S_0 r_1) x_51 y_7))))
(assert (forall ((x_51 Nat_1) (y_7 Nat_1))
	(=> (lt_0 x_51 y_7)
	    (mod_0 x_51 x_51 y_7))))
(assert (forall ((x_51 Nat_1) (y_7 Nat_1) (r_1 Nat_1) (z_3 Nat_1))
	(=>	(and (ge_0 x_51 y_7)
			(minus_0 z_3 x_51 y_7)
			(mod_0 r_1 z_3 y_7))
		(mod_0 r_1 x_51 y_7))))
(declare-datatypes ((Nat_0 0)) (((zero_0 ) (succ_0 (p_0 Nat_0)))))
(declare-fun diseqNat_1 (Nat_0 Nat_0) Bool)
(declare-fun p_1 (Nat_0 Nat_0) Bool)
(declare-fun iszero_0 (Nat_0) Bool)
(declare-fun issucc_0 (Nat_0) Bool)
(assert (forall ((x_62 Nat_0) (x_61 Nat_0))
	(=> (= x_62 (succ_0 x_61))
	    (p_1 x_61 x_62))))
(assert (iszero_0 zero_0))
(assert (forall ((x_63 Nat_0))
	(issucc_0 (succ_0 x_63))))
(assert (forall ((x_64 Nat_0))
	(diseqNat_1 zero_0 (succ_0 x_64))))
(assert (forall ((x_65 Nat_0))
	(diseqNat_1 (succ_0 x_65) zero_0)))
(assert (forall ((x_66 Nat_0) (x_67 Nat_0))
	(=> (diseqNat_1 x_66 x_67)
	    (diseqNat_1 (succ_0 x_66) (succ_0 x_67)))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_1 (Nat_0 list_0) Bool)
(declare-fun tail_1 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_71 list_0) (x_69 Nat_0) (x_70 list_0))
	(=> (= x_71 (cons_0 x_69 x_70))
	    (head_1 x_69 x_71))))
(assert (forall ((x_71 list_0) (x_69 Nat_0) (x_70 list_0))
	(=> (= x_71 (cons_0 x_69 x_70))
	    (tail_1 x_70 x_71))))
(assert (isnil_0 nil_0))
(assert (forall ((x_72 Nat_0) (x_73 list_0))
	(iscons_0 (cons_0 x_72 x_73))))
(assert (forall ((x_74 Nat_0) (x_75 list_0))
	(diseqlist_0 nil_0 (cons_0 x_74 x_75))))
(assert (forall ((x_76 Nat_0) (x_77 list_0))
	(diseqlist_0 (cons_0 x_76 x_77) nil_0)))
(assert (forall ((x_78 Nat_0) (x_79 list_0) (x_80 Nat_0) (x_81 list_0))
	(=> (diseqNat_1 x_78 x_80)
	    (diseqlist_0 (cons_0 x_78 x_79) (cons_0 x_80 x_81)))))
(assert (forall ((x_78 Nat_0) (x_79 list_0) (x_80 Nat_0) (x_81 list_0))
	(=> (diseqlist_0 x_79 x_81)
	    (diseqlist_0 (cons_0 x_78 x_79) (cons_0 x_80 x_81)))))
(declare-datatypes ((Heap_0 0)) (((Node_0 (projNode_0 Heap_0) (projNode_1 Nat_0) (projNode_2 Heap_0)) (Nil_0 ))))
(declare-fun diseqHeap_0 (Heap_0 Heap_0) Bool)
(declare-fun projNode_3 (Heap_0 Heap_0) Bool)
(declare-fun projNode_4 (Nat_0 Heap_0) Bool)
(declare-fun projNode_5 (Heap_0 Heap_0) Bool)
(declare-fun isNode_0 (Heap_0) Bool)
(declare-fun isNil_0 (Heap_0) Bool)
(assert (forall ((x_85 Heap_0) (x_82 Heap_0) (x_83 Nat_0) (x_84 Heap_0))
	(=> (= x_85 (Node_0 x_82 x_83 x_84))
	    (projNode_3 x_82 x_85))))
(assert (forall ((x_85 Heap_0) (x_82 Heap_0) (x_83 Nat_0) (x_84 Heap_0))
	(=> (= x_85 (Node_0 x_82 x_83 x_84))
	    (projNode_4 x_83 x_85))))
(assert (forall ((x_85 Heap_0) (x_82 Heap_0) (x_83 Nat_0) (x_84 Heap_0))
	(=> (= x_85 (Node_0 x_82 x_83 x_84))
	    (projNode_5 x_84 x_85))))
(assert (forall ((x_87 Heap_0) (x_88 Nat_0) (x_89 Heap_0))
	(isNode_0 (Node_0 x_87 x_88 x_89))))
(assert (isNil_0 Nil_0))
(assert (forall ((x_90 Heap_0) (x_91 Nat_0) (x_92 Heap_0))
	(diseqHeap_0 (Node_0 x_90 x_91 x_92) Nil_0)))
(assert (forall ((x_93 Heap_0) (x_94 Nat_0) (x_95 Heap_0))
	(diseqHeap_0 Nil_0 (Node_0 x_93 x_94 x_95))))
(assert (forall ((x_96 Heap_0) (x_97 Nat_0) (x_98 Heap_0) (x_99 Heap_0) (x_100 Nat_0) (x_101 Heap_0))
	(=> (diseqHeap_0 x_96 x_99)
	    (diseqHeap_0 (Node_0 x_96 x_97 x_98) (Node_0 x_99 x_100 x_101)))))
(assert (forall ((x_96 Heap_0) (x_97 Nat_0) (x_98 Heap_0) (x_99 Heap_0) (x_100 Nat_0) (x_101 Heap_0))
	(=> (diseqNat_1 x_97 x_100)
	    (diseqHeap_0 (Node_0 x_96 x_97 x_98) (Node_0 x_99 x_100 x_101)))))
(assert (forall ((x_96 Heap_0) (x_97 Nat_0) (x_98 Heap_0) (x_99 Heap_0) (x_100 Nat_0) (x_101 Heap_0))
	(=> (diseqHeap_0 x_98 x_101)
	    (diseqHeap_0 (Node_0 x_96 x_97 x_98) (Node_0 x_99 x_100 x_101)))))
(declare-fun leq_0 (Bool Nat_0 Nat_0) Bool)
(assert (forall ((x_0 Nat_0) (y_0 Nat_0) (z_0 Nat_0) (x_1 Nat_0) (x_14 Bool) (x_15 Bool))
	(=>	(and (= x_14 x_15)
			(leq_0 x_15 z_0 x_1)
			(= x_0 (succ_0 z_0))
			(= y_0 (succ_0 x_1)))
		(leq_0 x_14 x_0 y_0))))
(assert (forall ((x_0 Nat_0) (y_0 Nat_0) (z_0 Nat_0) (x_16 Bool))
	(=>	(and (= x_16 false)
			(= x_0 (succ_0 z_0))
			(= y_0 zero_0))
		(leq_0 x_16 x_0 y_0))))
(assert (forall ((x_0 Nat_0) (y_0 Nat_0) (x_17 Bool))
	(=>	(and (= x_17 true)
			(= x_0 zero_0))
		(leq_0 x_17 x_0 y_0))))
(declare-fun insert_0 (list_0 Nat_0 list_0) Bool)
(assert (forall ((x_2 Nat_0) (y_1 list_0) (z_1 Nat_0) (xs_0 list_0) (x_19 list_0) (x_18 Bool))
	(=>	(and (= x_19 (cons_0 x_2 (cons_0 z_1 xs_0)))
			(= y_1 (cons_0 z_1 xs_0))
			(= x_18 true)
			(leq_0 x_18 x_2 z_1))
		(insert_0 x_19 x_2 y_1))))
(assert (forall ((x_2 Nat_0) (y_1 list_0) (z_1 Nat_0) (xs_0 list_0) (x_21 list_0) (x_22 list_0) (x_20 Bool))
	(=>	(and (= x_21 (cons_0 z_1 x_22))
			(insert_0 x_22 x_2 xs_0)
			(= y_1 (cons_0 z_1 xs_0))
			(= x_20 false)
			(leq_0 x_20 x_2 z_1))
		(insert_0 x_21 x_2 y_1))))
(assert (forall ((x_2 Nat_0) (y_1 list_0) (x_23 list_0))
	(=>	(and (= x_23 (cons_0 x_2 nil_0))
			(= y_1 nil_0))
		(insert_0 x_23 x_2 y_1))))
(declare-fun isort_0 (list_0 list_0) Bool)
(assert (forall ((x_3 list_0) (y_2 Nat_0) (xs_1 list_0) (x_24 list_0) (x_25 list_0) (x_26 list_0))
	(=>	(and (= x_24 x_26)
			(isort_0 x_25 xs_1)
			(insert_0 x_26 y_2 x_25)
			(= x_3 (cons_0 y_2 xs_1)))
		(isort_0 x_24 x_3))))
(assert (forall ((x_3 list_0) (x_27 list_0))
	(=>	(and (= x_27 nil_0)
			(= x_3 nil_0))
		(isort_0 x_27 x_3))))
(declare-fun hmerge_0 (Heap_0 Heap_0 Heap_0) Bool)
(assert (forall ((x_4 Heap_0) (y_3 Heap_0) (x_28 Heap_0))
	(=>	(and (= x_28 y_3)
			(= x_4 Nil_0))
		(hmerge_0 x_28 x_4 y_3))))
(assert (forall ((x_4 Heap_0) (y_3 Heap_0) (z_2 Heap_0) (x_5 Nat_0) (x_6 Heap_0) (x_29 Heap_0))
	(=>	(and (= x_29 (Node_0 z_2 x_5 x_6))
			(= x_4 (Node_0 z_2 x_5 x_6))
			(= y_3 Nil_0))
		(hmerge_0 x_29 x_4 y_3))))
(assert (forall ((x_4 Heap_0) (y_3 Heap_0) (z_2 Heap_0) (x_5 Nat_0) (x_6 Heap_0) (x_7 Heap_0) (x_8 Nat_0) (x_9 Heap_0) (x_31 Heap_0) (x_32 Heap_0) (x_30 Bool))
	(=>	(and (= x_31 (Node_0 x_32 x_5 z_2))
			(hmerge_0 x_32 x_6 (Node_0 x_7 x_8 x_9))
			(= x_4 (Node_0 z_2 x_5 x_6))
			(= y_3 (Node_0 x_7 x_8 x_9))
			(= x_30 true)
			(leq_0 x_30 x_5 x_8))
		(hmerge_0 x_31 x_4 y_3))))
(assert (forall ((x_4 Heap_0) (y_3 Heap_0) (z_2 Heap_0) (x_5 Nat_0) (x_6 Heap_0) (x_7 Heap_0) (x_8 Nat_0) (x_9 Heap_0) (x_34 Heap_0) (x_35 Heap_0) (x_33 Bool))
	(=>	(and (= x_34 (Node_0 x_35 x_8 x_7))
			(hmerge_0 x_35 (Node_0 z_2 x_5 x_6) x_9)
			(= x_4 (Node_0 z_2 x_5 x_6))
			(= y_3 (Node_0 x_7 x_8 x_9))
			(= x_33 false)
			(leq_0 x_33 x_5 x_8))
		(hmerge_0 x_34 x_4 y_3))))
(declare-fun toList_0 (list_0 Heap_0) Bool)
(assert (forall ((x_10 Heap_0) (x_36 list_0))
	(=>	(and (= x_36 nil_0)
			(= x_10 Nil_0))
		(toList_0 x_36 x_10))))
(assert (forall ((x_10 Heap_0) (q_0 Heap_0) (y_4 Nat_0) (r_0 Heap_0) (x_37 list_0) (x_38 Heap_0) (x_39 list_0))
	(=>	(and (= x_37 (cons_0 y_4 x_39))
			(hmerge_0 x_38 q_0 r_0)
			(toList_0 x_39 x_38)
			(= x_10 (Node_0 q_0 y_4 r_0)))
		(toList_0 x_37 x_10))))
(declare-fun hinsert_0 (Heap_0 Nat_0 Heap_0) Bool)
(assert (forall ((x_11 Nat_0) (y_5 Heap_0) (x_40 Heap_0) (x_41 Heap_0))
	(=>	(and (= x_40 x_41)
			(hmerge_0 x_41 (Node_0 Nil_0 x_11 Nil_0) y_5))
		(hinsert_0 x_40 x_11 y_5))))
(declare-fun toHeap_0 (Heap_0 list_0) Bool)
(assert (forall ((x_12 list_0) (y_6 Nat_0) (xs_2 list_0) (x_42 Heap_0) (x_43 Heap_0) (x_44 Heap_0))
	(=>	(and (= x_42 x_44)
			(toHeap_0 x_43 xs_2)
			(hinsert_0 x_44 y_6 x_43)
			(= x_12 (cons_0 y_6 xs_2)))
		(toHeap_0 x_42 x_12))))
(assert (forall ((x_12 list_0) (x_45 Heap_0))
	(=>	(and (= x_45 Nil_0)
			(= x_12 nil_0))
		(toHeap_0 x_45 x_12))))
(declare-fun hsort_0 (list_0 list_0) Bool)
(assert (forall ((x_13 list_0) (x_46 list_0) (x_47 Heap_0) (x_48 list_0))
	(=>	(and (= x_46 x_48)
			(toHeap_0 x_47 x_13)
			(toList_0 x_48 x_47))
		(hsort_0 x_46 x_13))))
(assert (forall ((xs_3 list_0) (x_49 list_0) (x_50 list_0))
	(=>	(and (diseqlist_0 x_49 x_50)
			(hsort_0 x_49 xs_3)
			(isort_0 x_50 xs_3))
		false)))
(check-sat)
