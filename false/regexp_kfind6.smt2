(set-logic HORN)
(declare-datatypes ((Bool_0 0)) (((false_0 ) (true_0 ))))
(declare-fun diseqBool_0 (Bool_0 Bool_0) Bool)
(declare-fun and_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun or_1 (Bool_0 Bool_0 Bool_0) Bool)
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Bool_0) (tail_0 list_0)))))
(declare-datatypes ((T_0 0)) (((A_0 ) (B_0 ) (C_0 ))))
(declare-fun diseqT_0 (T_0 T_0) Bool)
(declare-datatypes ((list_1 0)) (((nil_1 ) (cons_1 (head_1 T_0) (tail_1 list_1)))))
(declare-datatypes ((pair_0 0)) (((pair_1 (projpair_0 list_1) (projpair_1 list_1)))))
(declare-datatypes ((list_2 0)) (((nil_2 ) (cons_2 (head_2 pair_0) (tail_2 list_2)))))
(declare-datatypes ((R_0 0)) (((Nil_3 ) (Eps_0 ) (Atom_0 (projAtom_0 T_0)) (x_0 (proj_0 R_0) (proj_1 R_0)) (x_1 (proj_2 R_0) (proj_3 R_0)) (Star_0 (projStar_0 R_0)))))
(declare-fun splits_0 (list_2 T_0 list_2) Bool)
(declare-fun splits_1 (list_2 list_1) Bool)
(declare-fun or_0 (Bool_0 list_0) Bool)
(declare-fun eps_1 (Bool_0 R_0) Bool)
(declare-fun step_0 (R_0 R_0 T_0) Bool)
(declare-fun rec_0 (Bool_0 R_0 list_1) Bool)
(declare-fun reck_0 (Bool_0 R_0 list_1) Bool)
(declare-fun reck_1 (list_0 R_0 R_0 list_2) Bool)
(assert (diseqBool_0 false_0 true_0))
(assert (diseqBool_0 true_0 false_0))
(assert (and_0 false_0 false_0 false_0))
(assert (and_0 false_0 true_0 false_0))
(assert (and_0 false_0 false_0 true_0))
(assert (and_0 true_0 true_0 true_0))
(assert (or_1 false_0 false_0 false_0))
(assert (or_1 true_0 true_0 false_0))
(assert (or_1 true_0 false_0 true_0))
(assert (or_1 true_0 true_0 true_0))
(assert (diseqT_0 A_0 B_0))
(assert (diseqT_0 A_0 C_0))
(assert (diseqT_0 B_0 A_0))
(assert (diseqT_0 C_0 A_0))
(assert (diseqT_0 B_0 C_0))
(assert (diseqT_0 C_0 B_0))
(assert (forall ((x_23 list_2) (bs_0 list_1) (cs_0 list_1) (x_3 list_2) (x_2 T_0))
	(=> (splits_0 x_23 x_2 x_3) (splits_0 (cons_2 (pair_1 (cons_1 x_2 bs_0) cs_0) x_23) x_2 (cons_2 (pair_1 bs_0 cs_0) x_3)))))
(assert (forall ((x_2 T_0))
	(splits_0 nil_2 x_2 nil_2)))
(assert (forall ((x_26 list_2) (x_27 list_2) (y_1 T_0) (xs_0 list_1))
	(=> (and (splits_1 x_26 xs_0) (splits_0 x_27 y_1 x_26)) (splits_1 (cons_2 (pair_1 nil_1 (cons_1 y_1 xs_0)) x_27) (cons_1 y_1 xs_0)))))
(assert (splits_1 (cons_2 (pair_1 nil_1 nil_1) nil_2) nil_1))
(assert (forall ((x_29 Bool_0) (x_30 Bool_0) (y_2 Bool_0) (xs_1 list_0))
	(=> (and (or_0 x_30 xs_1) (or_1 x_29 y_2 x_30)) (or_0 x_29 (cons_0 y_2 xs_1)))))
(assert (or_0 false_0 nil_0))
(assert (forall ((y_3 R_0))
	(eps_1 true_0 (Star_0 y_3))))
(assert (forall ((x_33 Bool_0) (x_34 Bool_0) (x_35 Bool_0) (r_1 R_0) (q_1 R_0))
	(=> (and (eps_1 x_34 r_1) (eps_1 x_35 q_1) (and_0 x_33 x_34 x_35)) (eps_1 x_33 (x_1 r_1 q_1)))))
(assert (forall ((x_36 Bool_0) (x_37 Bool_0) (x_38 Bool_0) (p_0 R_0) (q_0 R_0))
	(=> (and (eps_1 x_37 p_0) (eps_1 x_38 q_0) (or_1 x_36 x_37 x_38)) (eps_1 x_36 (x_0 p_0 q_0)))))
(assert (eps_1 true_0 Eps_0))
(assert (forall ((x_7 R_0) (x_21 T_0))
	(eps_1 false_0 (Atom_0 x_21))))
(assert (forall ((x_7 R_0))
	(eps_1 false_0 Nil_3)))
(assert (forall ((x_43 R_0) (p_2 R_0) (y_4 T_0))
	(=> (step_0 x_43 p_2 y_4) (step_0 (x_1 x_43 (Star_0 p_2)) (Star_0 p_2) y_4))))
(assert (forall ((x_46 R_0) (x_47 R_0) (r_2 R_0) (q_3 R_0) (y_4 T_0))
	(=> (and (step_0 x_46 r_2 y_4) (step_0 x_47 q_3 y_4) (eps_1 true_0 r_2)) (step_0 (x_0 (x_1 x_46 q_3) x_47) (x_1 r_2 q_3) y_4))))
(assert (forall ((x_50 R_0) (x_48 Bool_0) (r_2 R_0) (q_3 R_0) (y_4 T_0))
	(=> (and (diseqBool_0 x_48 true_0) (step_0 x_50 r_2 y_4) (eps_1 x_48 r_2)) (step_0 (x_0 (x_1 x_50 q_3) Nil_3) (x_1 r_2 q_3) y_4))))
(assert (forall ((x_52 R_0) (x_53 R_0) (p_1 R_0) (q_2 R_0) (y_4 T_0))
	(=> (and (step_0 x_52 p_1 y_4) (step_0 x_53 q_2 y_4)) (step_0 (x_0 x_52 x_53) (x_0 p_1 q_2) y_4))))
(assert (forall ((b_1 T_0))
	(step_0 Eps_0 (Atom_0 b_1) b_1)))
(assert (forall ((b_1 T_0) (y_4 T_0))
	(=> (diseqT_0 b_1 y_4) (step_0 Nil_3 (Atom_0 b_1) y_4))))
(assert (forall ((x_9 R_0) (y_4 T_0))
	(step_0 Nil_3 Eps_0 y_4)))
(assert (forall ((x_9 R_0) (y_4 T_0))
	(step_0 Nil_3 Nil_3 y_4)))
(assert (forall ((x_58 Bool_0) (x_59 R_0) (z_1 T_0) (xs_2 list_1) (x_10 R_0))
	(=> (and (step_0 x_59 x_10 z_1) (rec_0 x_58 x_59 xs_2)) (rec_0 x_58 x_10 (cons_1 z_1 xs_2)))))
(assert (forall ((x_61 Bool_0) (x_10 R_0))
	(=> (eps_1 x_61 x_10) (rec_0 x_61 x_10 nil_1))))
(assert (forall ((x_64 Bool_0) (x_63 Bool_0) (x_18 T_0) (x_19 list_1) (p_5 R_0))
	(=> (and (diseqBool_0 x_63 true_0) (rec_0 x_64 (x_1 p_5 (Star_0 p_5)) (cons_1 x_18 x_19)) (eps_1 x_63 p_5)) (reck_0 x_64 (Star_0 p_5) (cons_1 x_18 x_19)))))
(assert (forall ((x_18 T_0) (x_19 list_1) (p_5 R_0))
	(=> (eps_1 true_0 p_5) (reck_0 false_0 (Star_0 p_5) (cons_1 x_18 x_19)))))
(assert (forall ((p_5 R_0))
	(reck_0 true_0 (Star_0 p_5) nil_1)))
(assert (forall ((x_69 Bool_0) (x_70 list_2) (x_71 list_0) (r_3 R_0) (q_6 R_0) (y_7 list_1))
	(=> (and (splits_1 x_70 y_7) (reck_1 x_71 r_3 q_6 x_70) (or_0 x_69 x_71)) (reck_0 x_69 (x_1 r_3 q_6) y_7))))
(assert (forall ((x_73 Bool_0) (x_74 Bool_0) (x_75 Bool_0) (p_4 R_0) (q_5 R_0) (y_7 list_1))
	(=> (and (reck_0 x_74 p_4 y_7) (reck_0 x_75 q_5 y_7) (or_1 x_73 x_74 x_75)) (reck_0 x_73 (x_0 p_4 q_5) y_7))))
(assert (forall ((x_16 T_0) (x_17 list_1) (b_2 T_0) (c_1 T_0))
	(reck_0 false_0 (Atom_0 c_1) (cons_1 b_2 (cons_1 x_16 x_17)))))
(assert (forall ((b_2 T_0))
	(reck_0 true_0 (Atom_0 b_2) (cons_1 b_2 nil_1))))
(assert (forall ((b_2 T_0) (c_1 T_0))
	(=> (diseqT_0 c_1 b_2) (reck_0 false_0 (Atom_0 c_1) (cons_1 b_2 nil_1)))))
(assert (forall ((c_1 T_0))
	(reck_0 false_0 (Atom_0 c_1) nil_1)))
(assert (forall ((z_2 T_0) (x_14 list_1))
	(reck_0 false_0 Eps_0 (cons_1 z_2 x_14))))
(assert (reck_0 true_0 Eps_0 nil_1))
(assert (forall ((y_7 list_1))
	(reck_0 false_0 Nil_3 y_7)))
(assert (forall ((x_93 Bool_0) (x_84 Bool_0) (x_85 Bool_0) (x_86 list_0) (l_0 list_1) (r_4 list_1) (z_3 list_2) (p_6 R_0) (q_7 R_0))
	(=> (and (reck_0 x_84 p_6 l_0) (rec_0 x_85 q_7 r_4) (reck_1 x_86 p_6 q_7 z_3) (and_0 x_93 x_84 x_85)) (reck_1 (cons_0 x_93 x_86) p_6 q_7 (cons_2 (pair_1 l_0 r_4) z_3)))))
(assert (forall ((p_6 R_0) (q_7 R_0))
	(reck_1 nil_0 p_6 q_7 nil_2)))
(assert (forall ((p_7 R_0))
	(=> (reck_0 true_0 p_7 (cons_1 A_0 (cons_1 B_0 (cons_1 A_0 (cons_1 B_0 (cons_1 B_0 nil_1)))))) false)))
(check-sat)
(get-model)
