(set-logic HORN)
(declare-datatypes ((Nat_0 0)) (((Z_0 ) (S_0 (unS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun unS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_0 (Nat_0) Bool)
(declare-fun isS_0 (Nat_0) Bool)
(assert (forall ((x_91 Nat_0) (x_90 Nat_0))
	(=> (= x_91 (S_0 x_90))
	    (unS_1 x_90 x_91))))
(assert (isZ_0 Z_0))
(assert (forall ((x_92 Nat_0))
	(isS_0 (S_0 x_92))))
(assert (forall ((x_93 Nat_0))
	(diseqNat_0 Z_0 (S_0 x_93))))
(assert (forall ((x_94 Nat_0))
	(diseqNat_0 (S_0 x_94) Z_0)))
(assert (forall ((x_95 Nat_0) (x_96 Nat_0))
	(=> (diseqNat_0 x_95 x_96)
	    (diseqNat_0 (S_0 x_95) (S_0 x_96)))))
(declare-fun add_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun minus_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun le_0 (Nat_0 Nat_0) Bool)
(declare-fun ge_0 (Nat_0 Nat_0) Bool)
(declare-fun lt_0 (Nat_0 Nat_0) Bool)
(declare-fun gt_0 (Nat_0 Nat_0) Bool)
(declare-fun mult_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun div_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun mod_0 (Nat_0 Nat_0 Nat_0) Bool)
(assert (forall ((y_11 Nat_0))
	(add_0 y_11 Z_0 y_11)))
(assert (forall ((x_78 Nat_0) (y_11 Nat_0) (r_0 Nat_0))
	(=> (add_0 r_0 x_78 y_11)
	    (add_0 (S_0 r_0) (S_0 x_78) y_11))))
(assert (forall ((y_11 Nat_0))
	(minus_0 Z_0 Z_0 y_11)))
(assert (forall ((x_78 Nat_0) (y_11 Nat_0) (r_0 Nat_0))
	(=> (minus_0 r_0 x_78 y_11)
	    (minus_0 (S_0 r_0) (S_0 x_78) y_11))))
(assert (forall ((y_11 Nat_0))
	(le_0 Z_0 y_11)))
(assert (forall ((x_78 Nat_0) (y_11 Nat_0))
	(=> (le_0 x_78 y_11)
	    (le_0 (S_0 x_78) (S_0 y_11)))))
(assert (forall ((y_11 Nat_0))
	(ge_0 y_11 Z_0)))
(assert (forall ((x_78 Nat_0) (y_11 Nat_0))
	(=> (ge_0 x_78 y_11)
	    (ge_0 (S_0 x_78) (S_0 y_11)))))
(assert (forall ((y_11 Nat_0))
	(lt_0 Z_0 (S_0 y_11))))
(assert (forall ((x_78 Nat_0) (y_11 Nat_0))
	(=> (lt_0 x_78 y_11)
	    (lt_0 (S_0 x_78) (S_0 y_11)))))
(assert (forall ((y_11 Nat_0))
	(gt_0 (S_0 y_11) Z_0)))
(assert (forall ((x_78 Nat_0) (y_11 Nat_0))
	(=> (gt_0 x_78 y_11)
	    (gt_0 (S_0 x_78) (S_0 y_11)))))
(assert (forall ((y_11 Nat_0))
	(mult_0 Z_0 Z_0 y_11)))
(assert (forall ((x_78 Nat_0) (y_11 Nat_0) (r_0 Nat_0) (z_7 Nat_0))
	(=>	(and (mult_0 r_0 x_78 y_11)
			(add_0 z_7 r_0 y_11))
		(mult_0 z_7 (S_0 x_78) y_11))))
(assert (forall ((x_78 Nat_0) (y_11 Nat_0))
	(=> (lt_0 x_78 y_11)
	    (div_0 Z_0 x_78 y_11))))
(assert (forall ((x_78 Nat_0) (y_11 Nat_0) (r_0 Nat_0) (z_7 Nat_0))
	(=>	(and (ge_0 x_78 y_11)
			(minus_0 z_7 x_78 y_11)
			(div_0 r_0 z_7 y_11))
		(div_0 (S_0 r_0) x_78 y_11))))
(assert (forall ((x_78 Nat_0) (y_11 Nat_0))
	(=> (lt_0 x_78 y_11)
	    (mod_0 x_78 x_78 y_11))))
(assert (forall ((x_78 Nat_0) (y_11 Nat_0) (r_0 Nat_0) (z_7 Nat_0))
	(=>	(and (ge_0 x_78 y_11)
			(minus_0 z_7 x_78 y_11)
			(mod_0 r_0 z_7 y_11))
		(mod_0 r_0 x_78 y_11))))
(declare-datatypes ((pair_0 0)) (((pair_1 (projpair_0 Nat_0) (projpair_1 Nat_0)))))
(declare-fun diseqpair_0 (pair_0 pair_0) Bool)
(declare-fun projpair_2 (Nat_0 pair_0) Bool)
(declare-fun projpair_3 (Nat_0 pair_0) Bool)
(declare-fun ispair_0 (pair_0) Bool)
(assert (forall ((x_99 pair_0) (x_97 Nat_0) (x_98 Nat_0))
	(=> (= x_99 (pair_1 x_97 x_98))
	    (projpair_2 x_97 x_99))))
(assert (forall ((x_99 pair_0) (x_97 Nat_0) (x_98 Nat_0))
	(=> (= x_99 (pair_1 x_97 x_98))
	    (projpair_3 x_98 x_99))))
(assert (forall ((x_100 Nat_0) (x_101 Nat_0))
	(ispair_0 (pair_1 x_100 x_101))))
(assert (forall ((x_102 Nat_0) (x_103 Nat_0) (x_104 Nat_0) (x_105 Nat_0))
	(=> (diseqNat_0 x_102 x_104)
	    (diseqpair_0 (pair_1 x_102 x_103) (pair_1 x_104 x_105)))))
(assert (forall ((x_102 Nat_0) (x_103 Nat_0) (x_104 Nat_0) (x_105 Nat_0))
	(=> (diseqNat_0 x_103 x_105)
	    (diseqpair_0 (pair_1 x_102 x_103) (pair_1 x_104 x_105)))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Bool) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_4 (Bool list_0) Bool)
(declare-fun tail_4 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_109 list_0) (x_107 Bool) (x_108 list_0))
	(=> (= x_109 (cons_0 x_107 x_108))
	    (head_4 x_107 x_109))))
(assert (forall ((x_109 list_0) (x_107 Bool) (x_108 list_0))
	(=> (= x_109 (cons_0 x_107 x_108))
	    (tail_4 x_108 x_109))))
(assert (isnil_0 nil_0))
(assert (forall ((x_110 Bool) (x_111 list_0))
	(iscons_0 (cons_0 x_110 x_111))))
(assert (forall ((x_112 Bool) (x_113 list_0))
	(diseqlist_0 nil_0 (cons_0 x_112 x_113))))
(assert (forall ((x_114 Bool) (x_115 list_0))
	(diseqlist_0 (cons_0 x_114 x_115) nil_0)))
(assert (forall ((x_116 Bool) (x_117 list_0) (x_118 Bool) (x_119 list_0))
	(=> (not (= x_116 x_118))
	    (diseqlist_0 (cons_0 x_116 x_117) (cons_0 x_118 x_119)))))
(assert (forall ((x_116 Bool) (x_117 list_0) (x_118 Bool) (x_119 list_0))
	(=> (diseqlist_0 x_117 x_119)
	    (diseqlist_0 (cons_0 x_116 x_117) (cons_0 x_118 x_119)))))
(declare-datatypes ((list_1 0)) (((nil_1 ) (cons_1 (head_1 Nat_0) (tail_1 list_1)))))
(declare-fun diseqlist_1 (list_1 list_1) Bool)
(declare-fun head_5 (Nat_0 list_1) Bool)
(declare-fun tail_5 (list_1 list_1) Bool)
(declare-fun isnil_1 (list_1) Bool)
(declare-fun iscons_1 (list_1) Bool)
(assert (forall ((x_123 list_1) (x_121 Nat_0) (x_122 list_1))
	(=> (= x_123 (cons_1 x_121 x_122))
	    (head_5 x_121 x_123))))
(assert (forall ((x_123 list_1) (x_121 Nat_0) (x_122 list_1))
	(=> (= x_123 (cons_1 x_121 x_122))
	    (tail_5 x_122 x_123))))
(assert (isnil_1 nil_1))
(assert (forall ((x_124 Nat_0) (x_125 list_1))
	(iscons_1 (cons_1 x_124 x_125))))
(assert (forall ((x_126 Nat_0) (x_127 list_1))
	(diseqlist_1 nil_1 (cons_1 x_126 x_127))))
(assert (forall ((x_128 Nat_0) (x_129 list_1))
	(diseqlist_1 (cons_1 x_128 x_129) nil_1)))
(assert (forall ((x_130 Nat_0) (x_131 list_1) (x_132 Nat_0) (x_133 list_1))
	(=> (diseqNat_0 x_130 x_132)
	    (diseqlist_1 (cons_1 x_130 x_131) (cons_1 x_132 x_133)))))
(assert (forall ((x_130 Nat_0) (x_131 list_1) (x_132 Nat_0) (x_133 list_1))
	(=> (diseqlist_1 x_131 x_133)
	    (diseqlist_1 (cons_1 x_130 x_131) (cons_1 x_132 x_133)))))
(declare-datatypes ((list_2 0)) (((nil_2 ) (cons_2 (head_2 pair_0) (tail_2 list_2)))))
(declare-fun diseqlist_2 (list_2 list_2) Bool)
(declare-fun head_6 (pair_0 list_2) Bool)
(declare-fun tail_6 (list_2 list_2) Bool)
(declare-fun isnil_2 (list_2) Bool)
(declare-fun iscons_2 (list_2) Bool)
(assert (forall ((x_137 list_2) (x_135 pair_0) (x_136 list_2))
	(=> (= x_137 (cons_2 x_135 x_136))
	    (head_6 x_135 x_137))))
(assert (forall ((x_137 list_2) (x_135 pair_0) (x_136 list_2))
	(=> (= x_137 (cons_2 x_135 x_136))
	    (tail_6 x_136 x_137))))
(assert (isnil_2 nil_2))
(assert (forall ((x_138 pair_0) (x_139 list_2))
	(iscons_2 (cons_2 x_138 x_139))))
(assert (forall ((x_140 pair_0) (x_141 list_2))
	(diseqlist_2 nil_2 (cons_2 x_140 x_141))))
(assert (forall ((x_142 pair_0) (x_143 list_2))
	(diseqlist_2 (cons_2 x_142 x_143) nil_2)))
(assert (forall ((x_144 pair_0) (x_145 list_2) (x_146 pair_0) (x_147 list_2))
	(=> (diseqpair_0 x_144 x_146)
	    (diseqlist_2 (cons_2 x_144 x_145) (cons_2 x_146 x_147)))))
(assert (forall ((x_144 pair_0) (x_145 list_2) (x_146 pair_0) (x_147 list_2))
	(=> (diseqlist_2 x_145 x_147)
	    (diseqlist_2 (cons_2 x_144 x_145) (cons_2 x_146 x_147)))))
(declare-datatypes ((list_3 0)) (((nil_3 ) (cons_3 (head_3 list_2) (tail_3 list_3)))))
(declare-fun diseqlist_3 (list_3 list_3) Bool)
(declare-fun head_7 (list_2 list_3) Bool)
(declare-fun tail_7 (list_3 list_3) Bool)
(declare-fun isnil_3 (list_3) Bool)
(declare-fun iscons_3 (list_3) Bool)
(assert (forall ((x_151 list_3) (x_149 list_2) (x_150 list_3))
	(=> (= x_151 (cons_3 x_149 x_150))
	    (head_7 x_149 x_151))))
(assert (forall ((x_151 list_3) (x_149 list_2) (x_150 list_3))
	(=> (= x_151 (cons_3 x_149 x_150))
	    (tail_7 x_150 x_151))))
(assert (isnil_3 nil_3))
(assert (forall ((x_152 list_2) (x_153 list_3))
	(iscons_3 (cons_3 x_152 x_153))))
(assert (forall ((x_154 list_2) (x_155 list_3))
	(diseqlist_3 nil_3 (cons_3 x_154 x_155))))
(assert (forall ((x_156 list_2) (x_157 list_3))
	(diseqlist_3 (cons_3 x_156 x_157) nil_3)))
(assert (forall ((x_158 list_2) (x_159 list_3) (x_160 list_2) (x_161 list_3))
	(=> (diseqlist_2 x_158 x_160)
	    (diseqlist_3 (cons_3 x_158 x_159) (cons_3 x_160 x_161)))))
(assert (forall ((x_158 list_2) (x_159 list_3) (x_160 list_2) (x_161 list_3))
	(=> (diseqlist_3 x_159 x_161)
	    (diseqlist_3 (cons_3 x_158 x_159) (cons_3 x_160 x_161)))))
(declare-datatypes ((Maybe_0 0)) (((Nothing_0 ) (Just_0 (projJust_0 Nat_0)))))
(declare-fun diseqMaybe_0 (Maybe_0 Maybe_0) Bool)
(declare-fun projJust_1 (Nat_0 Maybe_0) Bool)
(declare-fun isNothing_0 (Maybe_0) Bool)
(declare-fun isJust_0 (Maybe_0) Bool)
(assert (forall ((x_164 Maybe_0) (x_163 Nat_0))
	(=> (= x_164 (Just_0 x_163))
	    (projJust_1 x_163 x_164))))
(assert (isNothing_0 Nothing_0))
(assert (forall ((x_165 Nat_0))
	(isJust_0 (Just_0 x_165))))
(assert (forall ((x_166 Nat_0))
	(diseqMaybe_0 Nothing_0 (Just_0 x_166))))
(assert (forall ((x_167 Nat_0))
	(diseqMaybe_0 (Just_0 x_167) Nothing_0)))
(assert (forall ((x_168 Nat_0) (x_169 Nat_0))
	(=> (diseqNat_0 x_168 x_169)
	    (diseqMaybe_0 (Just_0 x_168) (Just_0 x_169)))))
(declare-fun primEnumFromTo_0 (list_1 Nat_0 Nat_0) Bool)
(assert (forall ((x_0 Nat_0) (y_0 Nat_0) (x_15 list_1))
	(=>	(and (= x_15 nil_1)
			(gt_0 x_0 y_0))
		(primEnumFromTo_0 x_15 x_0 y_0))))
(assert (forall ((x_0 Nat_0) (y_0 Nat_0) (x_16 list_1) (x_17 list_1) (x_79 Nat_0))
	(=>	(and (= x_16 (cons_1 x_0 x_17))
			(primEnumFromTo_0 x_17 x_79 y_0)
			(le_0 x_0 y_0)
			(add_0 x_79 (S_0 Z_0) x_0))
		(primEnumFromTo_0 x_16 x_0 y_0))))
(declare-fun petersen_0 (list_2 Nat_0 list_1) Bool)
(assert (forall ((x_1 Nat_0) (y_1 list_1) (z_0 Nat_0) (x_2 list_1) (x_18 list_2) (x_19 list_2) (x_80 Nat_0))
	(=>	(and (= x_18 (cons_2 (pair_1 z_0 x_80) x_19))
			(petersen_0 x_19 x_1 x_2)
			(= y_1 (cons_1 z_0 x_2))
			(add_0 x_80 x_1 z_0))
		(petersen_0 x_18 x_1 y_1))))
(assert (forall ((x_1 Nat_0) (y_1 list_1) (x_20 list_2))
	(=>	(and (= x_20 nil_2)
			(= y_1 nil_1))
		(petersen_0 x_20 x_1 y_1))))
(declare-fun petersen_1 (list_2 list_1) Bool)
(assert (forall ((x_3 list_1) (y_2 Nat_0) (z_1 list_1) (x_21 list_2) (x_22 list_2) (x_81 Nat_0))
	(=>	(and (= x_21 (cons_2 (pair_1 y_2 x_81) x_22))
			(petersen_1 x_22 z_1)
			(= x_3 (cons_1 y_2 z_1))
			(add_0 x_81 (S_0 Z_0) y_2))
		(petersen_1 x_21 x_3))))
(assert (forall ((x_3 list_1) (x_23 list_2))
	(=>	(and (= x_23 nil_2)
			(= x_3 nil_1))
		(petersen_1 x_23 x_3))))
(declare-fun petersen_2 (list_3 Nat_0 list_2) Bool)
(assert (forall ((x_4 Nat_0) (y_3 list_2) (z_2 pair_0) (x_5 list_2) (u_0 Nat_0) (v_0 Nat_0) (x_24 list_3) (x_25 list_3) (x_82 Nat_0) (x_83 Nat_0))
	(=>	(and (= x_24 (cons_3 (cons_2 (pair_1 u_0 v_0) (cons_2 (pair_1 x_82 x_83) nil_2)) x_25))
			(petersen_2 x_25 x_4 x_5)
			(= y_3 (cons_2 z_2 x_5))
			(= z_2 (pair_1 u_0 v_0))
			(add_0 x_82 x_4 u_0)
			(add_0 x_83 x_4 v_0))
		(petersen_2 x_24 x_4 y_3))))
(assert (forall ((x_4 Nat_0) (y_3 list_2) (x_26 list_3))
	(=>	(and (= x_26 nil_3)
			(= y_3 nil_2))
		(petersen_2 x_26 x_4 y_3))))
(declare-fun index_0 (Maybe_0 list_1 Nat_0) Bool)
(assert (forall ((x_6 list_1) (y_4 Nat_0) (z_3 Nat_0) (xs_0 list_1) (x_27 Maybe_0))
	(=>	(and (= x_27 (Just_0 z_3))
			(= x_6 (cons_1 z_3 xs_0))
			(= y_4 Z_0))
		(index_0 x_27 x_6 y_4))))
(assert (forall ((x_6 list_1) (y_4 Nat_0) (z_3 Nat_0) (xs_0 list_1) (x_28 Maybe_0) (x_29 Maybe_0) (x_84 Nat_0))
	(=>	(and (= x_28 x_29)
			(index_0 x_29 xs_0 x_84)
			(= x_6 (cons_1 z_3 xs_0))
			(diseqNat_0 y_4 Z_0)
			(minus_0 x_84 y_4 (S_0 Z_0)))
		(index_0 x_28 x_6 y_4))))
(assert (forall ((x_6 list_1) (y_4 Nat_0) (x_30 Maybe_0))
	(=>	(and (= x_30 Nothing_0)
			(= x_6 nil_1))
		(index_0 x_30 x_6 y_4))))
(declare-fun formula_0 (list_0 list_1) Bool)
(assert (forall ((x_7 list_1) (y_5 Nat_0) (z_4 list_1) (x_31 list_0) (x_32 list_0))
	(=>	(and (= x_31 (cons_0 (lt_0 y_5 (S_0 (S_0 (S_0 Z_0)))) x_32))
			(formula_0 x_32 z_4)
			(= x_7 (cons_1 y_5 z_4)))
		(formula_0 x_31 x_7))))
(assert (forall ((x_7 list_1) (x_33 list_0))
	(=>	(and (= x_33 nil_0)
			(= x_7 nil_1))
		(formula_0 x_33 x_7))))
(declare-fun colouring_0 (list_0 list_1 list_2) Bool)
(assert (forall ((a_0 list_1) (x_8 list_2) (y_6 pair_0) (z_5 list_2) (u_1 Nat_0) (v_1 Nat_0) (c_0 Nat_0) (c_1 Nat_0) (x_36 list_0) (x_37 list_0) (x_34 Maybe_0) (x_35 Maybe_0))
	(=>	(and (= x_36 (cons_0 (distinct c_0 c_1) x_37))
			(colouring_0 x_37 a_0 z_5)
			(= x_8 (cons_2 y_6 z_5))
			(= y_6 (pair_1 u_1 v_1))
			(= x_34 (Just_0 c_0))
			(= x_35 (Just_0 c_1))
			(index_0 x_34 a_0 u_1)
			(index_0 x_35 a_0 v_1))
		(colouring_0 x_36 a_0 x_8))))
(assert (forall ((a_0 list_1) (x_8 list_2) (y_6 pair_0) (z_5 list_2) (u_1 Nat_0) (v_1 Nat_0) (c_0 Nat_0) (x_40 list_0) (x_41 list_0) (x_38 Maybe_0) (x_39 Maybe_0))
	(=>	(and (= x_40 (cons_0 false x_41))
			(colouring_0 x_41 a_0 z_5)
			(= x_8 (cons_2 y_6 z_5))
			(= y_6 (pair_1 u_1 v_1))
			(= x_38 (Just_0 c_0))
			(= x_39 Nothing_0)
			(index_0 x_38 a_0 u_1)
			(index_0 x_39 a_0 v_1))
		(colouring_0 x_40 a_0 x_8))))
(assert (forall ((a_0 list_1) (x_8 list_2) (y_6 pair_0) (z_5 list_2) (u_1 Nat_0) (v_1 Nat_0) (x_43 list_0) (x_44 list_0) (x_42 Maybe_0))
	(=>	(and (= x_43 (cons_0 false x_44))
			(colouring_0 x_44 a_0 z_5)
			(= x_8 (cons_2 y_6 z_5))
			(= y_6 (pair_1 u_1 v_1))
			(= x_42 Nothing_0)
			(index_0 x_42 a_0 u_1))
		(colouring_0 x_43 a_0 x_8))))
(assert (forall ((a_0 list_1) (x_8 list_2) (x_45 list_0))
	(=>	(and (= x_45 nil_0)
			(= x_8 nil_2))
		(colouring_0 x_45 a_0 x_8))))
(declare-fun and_0 (Bool list_0) Bool)
(assert (forall ((x_9 list_0) (y_7 Bool) (xs_1 list_0) (x_46 Bool) (x_47 Bool))
	(=>	(and (= x_46 (and y_7 x_47))
			(and_0 x_47 xs_1)
			(= x_9 (cons_0 y_7 xs_1)))
		(and_0 x_46 x_9))))
(assert (forall ((x_9 list_0) (x_48 Bool))
	(=>	(and (= x_48 true)
			(= x_9 nil_0))
		(and_0 x_48 x_9))))
(declare-fun colouring_1 (Bool list_2 list_1) Bool)
(assert (forall ((x_10 list_2) (y_8 list_1) (x_49 Bool) (x_50 list_0) (x_51 Bool))
	(=>	(and (= x_49 x_51)
			(colouring_0 x_50 y_8 x_10)
			(and_0 x_51 x_50))
		(colouring_1 x_49 x_10 y_8))))
(declare-fun x_11 (list_2 list_2 list_2) Bool)
(assert (forall ((x_12 list_2) (y_9 list_2) (z_6 pair_0) (xs_2 list_2) (x_52 list_2) (x_53 list_2))
	(=>	(and (= x_52 (cons_2 z_6 x_53))
			(x_11 x_53 xs_2 y_9)
			(= x_12 (cons_2 z_6 xs_2)))
		(x_11 x_52 x_12 y_9))))
(assert (forall ((x_12 list_2) (y_9 list_2) (x_54 list_2))
	(=>	(and (= x_54 y_9)
			(= x_12 nil_2))
		(x_11 x_54 x_12 y_9))))
(declare-fun concat_0 (list_2 list_3) Bool)
(assert (forall ((x_13 list_3) (y_10 list_2) (xs_3 list_3) (x_55 list_2) (x_56 list_2) (x_57 list_2))
	(=>	(and (= x_55 x_57)
			(concat_0 x_56 xs_3)
			(x_11 x_57 y_10 x_56)
			(= x_13 (cons_3 y_10 xs_3)))
		(concat_0 x_55 x_13))))
(assert (forall ((x_13 list_3) (x_58 list_2))
	(=>	(and (= x_58 nil_2)
			(= x_13 nil_3))
		(concat_0 x_58 x_13))))
(declare-fun petersen_3 (list_2 Nat_0) Bool)
(assert (forall ((x_14 Nat_0) (x_59 list_2))
	(=>	(and (= x_59 nil_2)
			(= x_14 Z_0))
		(petersen_3 x_59 x_14))))
(assert (forall ((x_14 Nat_0) (x_60 list_2) (x_61 list_1) (x_62 list_2) (x_63 list_3) (x_64 list_2) (x_65 list_1) (x_66 list_2) (x_67 list_2) (x_85 Nat_0) (x_86 Nat_0))
	(=>	(and (= x_60 x_67)
			(primEnumFromTo_0 x_61 Z_0 x_85)
			(petersen_1 x_62 x_61)
			(petersen_2 x_63 x_14 (cons_2 (pair_1 x_86 Z_0) x_62))
			(concat_0 x_64 x_63)
			(primEnumFromTo_0 x_65 Z_0 x_14)
			(petersen_0 x_66 x_14 x_65)
			(x_11 x_67 x_64 x_66)
			(diseqNat_0 x_14 Z_0)
			(minus_0 x_85 x_14 (S_0 Z_0))
			(minus_0 x_86 x_14 (S_0 Z_0)))
		(petersen_3 x_60 x_14))))
(assert (forall ((a_1 list_1) (x_68 list_1) (x_69 list_2) (x_70 list_3) (x_71 list_2) (x_72 list_1) (x_73 list_2) (x_74 list_2) (x_75 Bool) (x_76 list_0) (x_77 Bool) (x_87 Nat_0) (x_88 Nat_0))
	(=>	(and true
			(= x_75 true)
			(= x_77 true)
			(primEnumFromTo_0 x_68 Z_0 x_87)
			(petersen_1 x_69 x_68)
			(petersen_2 x_70 (S_0 (S_0 (S_0 (S_0 (S_0 (S_0 (S_0 Z_0))))))) (cons_2 (pair_1 x_88 Z_0) x_69))
			(concat_0 x_71 x_70)
			(primEnumFromTo_0 x_72 Z_0 (S_0 (S_0 (S_0 (S_0 (S_0 (S_0 (S_0 Z_0))))))))
			(petersen_0 x_73 (S_0 (S_0 (S_0 (S_0 (S_0 (S_0 (S_0 Z_0))))))) x_72)
			(x_11 x_74 x_71 x_73)
			(colouring_1 x_75 x_74 a_1)
			(formula_0 x_76 a_1)
			(and_0 x_77 x_76)
			(minus_0 x_87 (S_0 (S_0 (S_0 (S_0 (S_0 (S_0 (S_0 Z_0))))))) (S_0 Z_0))
			(minus_0 x_88 (S_0 (S_0 (S_0 (S_0 (S_0 (S_0 (S_0 Z_0))))))) (S_0 Z_0)))
		false)))
(check-sat)
