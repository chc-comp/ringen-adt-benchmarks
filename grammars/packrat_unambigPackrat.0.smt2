(set-logic HORN)
(declare-datatypes ((Nat_0 0)) (((Z_1 ) (S_1 (unS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun unS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_0 (Nat_0) Bool)
(declare-fun isS_0 (Nat_0) Bool)
(assert (forall ((x_27 Nat_0) (x_26 Nat_0))
	(=> (= x_27 (S_1 x_26))
	    (unS_1 x_26 x_27))))
(assert (isZ_0 Z_1))
(assert (forall ((x_28 Nat_0))
	(isS_0 (S_1 x_28))))
(assert (forall ((x_29 Nat_0))
	(diseqNat_0 Z_1 (S_1 x_29))))
(assert (forall ((x_30 Nat_0))
	(diseqNat_0 (S_1 x_30) Z_1)))
(assert (forall ((x_31 Nat_0) (x_32 Nat_0))
	(=> (diseqNat_0 x_31 x_32)
	    (diseqNat_0 (S_1 x_31) (S_1 x_32)))))
(declare-fun add_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun minus_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun le_0 (Nat_0 Nat_0) Bool)
(declare-fun ge_0 (Nat_0 Nat_0) Bool)
(declare-fun lt_0 (Nat_0 Nat_0) Bool)
(declare-fun gt_0 (Nat_0 Nat_0) Bool)
(declare-fun mult_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun div_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun mod_0 (Nat_0 Nat_0 Nat_0) Bool)
(assert (forall ((y_1 Nat_0))
	(add_0 y_1 Z_1 y_1)))
(assert (forall ((x_24 Nat_0) (y_1 Nat_0) (r_0 Nat_0))
	(=> (add_0 r_0 x_24 y_1)
	    (add_0 (S_1 r_0) (S_1 x_24) y_1))))
(assert (forall ((y_1 Nat_0))
	(minus_0 Z_1 Z_1 y_1)))
(assert (forall ((x_24 Nat_0) (y_1 Nat_0) (r_0 Nat_0))
	(=> (minus_0 r_0 x_24 y_1)
	    (minus_0 (S_1 r_0) (S_1 x_24) y_1))))
(assert (forall ((y_1 Nat_0))
	(le_0 Z_1 y_1)))
(assert (forall ((x_24 Nat_0) (y_1 Nat_0))
	(=> (le_0 x_24 y_1)
	    (le_0 (S_1 x_24) (S_1 y_1)))))
(assert (forall ((y_1 Nat_0))
	(ge_0 y_1 Z_1)))
(assert (forall ((x_24 Nat_0) (y_1 Nat_0))
	(=> (ge_0 x_24 y_1)
	    (ge_0 (S_1 x_24) (S_1 y_1)))))
(assert (forall ((y_1 Nat_0))
	(lt_0 Z_1 (S_1 y_1))))
(assert (forall ((x_24 Nat_0) (y_1 Nat_0))
	(=> (lt_0 x_24 y_1)
	    (lt_0 (S_1 x_24) (S_1 y_1)))))
(assert (forall ((y_1 Nat_0))
	(gt_0 (S_1 y_1) Z_1)))
(assert (forall ((x_24 Nat_0) (y_1 Nat_0))
	(=> (gt_0 x_24 y_1)
	    (gt_0 (S_1 x_24) (S_1 y_1)))))
(assert (forall ((y_1 Nat_0))
	(mult_0 Z_1 Z_1 y_1)))
(assert (forall ((x_24 Nat_0) (y_1 Nat_0) (r_0 Nat_0) (z_1 Nat_0))
	(=>	(and (mult_0 r_0 x_24 y_1)
			(add_0 z_1 r_0 y_1))
		(mult_0 z_1 (S_1 x_24) y_1))))
(assert (forall ((x_24 Nat_0) (y_1 Nat_0))
	(=> (lt_0 x_24 y_1)
	    (div_0 Z_1 x_24 y_1))))
(assert (forall ((x_24 Nat_0) (y_1 Nat_0) (r_0 Nat_0) (z_1 Nat_0))
	(=>	(and (ge_0 x_24 y_1)
			(minus_0 z_1 x_24 y_1)
			(div_0 r_0 z_1 y_1))
		(div_0 (S_1 r_0) x_24 y_1))))
(assert (forall ((x_24 Nat_0) (y_1 Nat_0))
	(=> (lt_0 x_24 y_1)
	    (mod_0 x_24 x_24 y_1))))
(assert (forall ((x_24 Nat_0) (y_1 Nat_0) (r_0 Nat_0) (z_1 Nat_0))
	(=>	(and (ge_0 x_24 y_1)
			(minus_0 z_1 x_24 y_1)
			(mod_0 r_0 z_1 y_1))
		(mod_0 r_0 x_24 y_1))))
(declare-datatypes ((Tok_0 0)) (((X_0 ) (Y_0 ) (Z_0 ))))
(declare-fun diseqTok_0 (Tok_0 Tok_0) Bool)
(declare-fun isX_0 (Tok_0) Bool)
(declare-fun isY_0 (Tok_0) Bool)
(declare-fun isZ_1 (Tok_0) Bool)
(assert (isX_0 X_0))
(assert (isY_0 Y_0))
(assert (isZ_1 Z_0))
(assert (diseqTok_0 X_0 Y_0))
(assert (diseqTok_0 X_0 Z_0))
(assert (diseqTok_0 Y_0 X_0))
(assert (diseqTok_0 Z_0 X_0))
(assert (diseqTok_0 Y_0 Z_0))
(assert (diseqTok_0 Z_0 Y_0))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Tok_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_1 (Tok_0 list_0) Bool)
(declare-fun tail_1 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_39 list_0) (x_37 Tok_0) (x_38 list_0))
	(=> (= x_39 (cons_0 x_37 x_38))
	    (head_1 x_37 x_39))))
(assert (forall ((x_39 list_0) (x_37 Tok_0) (x_38 list_0))
	(=> (= x_39 (cons_0 x_37 x_38))
	    (tail_1 x_38 x_39))))
(assert (isnil_0 nil_0))
(assert (forall ((x_40 Tok_0) (x_41 list_0))
	(iscons_0 (cons_0 x_40 x_41))))
(assert (forall ((x_42 Tok_0) (x_43 list_0))
	(diseqlist_0 nil_0 (cons_0 x_42 x_43))))
(assert (forall ((x_44 Tok_0) (x_45 list_0))
	(diseqlist_0 (cons_0 x_44 x_45) nil_0)))
(assert (forall ((x_46 Tok_0) (x_47 list_0) (x_48 Tok_0) (x_49 list_0))
	(=> (diseqTok_0 x_46 x_48)
	    (diseqlist_0 (cons_0 x_46 x_47) (cons_0 x_48 x_49)))))
(assert (forall ((x_46 Tok_0) (x_47 list_0) (x_48 Tok_0) (x_49 list_0))
	(=> (diseqlist_0 x_47 x_49)
	    (diseqlist_0 (cons_0 x_46 x_47) (cons_0 x_48 x_49)))))
(declare-datatypes ((B_0 0)) (((SB_0 (projSB_0 B_0)) (ZB_0 ))))
(declare-fun diseqB_0 (B_0 B_0) Bool)
(declare-fun projSB_1 (B_0 B_0) Bool)
(declare-fun isSB_0 (B_0) Bool)
(declare-fun isZB_0 (B_0) Bool)
(assert (forall ((x_51 B_0) (x_50 B_0))
	(=> (= x_51 (SB_0 x_50))
	    (projSB_1 x_50 x_51))))
(assert (forall ((x_53 B_0))
	(isSB_0 (SB_0 x_53))))
(assert (isZB_0 ZB_0))
(assert (forall ((x_54 B_0))
	(diseqB_0 (SB_0 x_54) ZB_0)))
(assert (forall ((x_55 B_0))
	(diseqB_0 ZB_0 (SB_0 x_55))))
(assert (forall ((x_56 B_0) (x_57 B_0))
	(=> (diseqB_0 x_56 x_57)
	    (diseqB_0 (SB_0 x_56) (SB_0 x_57)))))
(declare-datatypes ((A_0 0)) (((SA_0 (projSA_0 A_0)) (ZA_0 ))))
(declare-fun diseqA_0 (A_0 A_0) Bool)
(declare-fun projSA_1 (A_0 A_0) Bool)
(declare-fun isSA_0 (A_0) Bool)
(declare-fun isZA_0 (A_0) Bool)
(assert (forall ((x_59 A_0) (x_58 A_0))
	(=> (= x_59 (SA_0 x_58))
	    (projSA_1 x_58 x_59))))
(assert (forall ((x_61 A_0))
	(isSA_0 (SA_0 x_61))))
(assert (isZA_0 ZA_0))
(assert (forall ((x_62 A_0))
	(diseqA_0 (SA_0 x_62) ZA_0)))
(assert (forall ((x_63 A_0))
	(diseqA_0 ZA_0 (SA_0 x_63))))
(assert (forall ((x_64 A_0) (x_65 A_0))
	(=> (diseqA_0 x_64 x_65)
	    (diseqA_0 (SA_0 x_64) (SA_0 x_65)))))
(declare-datatypes ((S_0 0)) (((A_1 (projA_0 A_0)) (B_1 (projB_0 B_0)))))
(declare-fun diseqS_0 (S_0 S_0) Bool)
(declare-fun projA_1 (A_0 S_0) Bool)
(declare-fun projB_1 (B_0 S_0) Bool)
(declare-fun isA_0 (S_0) Bool)
(declare-fun isB_0 (S_0) Bool)
(assert (forall ((x_67 S_0) (x_66 A_0))
	(=> (= x_67 (A_1 x_66))
	    (projA_1 x_66 x_67))))
(assert (forall ((x_69 S_0) (x_68 B_0))
	(=> (= x_69 (B_1 x_68))
	    (projB_1 x_68 x_69))))
(assert (forall ((x_70 A_0))
	(isA_0 (A_1 x_70))))
(assert (forall ((x_71 B_0))
	(isB_0 (B_1 x_71))))
(assert (forall ((x_72 A_0) (x_73 B_0))
	(diseqS_0 (A_1 x_72) (B_1 x_73))))
(assert (forall ((x_74 B_0) (x_75 A_0))
	(diseqS_0 (B_1 x_74) (A_1 x_75))))
(assert (forall ((x_76 A_0) (x_77 A_0))
	(=> (diseqA_0 x_76 x_77)
	    (diseqS_0 (A_1 x_76) (A_1 x_77)))))
(assert (forall ((x_78 B_0) (x_79 B_0))
	(=> (diseqB_0 x_78 x_79)
	    (diseqS_0 (B_1 x_78) (B_1 x_79)))))
(declare-fun x_0 (list_0 list_0 list_0) Bool)
(assert (forall ((x_1 list_0) (y_0 list_0) (z_0 Tok_0) (xs_0 list_0) (x_5 list_0) (x_6 list_0))
	(=>	(and (= x_5 (cons_0 z_0 x_6))
			(x_0 x_6 xs_0 y_0)
			(= x_1 (cons_0 z_0 xs_0)))
		(x_0 x_5 x_1 y_0))))
(assert (forall ((x_1 list_0) (y_0 list_0) (x_7 list_0))
	(=>	(and (= x_7 y_0)
			(= x_1 nil_0))
		(x_0 x_7 x_1 y_0))))
(declare-fun linA_0 (list_0 A_0) Bool)
(assert (forall ((x_2 A_0) (x_8 list_0))
	(=>	(and (= x_8 (cons_0 X_0 (cons_0 Z_0 (cons_0 Y_0 nil_0))))
			(= x_2 ZA_0))
		(linA_0 x_8 x_2))))
(assert (forall ((x_2 A_0) (a_0 A_0) (x_9 list_0) (x_10 list_0) (x_11 list_0) (x_12 list_0))
	(=>	(and (= x_9 x_12)
			(linA_0 x_10 a_0)
			(x_0 x_11 x_10 (cons_0 Y_0 nil_0))
			(x_0 x_12 (cons_0 X_0 nil_0) x_11)
			(= x_2 (SA_0 a_0)))
		(linA_0 x_9 x_2))))
(declare-fun linB_0 (list_0 B_0) Bool)
(assert (forall ((x_3 B_0) (x_13 list_0))
	(=>	(and (= x_13 (cons_0 X_0 (cons_0 Z_0 (cons_0 Y_0 (cons_0 Y_0 nil_0)))))
			(= x_3 ZB_0))
		(linB_0 x_13 x_3))))
(assert (forall ((x_3 B_0) (b_0 B_0) (x_14 list_0) (x_15 list_0) (x_16 list_0) (x_17 list_0))
	(=>	(and (= x_14 x_17)
			(linB_0 x_15 b_0)
			(x_0 x_16 x_15 (cons_0 Y_0 (cons_0 Y_0 nil_0)))
			(x_0 x_17 (cons_0 X_0 nil_0) x_16)
			(= x_3 (SB_0 b_0)))
		(linB_0 x_14 x_3))))
(declare-fun linS_0 (list_0 S_0) Bool)
(assert (forall ((x_4 S_0) (b_1 B_0) (x_18 list_0) (x_19 list_0))
	(=>	(and (= x_18 x_19)
			(linB_0 x_19 b_1)
			(= x_4 (B_1 b_1)))
		(linS_0 x_18 x_4))))
(assert (forall ((x_4 S_0) (a_1 A_0) (x_20 list_0) (x_21 list_0))
	(=>	(and (= x_20 x_21)
			(linA_0 x_21 a_1)
			(= x_4 (A_1 a_1)))
		(linS_0 x_20 x_4))))
(assert (forall ((u_0 S_0) (v_0 S_0) (x_22 list_0) (x_23 list_0))
	(=>	(and (diseqS_0 u_0 v_0)
			(= x_22 x_23)
			(linS_0 x_22 u_0)
			(linS_0 x_23 v_0))
		false)))
(check-sat)
