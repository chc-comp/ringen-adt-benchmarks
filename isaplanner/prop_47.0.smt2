(set-logic HORN)
(declare-datatypes ((Nat_1 0)) (((Z_1 ) (S_1 (unS_0 Nat_1)))))
(declare-fun diseqNat_0 (Nat_1 Nat_1) Bool)
(declare-fun unS_1 (Nat_1 Nat_1) Bool)
(declare-fun isZ_0 (Nat_1) Bool)
(declare-fun isS_0 (Nat_1) Bool)
(assert (forall ((x_23 Nat_1) (x_22 Nat_1))
	(=> (= x_23 (S_1 x_22))
	    (unS_1 x_22 x_23))))
(assert (isZ_0 Z_1))
(assert (forall ((x_24 Nat_1))
	(isS_0 (S_1 x_24))))
(assert (forall ((x_25 Nat_1))
	(diseqNat_0 Z_1 (S_1 x_25))))
(assert (forall ((x_26 Nat_1))
	(diseqNat_0 (S_1 x_26) Z_1)))
(assert (forall ((x_27 Nat_1) (x_28 Nat_1))
	(=> (diseqNat_0 x_27 x_28)
	    (diseqNat_0 (S_1 x_27) (S_1 x_28)))))
(declare-fun add_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun minus_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun le_0 (Nat_1 Nat_1) Bool)
(declare-fun ge_0 (Nat_1 Nat_1) Bool)
(declare-fun lt_0 (Nat_1 Nat_1) Bool)
(declare-fun gt_0 (Nat_1 Nat_1) Bool)
(declare-fun mult_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun div_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun mod_0 (Nat_1 Nat_1 Nat_1) Bool)
(assert (forall ((y_3 Nat_1))
	(add_0 y_3 Z_1 y_3)))
(assert (forall ((x_20 Nat_1) (y_3 Nat_1) (r_2 Nat_1))
	(=> (add_0 r_2 x_20 y_3)
	    (add_0 (S_1 r_2) (S_1 x_20) y_3))))
(assert (forall ((y_3 Nat_1))
	(minus_0 Z_1 Z_1 y_3)))
(assert (forall ((x_20 Nat_1) (y_3 Nat_1) (r_2 Nat_1))
	(=> (minus_0 r_2 x_20 y_3)
	    (minus_0 (S_1 r_2) (S_1 x_20) y_3))))
(assert (forall ((y_3 Nat_1))
	(le_0 Z_1 y_3)))
(assert (forall ((x_20 Nat_1) (y_3 Nat_1))
	(=> (le_0 x_20 y_3)
	    (le_0 (S_1 x_20) (S_1 y_3)))))
(assert (forall ((y_3 Nat_1))
	(ge_0 y_3 Z_1)))
(assert (forall ((x_20 Nat_1) (y_3 Nat_1))
	(=> (ge_0 x_20 y_3)
	    (ge_0 (S_1 x_20) (S_1 y_3)))))
(assert (forall ((y_3 Nat_1))
	(lt_0 Z_1 (S_1 y_3))))
(assert (forall ((x_20 Nat_1) (y_3 Nat_1))
	(=> (lt_0 x_20 y_3)
	    (lt_0 (S_1 x_20) (S_1 y_3)))))
(assert (forall ((y_3 Nat_1))
	(gt_0 (S_1 y_3) Z_1)))
(assert (forall ((x_20 Nat_1) (y_3 Nat_1))
	(=> (gt_0 x_20 y_3)
	    (gt_0 (S_1 x_20) (S_1 y_3)))))
(assert (forall ((y_3 Nat_1))
	(mult_0 Z_1 Z_1 y_3)))
(assert (forall ((x_20 Nat_1) (y_3 Nat_1) (r_2 Nat_1) (z_1 Nat_1))
	(=>	(and (mult_0 r_2 x_20 y_3)
			(add_0 z_1 r_2 y_3))
		(mult_0 z_1 (S_1 x_20) y_3))))
(assert (forall ((x_20 Nat_1) (y_3 Nat_1))
	(=> (lt_0 x_20 y_3)
	    (div_0 Z_1 x_20 y_3))))
(assert (forall ((x_20 Nat_1) (y_3 Nat_1) (r_2 Nat_1) (z_1 Nat_1))
	(=>	(and (ge_0 x_20 y_3)
			(minus_0 z_1 x_20 y_3)
			(div_0 r_2 z_1 y_3))
		(div_0 (S_1 r_2) x_20 y_3))))
(assert (forall ((x_20 Nat_1) (y_3 Nat_1))
	(=> (lt_0 x_20 y_3)
	    (mod_0 x_20 x_20 y_3))))
(assert (forall ((x_20 Nat_1) (y_3 Nat_1) (r_2 Nat_1) (z_1 Nat_1))
	(=>	(and (ge_0 x_20 y_3)
			(minus_0 z_1 x_20 y_3)
			(mod_0 r_2 z_1 y_3))
		(mod_0 r_2 x_20 y_3))))
(declare-datatypes ((Tree_0 0)) (((Leaf_0 ) (Node_0 (projNode_0 Tree_0) (projNode_1 Nat_1) (projNode_2 Tree_0)))))
(declare-fun diseqTree_0 (Tree_0 Tree_0) Bool)
(declare-fun projNode_3 (Tree_0 Tree_0) Bool)
(declare-fun projNode_4 (Nat_1 Tree_0) Bool)
(declare-fun projNode_5 (Tree_0 Tree_0) Bool)
(declare-fun isLeaf_0 (Tree_0) Bool)
(declare-fun isNode_0 (Tree_0) Bool)
(assert (forall ((x_33 Tree_0) (x_30 Tree_0) (x_31 Nat_1) (x_32 Tree_0))
	(=> (= x_33 (Node_0 x_30 x_31 x_32))
	    (projNode_3 x_30 x_33))))
(assert (forall ((x_33 Tree_0) (x_30 Tree_0) (x_31 Nat_1) (x_32 Tree_0))
	(=> (= x_33 (Node_0 x_30 x_31 x_32))
	    (projNode_4 x_31 x_33))))
(assert (forall ((x_33 Tree_0) (x_30 Tree_0) (x_31 Nat_1) (x_32 Tree_0))
	(=> (= x_33 (Node_0 x_30 x_31 x_32))
	    (projNode_5 x_32 x_33))))
(assert (isLeaf_0 Leaf_0))
(assert (forall ((x_34 Tree_0) (x_35 Nat_1) (x_36 Tree_0))
	(isNode_0 (Node_0 x_34 x_35 x_36))))
(assert (forall ((x_37 Tree_0) (x_38 Nat_1) (x_39 Tree_0))
	(diseqTree_0 Leaf_0 (Node_0 x_37 x_38 x_39))))
(assert (forall ((x_40 Tree_0) (x_41 Nat_1) (x_42 Tree_0))
	(diseqTree_0 (Node_0 x_40 x_41 x_42) Leaf_0)))
(assert (forall ((x_43 Tree_0) (x_44 Nat_1) (x_45 Tree_0) (x_46 Tree_0) (x_47 Nat_1) (x_48 Tree_0))
	(=> (diseqTree_0 x_43 x_46)
	    (diseqTree_0 (Node_0 x_43 x_44 x_45) (Node_0 x_46 x_47 x_48)))))
(assert (forall ((x_43 Tree_0) (x_44 Nat_1) (x_45 Tree_0) (x_46 Tree_0) (x_47 Nat_1) (x_48 Tree_0))
	(=> (diseqNat_0 x_44 x_47)
	    (diseqTree_0 (Node_0 x_43 x_44 x_45) (Node_0 x_46 x_47 x_48)))))
(assert (forall ((x_43 Tree_0) (x_44 Nat_1) (x_45 Tree_0) (x_46 Tree_0) (x_47 Nat_1) (x_48 Tree_0))
	(=> (diseqTree_0 x_45 x_48)
	    (diseqTree_0 (Node_0 x_43 x_44 x_45) (Node_0 x_46 x_47 x_48)))))
(declare-datatypes ((Nat_0 0)) (((Z_0 ) (S_0 (projS_0 Nat_0)))))
(declare-fun diseqNat_1 (Nat_0 Nat_0) Bool)
(declare-fun projS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_1 (Nat_0) Bool)
(declare-fun isS_1 (Nat_0) Bool)
(assert (forall ((x_51 Nat_0) (x_50 Nat_0))
	(=> (= x_51 (S_0 x_50))
	    (projS_1 x_50 x_51))))
(assert (isZ_1 Z_0))
(assert (forall ((x_52 Nat_0))
	(isS_1 (S_0 x_52))))
(assert (forall ((x_53 Nat_0))
	(diseqNat_1 Z_0 (S_0 x_53))))
(assert (forall ((x_54 Nat_0))
	(diseqNat_1 (S_0 x_54) Z_0)))
(assert (forall ((x_55 Nat_0) (x_56 Nat_0))
	(=> (diseqNat_1 x_55 x_56)
	    (diseqNat_1 (S_0 x_55) (S_0 x_56)))))
(declare-fun mirror_0 (Tree_0 Tree_0) Bool)
(assert (forall ((x_0 Tree_0) (l_0 Tree_0) (y_0 Nat_1) (r_0 Tree_0) (x_4 Tree_0) (x_5 Tree_0) (x_6 Tree_0))
	(=>	(and (= x_4 (Node_0 x_5 y_0 x_6))
			(mirror_0 x_5 r_0)
			(mirror_0 x_6 l_0)
			(= x_0 (Node_0 l_0 y_0 r_0)))
		(mirror_0 x_4 x_0))))
(assert (forall ((x_0 Tree_0) (x_7 Tree_0))
	(=>	(and (= x_7 Leaf_0)
			(= x_0 Leaf_0))
		(mirror_0 x_7 x_0))))
(declare-fun max_0 (Nat_0 Nat_0 Nat_0) Bool)
(assert (forall ((x_1 Nat_0) (y_1 Nat_0) (z_0 Nat_0) (x_2 Nat_0) (x_8 Nat_0) (x_9 Nat_0))
	(=>	(and (= x_8 (S_0 x_9))
			(max_0 x_9 z_0 x_2)
			(= x_1 (S_0 z_0))
			(= y_1 (S_0 x_2)))
		(max_0 x_8 x_1 y_1))))
(assert (forall ((x_1 Nat_0) (y_1 Nat_0) (z_0 Nat_0) (x_10 Nat_0))
	(=>	(and (= x_10 (S_0 z_0))
			(= x_1 (S_0 z_0))
			(= y_1 Z_0))
		(max_0 x_10 x_1 y_1))))
(assert (forall ((x_1 Nat_0) (y_1 Nat_0) (x_11 Nat_0))
	(=>	(and (= x_11 y_1)
			(= x_1 Z_0))
		(max_0 x_11 x_1 y_1))))
(declare-fun height_0 (Nat_0 Tree_0) Bool)
(assert (forall ((x_3 Tree_0) (l_1 Tree_0) (y_2 Nat_1) (r_1 Tree_0) (x_12 Nat_0) (x_13 Nat_0) (x_14 Nat_0) (x_15 Nat_0))
	(=>	(and (= x_12 (S_0 x_15))
			(height_0 x_13 l_1)
			(height_0 x_14 r_1)
			(max_0 x_15 x_13 x_14)
			(= x_3 (Node_0 l_1 y_2 r_1)))
		(height_0 x_12 x_3))))
(assert (forall ((x_3 Tree_0) (x_16 Nat_0))
	(=>	(and (= x_16 Z_0)
			(= x_3 Leaf_0))
		(height_0 x_16 x_3))))
(assert (forall ((a_0 Tree_0) (x_17 Tree_0) (x_18 Nat_0) (x_19 Nat_0))
	(=>	(and (diseqNat_1 x_18 x_19)
			(mirror_0 x_17 a_0)
			(height_0 x_18 x_17)
			(height_0 x_19 a_0))
		false)))
(check-sat)
